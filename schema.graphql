"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `GroupUser`."""
  groupUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GroupUser`."""
    orderBy: [GroupUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupUserFilter
  ): GroupUsersConnection

  """Reads and enables pagination through a set of `Group`."""
  groups(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter
  ): GroupsConnection

  """Reads and enables pagination through a set of `LanguageSkillLevel`."""
  languageSkillLevels(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LanguageSkillLevel`."""
    orderBy: [LanguageSkillLevelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageSkillLevelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageSkillLevelFilter
  ): LanguageSkillLevelsConnection

  """Reads and enables pagination through a set of `Language`."""
  languages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter
  ): LanguagesConnection

  """Reads and enables pagination through a set of `UserLanguage`."""
  userLanguages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserLanguage`."""
    orderBy: [UserLanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserLanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserLanguageFilter
  ): UserLanguagesConnection

  """Reads and enables pagination through a set of `UserSession`."""
  userSessions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserSession`."""
    orderBy: [UserSessionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserSessionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserSessionFilter
  ): UserSessionsConnection

  """Reads and enables pagination through a set of `User`."""
  users(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection
  groupUser(id: Int!): GroupUser
  group(id: Int!): Group
  languageSkillLevel(id: Int!): LanguageSkillLevel
  language(id: Int!): Language
  languageByAlpha2(alpha2: String!): Language
  languageByEnglishName(englishName: String!): Language
  userLanguage(id: Int!): UserLanguage
  userSession(sid: String!): UserSession
  user(id: Int!): User
  userByEmail(email: String!): User
  userByUuid(uuid: UUID!): User
  currentUserId: Int

  """Reads and enables pagination through a set of `User`."""
  usersWithoutGroup(
    ntv: Boolean
    lid: Int
    lsklid: Int

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection

  """Reads and enables pagination through a set of `User`."""
  usersWithoutGroups(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection

  """Reads and enables pagination through a set of `User`."""
  usersWithoutLearnerGroup(
    lid: Int
    lsklid: Int

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection

  """Reads and enables pagination through a set of `User`."""
  usersWithoutNativeGroup(
    lid: Int

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection

  """Reads a single `GroupUser` using its globally unique `ID`."""
  groupUserByNodeId(
    """The globally unique `ID` to be used in selecting a single `GroupUser`."""
    nodeId: ID!
  ): GroupUser

  """Reads a single `Group` using its globally unique `ID`."""
  groupByNodeId(
    """The globally unique `ID` to be used in selecting a single `Group`."""
    nodeId: ID!
  ): Group

  """Reads a single `LanguageSkillLevel` using its globally unique `ID`."""
  languageSkillLevelByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `LanguageSkillLevel`.
    """
    nodeId: ID!
  ): LanguageSkillLevel

  """Reads a single `Language` using its globally unique `ID`."""
  languageByNodeId(
    """The globally unique `ID` to be used in selecting a single `Language`."""
    nodeId: ID!
  ): Language

  """Reads a single `UserLanguage` using its globally unique `ID`."""
  userLanguageByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `UserLanguage`.
    """
    nodeId: ID!
  ): UserLanguage

  """Reads a single `UserSession` using its globally unique `ID`."""
  userSessionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `UserSession`.
    """
    nodeId: ID!
  ): UserSession

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `GroupUser` values."""
type GroupUsersConnection {
  """A list of `GroupUser` objects."""
  nodes: [GroupUser]!

  """
  A list of edges which contains the `GroupUser` and cursor to aid in pagination.
  """
  edges: [GroupUsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GroupUser` you could get from the connection."""
  totalCount: Int!
}

type GroupUser implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  userId: Int!
  groupId: Int!
  userType: UserType!
  joinedOn: Datetime!
  lastActive: Datetime

  """Reads a single `User` that is related to this `GroupUser`."""
  user: User

  """Reads a single `Group` that is related to this `GroupUser`."""
  group: Group
}

enum UserType {
  LEARNER
  NATIVE
  GLOBAL
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  username: String
  email: String!
  unconfirmedEmail: String
  gender: String
  bio: String!
  lastActiveAt: Datetime!
  createdAt: Datetime!
  passwordHash: String
  uuid: UUID!
  avatarUrl: String
  locale: Int!
  googleId: String

  """Reads a single `Language` that is related to this `User`."""
  languageByLocale: Language

  """Reads and enables pagination through a set of `UserLanguage`."""
  userLanguages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserLanguage`."""
    orderBy: [UserLanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserLanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserLanguageFilter
  ): UserLanguagesConnection!

  """Reads and enables pagination through a set of `GroupUser`."""
  groupUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GroupUser`."""
    orderBy: [GroupUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupUserFilter
  ): GroupUsersConnection!
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

type Language implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!

  """ISO 3166-1 alpha-2 standardized code"""
  alpha2: String!
  englishName: String!
  createdAt: Datetime!

  """Reads and enables pagination through a set of `User`."""
  usersByLocale(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection!

  """Reads and enables pagination through a set of `UserLanguage`."""
  userLanguages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserLanguage`."""
    orderBy: [UserLanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserLanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserLanguageFilter
  ): UserLanguagesConnection!

  """Reads and enables pagination through a set of `Group`."""
  groups(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter
  ): GroupsConnection!
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USERNAME_ASC
  USERNAME_DESC
  EMAIL_ASC
  EMAIL_DESC
  UNCONFIRMED_EMAIL_ASC
  UNCONFIRMED_EMAIL_DESC
  GENDER_ASC
  GENDER_DESC
  BIO_ASC
  BIO_DESC
  LAST_ACTIVE_AT_ASC
  LAST_ACTIVE_AT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PASSWORD_HASH_ASC
  PASSWORD_HASH_DESC
  UUID_ASC
  UUID_DESC
  AVATAR_URL_ASC
  AVATAR_URL_DESC
  LOCALE_ASC
  LOCALE_DESC
  GOOGLE_ID_ASC
  GOOGLE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `username` field."""
  username: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `unconfirmedEmail` field."""
  unconfirmedEmail: String

  """Checks for equality with the object’s `gender` field."""
  gender: String

  """Checks for equality with the object’s `bio` field."""
  bio: String

  """Checks for equality with the object’s `lastActiveAt` field."""
  lastActiveAt: Datetime

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `passwordHash` field."""
  passwordHash: String

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `avatarUrl` field."""
  avatarUrl: String

  """Checks for equality with the object’s `locale` field."""
  locale: Int

  """Checks for equality with the object’s `googleId` field."""
  googleId: String
}

"""
A filter to be used against `User` object types. All fields are combined with a logical ‘and.’
"""
input UserFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `username` field."""
  username: StringFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `unconfirmedEmail` field."""
  unconfirmedEmail: StringFilter

  """Filter by the object’s `gender` field."""
  gender: StringFilter

  """Filter by the object’s `bio` field."""
  bio: StringFilter

  """Filter by the object’s `lastActiveAt` field."""
  lastActiveAt: DatetimeFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `passwordHash` field."""
  passwordHash: StringFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `avatarUrl` field."""
  avatarUrl: StringFilter

  """Filter by the object’s `locale` field."""
  locale: IntFilter

  """Filter by the object’s `googleId` field."""
  googleId: StringFilter

  """Checks for all expressions in this list."""
  and: [UserFilter!]

  """Checks for any expressions in this list."""
  or: [UserFilter!]

  """Negates the expression."""
  not: UserFilter
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String
}

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """Not included in the specified list."""
  notIn: [Datetime!]

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime
}

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Included in the specified list."""
  in: [UUID!]

  """Not included in the specified list."""
  notIn: [UUID!]

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID
}

"""A connection to a list of `UserLanguage` values."""
type UserLanguagesConnection {
  """A list of `UserLanguage` objects."""
  nodes: [UserLanguage]!

  """
  A list of edges which contains the `UserLanguage` and cursor to aid in pagination.
  """
  edges: [UserLanguagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserLanguage` you could get from the connection."""
  totalCount: Int!
}

type UserLanguage implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  userId: Int!
  languageId: Int!
  languageSkillLevelId: Int
  native: Boolean!
  createdAt: Datetime!

  """Reads a single `User` that is related to this `UserLanguage`."""
  user: User

  """Reads a single `Language` that is related to this `UserLanguage`."""
  language: Language

  """
  Reads a single `LanguageSkillLevel` that is related to this `UserLanguage`.
  """
  languageSkillLevel: LanguageSkillLevel
}

type LanguageSkillLevel implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String

  """Reads and enables pagination through a set of `UserLanguage`."""
  userLanguages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserLanguage`."""
    orderBy: [UserLanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserLanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserLanguageFilter
  ): UserLanguagesConnection!

  """Reads and enables pagination through a set of `Group`."""
  groups(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter
  ): GroupsConnection!
}

"""Methods to use when ordering `UserLanguage`."""
enum UserLanguagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  LANGUAGE_ID_ASC
  LANGUAGE_ID_DESC
  LANGUAGE_SKILL_LEVEL_ID_ASC
  LANGUAGE_SKILL_LEVEL_ID_DESC
  NATIVE_ASC
  NATIVE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `UserLanguage` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UserLanguageCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `languageId` field."""
  languageId: Int

  """Checks for equality with the object’s `languageSkillLevelId` field."""
  languageSkillLevelId: Int

  """Checks for equality with the object’s `native` field."""
  native: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `UserLanguage` object types. All fields are combined with a logical ‘and.’
"""
input UserLanguageFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `languageId` field."""
  languageId: IntFilter

  """Filter by the object’s `languageSkillLevelId` field."""
  languageSkillLevelId: IntFilter

  """Filter by the object’s `native` field."""
  native: BooleanFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [UserLanguageFilter!]

  """Checks for any expressions in this list."""
  or: [UserLanguageFilter!]

  """Negates the expression."""
  not: UserLanguageFilter
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """Not included in the specified list."""
  notIn: [Boolean!]

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean
}

"""A connection to a list of `Group` values."""
type GroupsConnection {
  """A list of `Group` objects."""
  nodes: [Group]!

  """
  A list of edges which contains the `Group` and cursor to aid in pagination.
  """
  edges: [GroupsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Group` you could get from the connection."""
  totalCount: Int!
}

type Group implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  groupName: String
  global: Boolean!
  languageId: Int!
  languageSkillLevelId: Int!
  createdAt: Datetime!

  """Reads a single `Language` that is related to this `Group`."""
  language: Language

  """Reads a single `LanguageSkillLevel` that is related to this `Group`."""
  languageSkillLevel: LanguageSkillLevel

  """Reads and enables pagination through a set of `GroupUser`."""
  groupUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GroupUser`."""
    orderBy: [GroupUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupUserFilter
  ): GroupUsersConnection!
}

"""Methods to use when ordering `GroupUser`."""
enum GroupUsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
  USER_TYPE_ASC
  USER_TYPE_DESC
  JOINED_ON_ASC
  JOINED_ON_DESC
  LAST_ACTIVE_ASC
  LAST_ACTIVE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `GroupUser` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GroupUserCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `groupId` field."""
  groupId: Int

  """Checks for equality with the object’s `userType` field."""
  userType: UserType

  """Checks for equality with the object’s `joinedOn` field."""
  joinedOn: Datetime

  """Checks for equality with the object’s `lastActive` field."""
  lastActive: Datetime
}

"""
A filter to be used against `GroupUser` object types. All fields are combined with a logical ‘and.’
"""
input GroupUserFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `groupId` field."""
  groupId: IntFilter

  """Filter by the object’s `userType` field."""
  userType: UserTypeFilter

  """Filter by the object’s `joinedOn` field."""
  joinedOn: DatetimeFilter

  """Filter by the object’s `lastActive` field."""
  lastActive: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [GroupUserFilter!]

  """Checks for any expressions in this list."""
  or: [GroupUserFilter!]

  """Negates the expression."""
  not: GroupUserFilter
}

"""
A filter to be used against UserType fields. All fields are combined with a logical ‘and.’
"""
input UserTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: UserType

  """Not equal to the specified value."""
  notEqualTo: UserType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UserType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UserType

  """Included in the specified list."""
  in: [UserType!]

  """Not included in the specified list."""
  notIn: [UserType!]

  """Less than the specified value."""
  lessThan: UserType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UserType

  """Greater than the specified value."""
  greaterThan: UserType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UserType
}

"""A `Group` edge in the connection."""
type GroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Group` at the end of the edge."""
  node: Group
}

"""Methods to use when ordering `Group`."""
enum GroupsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  GROUP_NAME_ASC
  GROUP_NAME_DESC
  GLOBAL_ASC
  GLOBAL_DESC
  LANGUAGE_ID_ASC
  LANGUAGE_ID_DESC
  LANGUAGE_SKILL_LEVEL_ID_ASC
  LANGUAGE_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Group` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GroupCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `groupName` field."""
  groupName: String

  """Checks for equality with the object’s `global` field."""
  global: Boolean

  """Checks for equality with the object’s `languageId` field."""
  languageId: Int

  """Checks for equality with the object’s `languageSkillLevelId` field."""
  languageSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `Group` object types. All fields are combined with a logical ‘and.’
"""
input GroupFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `groupName` field."""
  groupName: StringFilter

  """Filter by the object’s `global` field."""
  global: BooleanFilter

  """Filter by the object’s `languageId` field."""
  languageId: IntFilter

  """Filter by the object’s `languageSkillLevelId` field."""
  languageSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [GroupFilter!]

  """Checks for any expressions in this list."""
  or: [GroupFilter!]

  """Negates the expression."""
  not: GroupFilter
}

"""A `UserLanguage` edge in the connection."""
type UserLanguagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserLanguage` at the end of the edge."""
  node: UserLanguage
}

"""A `GroupUser` edge in the connection."""
type GroupUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GroupUser` at the end of the edge."""
  node: GroupUser
}

"""A connection to a list of `LanguageSkillLevel` values."""
type LanguageSkillLevelsConnection {
  """A list of `LanguageSkillLevel` objects."""
  nodes: [LanguageSkillLevel]!

  """
  A list of edges which contains the `LanguageSkillLevel` and cursor to aid in pagination.
  """
  edges: [LanguageSkillLevelsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `LanguageSkillLevel` you could get from the connection.
  """
  totalCount: Int!
}

"""A `LanguageSkillLevel` edge in the connection."""
type LanguageSkillLevelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LanguageSkillLevel` at the end of the edge."""
  node: LanguageSkillLevel
}

"""Methods to use when ordering `LanguageSkillLevel`."""
enum LanguageSkillLevelsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `LanguageSkillLevel` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LanguageSkillLevelCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""
A filter to be used against `LanguageSkillLevel` object types. All fields are combined with a logical ‘and.’
"""
input LanguageSkillLevelFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Checks for all expressions in this list."""
  and: [LanguageSkillLevelFilter!]

  """Checks for any expressions in this list."""
  or: [LanguageSkillLevelFilter!]

  """Negates the expression."""
  not: LanguageSkillLevelFilter
}

"""A connection to a list of `Language` values."""
type LanguagesConnection {
  """A list of `Language` objects."""
  nodes: [Language]!

  """
  A list of edges which contains the `Language` and cursor to aid in pagination.
  """
  edges: [LanguagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Language` you could get from the connection."""
  totalCount: Int!
}

"""A `Language` edge in the connection."""
type LanguagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Language` at the end of the edge."""
  node: Language
}

"""Methods to use when ordering `Language`."""
enum LanguagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ALPHA2_ASC
  ALPHA2_DESC
  ENGLISH_NAME_ASC
  ENGLISH_NAME_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Language` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input LanguageCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `alpha2` field."""
  alpha2: String

  """Checks for equality with the object’s `englishName` field."""
  englishName: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `Language` object types. All fields are combined with a logical ‘and.’
"""
input LanguageFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `alpha2` field."""
  alpha2: StringFilter

  """Filter by the object’s `englishName` field."""
  englishName: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [LanguageFilter!]

  """Checks for any expressions in this list."""
  or: [LanguageFilter!]

  """Negates the expression."""
  not: LanguageFilter
}

"""A connection to a list of `UserSession` values."""
type UserSessionsConnection {
  """A list of `UserSession` objects."""
  nodes: [UserSession]!

  """
  A list of edges which contains the `UserSession` and cursor to aid in pagination.
  """
  edges: [UserSessionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserSession` you could get from the connection."""
  totalCount: Int!
}

type UserSession implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  sid: String!
  sess: JSON!
  expire: Datetime!
}

"""
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""A `UserSession` edge in the connection."""
type UserSessionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserSession` at the end of the edge."""
  node: UserSession
}

"""Methods to use when ordering `UserSession`."""
enum UserSessionsOrderBy {
  NATURAL
  SID_ASC
  SID_DESC
  SESS_ASC
  SESS_DESC
  EXPIRE_ASC
  EXPIRE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `UserSession` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserSessionCondition {
  """Checks for equality with the object’s `sid` field."""
  sid: String

  """Checks for equality with the object’s `sess` field."""
  sess: JSON

  """Checks for equality with the object’s `expire` field."""
  expire: Datetime
}

"""
A filter to be used against `UserSession` object types. All fields are combined with a logical ‘and.’
"""
input UserSessionFilter {
  """Filter by the object’s `sid` field."""
  sid: StringFilter

  """Filter by the object’s `expire` field."""
  expire: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [UserSessionFilter!]

  """Checks for any expressions in this list."""
  or: [UserSessionFilter!]

  """Negates the expression."""
  not: UserSessionFilter
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `GroupUser`."""
  createGroupUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGroupUserInput!
  ): CreateGroupUserPayload

  """Creates a single `Group`."""
  createGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGroupInput!
  ): CreateGroupPayload

  """Creates a single `LanguageSkillLevel`."""
  createLanguageSkillLevel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLanguageSkillLevelInput!
  ): CreateLanguageSkillLevelPayload

  """Creates a single `Language`."""
  createLanguage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLanguageInput!
  ): CreateLanguagePayload

  """Creates a single `UserLanguage`."""
  createUserLanguage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserLanguageInput!
  ): CreateUserLanguagePayload

  """Creates a single `UserSession`."""
  createUserSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserSessionInput!
  ): CreateUserSessionPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Updates a single `GroupUser` using its globally unique id and a patch."""
  updateGroupUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupUserByNodeIdInput!
  ): UpdateGroupUserPayload

  """Updates a single `GroupUser` using a unique key and a patch."""
  updateGroupUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupUserInput!
  ): UpdateGroupUserPayload

  """Updates a single `Group` using its globally unique id and a patch."""
  updateGroupByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupByNodeIdInput!
  ): UpdateGroupPayload

  """Updates a single `Group` using a unique key and a patch."""
  updateGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupInput!
  ): UpdateGroupPayload

  """
  Updates a single `LanguageSkillLevel` using its globally unique id and a patch.
  """
  updateLanguageSkillLevelByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLanguageSkillLevelByNodeIdInput!
  ): UpdateLanguageSkillLevelPayload

  """Updates a single `LanguageSkillLevel` using a unique key and a patch."""
  updateLanguageSkillLevel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLanguageSkillLevelInput!
  ): UpdateLanguageSkillLevelPayload

  """Updates a single `Language` using its globally unique id and a patch."""
  updateLanguageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLanguageByNodeIdInput!
  ): UpdateLanguagePayload

  """Updates a single `Language` using a unique key and a patch."""
  updateLanguage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLanguageInput!
  ): UpdateLanguagePayload

  """Updates a single `Language` using a unique key and a patch."""
  updateLanguageByAlpha2(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLanguageByAlpha2Input!
  ): UpdateLanguagePayload

  """Updates a single `Language` using a unique key and a patch."""
  updateLanguageByEnglishName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLanguageByEnglishNameInput!
  ): UpdateLanguagePayload

  """
  Updates a single `UserLanguage` using its globally unique id and a patch.
  """
  updateUserLanguageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserLanguageByNodeIdInput!
  ): UpdateUserLanguagePayload

  """Updates a single `UserLanguage` using a unique key and a patch."""
  updateUserLanguage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserLanguageInput!
  ): UpdateUserLanguagePayload

  """
  Updates a single `UserSession` using its globally unique id and a patch.
  """
  updateUserSessionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserSessionByNodeIdInput!
  ): UpdateUserSessionPayload

  """Updates a single `UserSession` using a unique key and a patch."""
  updateUserSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserSessionInput!
  ): UpdateUserSessionPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNodeIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByEmailInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByUuidInput!
  ): UpdateUserPayload

  """Deletes a single `GroupUser` using its globally unique id."""
  deleteGroupUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupUserByNodeIdInput!
  ): DeleteGroupUserPayload

  """Deletes a single `GroupUser` using a unique key."""
  deleteGroupUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupUserInput!
  ): DeleteGroupUserPayload

  """Deletes a single `Group` using its globally unique id."""
  deleteGroupByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupByNodeIdInput!
  ): DeleteGroupPayload

  """Deletes a single `Group` using a unique key."""
  deleteGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupInput!
  ): DeleteGroupPayload

  """Deletes a single `LanguageSkillLevel` using its globally unique id."""
  deleteLanguageSkillLevelByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLanguageSkillLevelByNodeIdInput!
  ): DeleteLanguageSkillLevelPayload

  """Deletes a single `LanguageSkillLevel` using a unique key."""
  deleteLanguageSkillLevel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLanguageSkillLevelInput!
  ): DeleteLanguageSkillLevelPayload

  """Deletes a single `Language` using its globally unique id."""
  deleteLanguageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLanguageByNodeIdInput!
  ): DeleteLanguagePayload

  """Deletes a single `Language` using a unique key."""
  deleteLanguage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLanguageInput!
  ): DeleteLanguagePayload

  """Deletes a single `Language` using a unique key."""
  deleteLanguageByAlpha2(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLanguageByAlpha2Input!
  ): DeleteLanguagePayload

  """Deletes a single `Language` using a unique key."""
  deleteLanguageByEnglishName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLanguageByEnglishNameInput!
  ): DeleteLanguagePayload

  """Deletes a single `UserLanguage` using its globally unique id."""
  deleteUserLanguageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserLanguageByNodeIdInput!
  ): DeleteUserLanguagePayload

  """Deletes a single `UserLanguage` using a unique key."""
  deleteUserLanguage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserLanguageInput!
  ): DeleteUserLanguagePayload

  """Deletes a single `UserSession` using its globally unique id."""
  deleteUserSessionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserSessionByNodeIdInput!
  ): DeleteUserSessionPayload

  """Deletes a single `UserSession` using a unique key."""
  deleteUserSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserSessionInput!
  ): DeleteUserSessionPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByNodeIdInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByEmailInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByUuidInput!
  ): DeleteUserPayload
}

"""The output of our create `GroupUser` mutation."""
type CreateGroupUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GroupUser` that was created by this mutation."""
  groupUser: GroupUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `GroupUser`."""
  user: User

  """Reads a single `Group` that is related to this `GroupUser`."""
  group: Group

  """An edge for our `GroupUser`. May be used by Relay 1."""
  groupUserEdge(
    """The method to use when ordering `GroupUser`."""
    orderBy: [GroupUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupUsersEdge
}

"""All input for the create `GroupUser` mutation."""
input CreateGroupUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GroupUser` to be created by this mutation."""
  groupUser: GroupUserInput!
}

"""An input for mutations affecting `GroupUser`"""
input GroupUserInput {
  id: Int
  userId: Int
  groupId: Int
  userType: UserType!
  joinedOn: Datetime
  lastActive: Datetime
}

"""The output of our create `Group` mutation."""
type CreateGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Group` that was created by this mutation."""
  group: Group

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Language` that is related to this `Group`."""
  language: Language

  """Reads a single `LanguageSkillLevel` that is related to this `Group`."""
  languageSkillLevel: LanguageSkillLevel

  """An edge for our `Group`. May be used by Relay 1."""
  groupEdge(
    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsEdge
}

"""All input for the create `Group` mutation."""
input CreateGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Group` to be created by this mutation."""
  group: GroupInput!
}

"""An input for mutations affecting `Group`"""
input GroupInput {
  id: Int
  groupName: String
  global: Boolean
  languageId: Int
  languageSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our create `LanguageSkillLevel` mutation."""
type CreateLanguageSkillLevelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LanguageSkillLevel` that was created by this mutation."""
  languageSkillLevel: LanguageSkillLevel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LanguageSkillLevel`. May be used by Relay 1."""
  languageSkillLevelEdge(
    """The method to use when ordering `LanguageSkillLevel`."""
    orderBy: [LanguageSkillLevelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguageSkillLevelsEdge
}

"""All input for the create `LanguageSkillLevel` mutation."""
input CreateLanguageSkillLevelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `LanguageSkillLevel` to be created by this mutation."""
  languageSkillLevel: LanguageSkillLevelInput!
}

"""An input for mutations affecting `LanguageSkillLevel`"""
input LanguageSkillLevelInput {
  id: Int
  name: String
}

"""The output of our create `Language` mutation."""
type CreateLanguagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Language` that was created by this mutation."""
  language: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Language`. May be used by Relay 1."""
  languageEdge(
    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguagesEdge
}

"""All input for the create `Language` mutation."""
input CreateLanguageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Language` to be created by this mutation."""
  language: LanguageInput!
}

"""An input for mutations affecting `Language`"""
input LanguageInput {
  id: Int

  """ISO 3166-1 alpha-2 standardized code"""
  alpha2: String!
  englishName: String!
  createdAt: Datetime
}

"""The output of our create `UserLanguage` mutation."""
type CreateUserLanguagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserLanguage` that was created by this mutation."""
  userLanguage: UserLanguage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserLanguage`."""
  user: User

  """Reads a single `Language` that is related to this `UserLanguage`."""
  language: Language

  """
  Reads a single `LanguageSkillLevel` that is related to this `UserLanguage`.
  """
  languageSkillLevel: LanguageSkillLevel

  """An edge for our `UserLanguage`. May be used by Relay 1."""
  userLanguageEdge(
    """The method to use when ordering `UserLanguage`."""
    orderBy: [UserLanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserLanguagesEdge
}

"""All input for the create `UserLanguage` mutation."""
input CreateUserLanguageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserLanguage` to be created by this mutation."""
  userLanguage: UserLanguageInput!
}

"""An input for mutations affecting `UserLanguage`"""
input UserLanguageInput {
  id: Int
  userId: Int
  languageId: Int
  languageSkillLevelId: Int
  native: Boolean
  createdAt: Datetime
}

"""The output of our create `UserSession` mutation."""
type CreateUserSessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserSession` that was created by this mutation."""
  userSession: UserSession

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserSession`. May be used by Relay 1."""
  userSessionEdge(
    """The method to use when ordering `UserSession`."""
    orderBy: [UserSessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserSessionsEdge
}

"""All input for the create `UserSession` mutation."""
input CreateUserSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserSession` to be created by this mutation."""
  userSession: UserSessionInput!
}

"""An input for mutations affecting `UserSession`"""
input UserSessionInput {
  sid: String!
  sess: JSON!
  expire: Datetime!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Language` that is related to this `User`."""
  languageByLocale: Language

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""An input for mutations affecting `User`"""
input UserInput {
  id: Int
  username: String
  email: String!
  unconfirmedEmail: String
  gender: String
  bio: String
  lastActiveAt: Datetime
  createdAt: Datetime
  passwordHash: String
  uuid: UUID!
  avatarUrl: String
  locale: Int
  googleId: String
}

"""The output of our update `GroupUser` mutation."""
type UpdateGroupUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GroupUser` that was updated by this mutation."""
  groupUser: GroupUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `GroupUser`."""
  user: User

  """Reads a single `Group` that is related to this `GroupUser`."""
  group: Group

  """An edge for our `GroupUser`. May be used by Relay 1."""
  groupUserEdge(
    """The method to use when ordering `GroupUser`."""
    orderBy: [GroupUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupUsersEdge
}

"""All input for the `updateGroupUserByNodeId` mutation."""
input UpdateGroupUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GroupUser` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GroupUser` being updated.
  """
  patch: GroupUserPatch!
}

"""
Represents an update to a `GroupUser`. Fields that are set will be updated.
"""
input GroupUserPatch {
  id: Int
  userId: Int
  groupId: Int
  userType: UserType
  joinedOn: Datetime
  lastActive: Datetime
}

"""All input for the `updateGroupUser` mutation."""
input UpdateGroupUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GroupUser` being updated.
  """
  patch: GroupUserPatch!
  id: Int!
}

"""The output of our update `Group` mutation."""
type UpdateGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Group` that was updated by this mutation."""
  group: Group

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Language` that is related to this `Group`."""
  language: Language

  """Reads a single `LanguageSkillLevel` that is related to this `Group`."""
  languageSkillLevel: LanguageSkillLevel

  """An edge for our `Group`. May be used by Relay 1."""
  groupEdge(
    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsEdge
}

"""All input for the `updateGroupByNodeId` mutation."""
input UpdateGroupByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Group` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  patch: GroupPatch!
}

"""
Represents an update to a `Group`. Fields that are set will be updated.
"""
input GroupPatch {
  id: Int
  groupName: String
  global: Boolean
  languageId: Int
  languageSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updateGroup` mutation."""
input UpdateGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  patch: GroupPatch!
  id: Int!
}

"""The output of our update `LanguageSkillLevel` mutation."""
type UpdateLanguageSkillLevelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LanguageSkillLevel` that was updated by this mutation."""
  languageSkillLevel: LanguageSkillLevel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LanguageSkillLevel`. May be used by Relay 1."""
  languageSkillLevelEdge(
    """The method to use when ordering `LanguageSkillLevel`."""
    orderBy: [LanguageSkillLevelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguageSkillLevelsEdge
}

"""All input for the `updateLanguageSkillLevelByNodeId` mutation."""
input UpdateLanguageSkillLevelByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LanguageSkillLevel` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `LanguageSkillLevel` being updated.
  """
  patch: LanguageSkillLevelPatch!
}

"""
Represents an update to a `LanguageSkillLevel`. Fields that are set will be updated.
"""
input LanguageSkillLevelPatch {
  id: Int
  name: String
}

"""All input for the `updateLanguageSkillLevel` mutation."""
input UpdateLanguageSkillLevelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LanguageSkillLevel` being updated.
  """
  patch: LanguageSkillLevelPatch!
  id: Int!
}

"""The output of our update `Language` mutation."""
type UpdateLanguagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Language` that was updated by this mutation."""
  language: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Language`. May be used by Relay 1."""
  languageEdge(
    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguagesEdge
}

"""All input for the `updateLanguageByNodeId` mutation."""
input UpdateLanguageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Language` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Language` being updated.
  """
  patch: LanguagePatch!
}

"""
Represents an update to a `Language`. Fields that are set will be updated.
"""
input LanguagePatch {
  id: Int

  """ISO 3166-1 alpha-2 standardized code"""
  alpha2: String
  englishName: String
  createdAt: Datetime
}

"""All input for the `updateLanguage` mutation."""
input UpdateLanguageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Language` being updated.
  """
  patch: LanguagePatch!
  id: Int!
}

"""All input for the `updateLanguageByAlpha2` mutation."""
input UpdateLanguageByAlpha2Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Language` being updated.
  """
  patch: LanguagePatch!

  """ISO 3166-1 alpha-2 standardized code"""
  alpha2: String!
}

"""All input for the `updateLanguageByEnglishName` mutation."""
input UpdateLanguageByEnglishNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Language` being updated.
  """
  patch: LanguagePatch!
  englishName: String!
}

"""The output of our update `UserLanguage` mutation."""
type UpdateUserLanguagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserLanguage` that was updated by this mutation."""
  userLanguage: UserLanguage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserLanguage`."""
  user: User

  """Reads a single `Language` that is related to this `UserLanguage`."""
  language: Language

  """
  Reads a single `LanguageSkillLevel` that is related to this `UserLanguage`.
  """
  languageSkillLevel: LanguageSkillLevel

  """An edge for our `UserLanguage`. May be used by Relay 1."""
  userLanguageEdge(
    """The method to use when ordering `UserLanguage`."""
    orderBy: [UserLanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserLanguagesEdge
}

"""All input for the `updateUserLanguageByNodeId` mutation."""
input UpdateUserLanguageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserLanguage` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserLanguage` being updated.
  """
  patch: UserLanguagePatch!
}

"""
Represents an update to a `UserLanguage`. Fields that are set will be updated.
"""
input UserLanguagePatch {
  id: Int
  userId: Int
  languageId: Int
  languageSkillLevelId: Int
  native: Boolean
  createdAt: Datetime
}

"""All input for the `updateUserLanguage` mutation."""
input UpdateUserLanguageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserLanguage` being updated.
  """
  patch: UserLanguagePatch!
  id: Int!
}

"""The output of our update `UserSession` mutation."""
type UpdateUserSessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserSession` that was updated by this mutation."""
  userSession: UserSession

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserSession`. May be used by Relay 1."""
  userSessionEdge(
    """The method to use when ordering `UserSession`."""
    orderBy: [UserSessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserSessionsEdge
}

"""All input for the `updateUserSessionByNodeId` mutation."""
input UpdateUserSessionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserSession` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserSession` being updated.
  """
  patch: UserSessionPatch!
}

"""
Represents an update to a `UserSession`. Fields that are set will be updated.
"""
input UserSessionPatch {
  sid: String
  sess: JSON
  expire: Datetime
}

"""All input for the `updateUserSession` mutation."""
input UpdateUserSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserSession` being updated.
  """
  patch: UserSessionPatch!
  sid: String!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Language` that is related to this `User`."""
  languageByLocale: Language

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `updateUserByNodeId` mutation."""
input UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  id: Int
  username: String
  email: String
  unconfirmedEmail: String
  gender: String
  bio: String
  lastActiveAt: Datetime
  createdAt: Datetime
  passwordHash: String
  uuid: UUID
  avatarUrl: String
  locale: Int
  googleId: String
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  id: Int!
}

"""All input for the `updateUserByEmail` mutation."""
input UpdateUserByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  email: String!
}

"""All input for the `updateUserByUuid` mutation."""
input UpdateUserByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  uuid: UUID!
}

"""The output of our delete `GroupUser` mutation."""
type DeleteGroupUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GroupUser` that was deleted by this mutation."""
  groupUser: GroupUser
  deletedGroupUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `GroupUser`."""
  user: User

  """Reads a single `Group` that is related to this `GroupUser`."""
  group: Group

  """An edge for our `GroupUser`. May be used by Relay 1."""
  groupUserEdge(
    """The method to use when ordering `GroupUser`."""
    orderBy: [GroupUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupUsersEdge
}

"""All input for the `deleteGroupUserByNodeId` mutation."""
input DeleteGroupUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GroupUser` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGroupUser` mutation."""
input DeleteGroupUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Group` mutation."""
type DeleteGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Group` that was deleted by this mutation."""
  group: Group
  deletedGroupNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Language` that is related to this `Group`."""
  language: Language

  """Reads a single `LanguageSkillLevel` that is related to this `Group`."""
  languageSkillLevel: LanguageSkillLevel

  """An edge for our `Group`. May be used by Relay 1."""
  groupEdge(
    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsEdge
}

"""All input for the `deleteGroupByNodeId` mutation."""
input DeleteGroupByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Group` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGroup` mutation."""
input DeleteGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `LanguageSkillLevel` mutation."""
type DeleteLanguageSkillLevelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LanguageSkillLevel` that was deleted by this mutation."""
  languageSkillLevel: LanguageSkillLevel
  deletedLanguageSkillLevelNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LanguageSkillLevel`. May be used by Relay 1."""
  languageSkillLevelEdge(
    """The method to use when ordering `LanguageSkillLevel`."""
    orderBy: [LanguageSkillLevelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguageSkillLevelsEdge
}

"""All input for the `deleteLanguageSkillLevelByNodeId` mutation."""
input DeleteLanguageSkillLevelByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LanguageSkillLevel` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteLanguageSkillLevel` mutation."""
input DeleteLanguageSkillLevelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Language` mutation."""
type DeleteLanguagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Language` that was deleted by this mutation."""
  language: Language
  deletedLanguageNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Language`. May be used by Relay 1."""
  languageEdge(
    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguagesEdge
}

"""All input for the `deleteLanguageByNodeId` mutation."""
input DeleteLanguageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Language` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteLanguage` mutation."""
input DeleteLanguageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteLanguageByAlpha2` mutation."""
input DeleteLanguageByAlpha2Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """ISO 3166-1 alpha-2 standardized code"""
  alpha2: String!
}

"""All input for the `deleteLanguageByEnglishName` mutation."""
input DeleteLanguageByEnglishNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  englishName: String!
}

"""The output of our delete `UserLanguage` mutation."""
type DeleteUserLanguagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserLanguage` that was deleted by this mutation."""
  userLanguage: UserLanguage
  deletedUserLanguageNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserLanguage`."""
  user: User

  """Reads a single `Language` that is related to this `UserLanguage`."""
  language: Language

  """
  Reads a single `LanguageSkillLevel` that is related to this `UserLanguage`.
  """
  languageSkillLevel: LanguageSkillLevel

  """An edge for our `UserLanguage`. May be used by Relay 1."""
  userLanguageEdge(
    """The method to use when ordering `UserLanguage`."""
    orderBy: [UserLanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserLanguagesEdge
}

"""All input for the `deleteUserLanguageByNodeId` mutation."""
input DeleteUserLanguageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserLanguage` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserLanguage` mutation."""
input DeleteUserLanguageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `UserSession` mutation."""
type DeleteUserSessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserSession` that was deleted by this mutation."""
  userSession: UserSession
  deletedUserSessionNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserSession`. May be used by Relay 1."""
  userSessionEdge(
    """The method to use when ordering `UserSession`."""
    orderBy: [UserSessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserSessionsEdge
}

"""All input for the `deleteUserSessionByNodeId` mutation."""
input DeleteUserSessionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserSession` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserSession` mutation."""
input DeleteUserSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sid: String!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Language` that is related to this `User`."""
  languageByLocale: Language

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `deleteUserByNodeId` mutation."""
input DeleteUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteUserByEmail` mutation."""
input DeleteUserByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}

"""All input for the `deleteUserByUuid` mutation."""
input DeleteUserByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}
