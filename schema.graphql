"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `GroupUser`."""
  groupUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GroupUser`."""
    orderBy: [GroupUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupUserFilter
  ): GroupUsersConnection

  """Reads and enables pagination through a set of `Group`."""
  groups(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter
  ): GroupsConnection

  """
  Reads and enables pagination through a set of `ChineseGuessCharacterQuestion`.
  """
  chineseGuessCharacterQuestions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChineseGuessCharacterQuestion`."""
    orderBy: [ChineseGuessCharacterQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChineseGuessCharacterQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChineseGuessCharacterQuestionFilter
  ): ChineseGuessCharacterQuestionsConnection

  """Reads and enables pagination through a set of `InviteToken`."""
  inviteTokens(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `InviteToken`."""
    orderBy: [InviteTokensOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InviteTokenCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InviteTokenFilter
  ): InviteTokensConnection

  """Reads and enables pagination through a set of `LanguageSkillLevel`."""
  languageSkillLevels(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LanguageSkillLevel`."""
    orderBy: [LanguageSkillLevelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageSkillLevelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageSkillLevelFilter
  ): LanguageSkillLevelsConnection

  """Reads and enables pagination through a set of `Language`."""
  languages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter
  ): LanguagesConnection

  """Reads and enables pagination through a set of `MessagePreview`."""
  messagePreviews(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MessagePreview`."""
    orderBy: [MessagePreviewsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessagePreviewCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessagePreviewFilter
  ): MessagePreviewsConnection

  """Reads and enables pagination through a set of `Message`."""
  messages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): MessagesConnection

  """Reads and enables pagination through a set of `NotificationChannel`."""
  notificationChannels(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NotificationChannel`."""
    orderBy: [NotificationChannelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationChannelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationChannelFilter
  ): NotificationChannelsConnection

  """Reads and enables pagination through a set of `Notification`."""
  notifications(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection

  """Reads and enables pagination through a set of `PostLike`."""
  postLikes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PostLike`."""
    orderBy: [PostLikesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostLikeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostLikeFilter
  ): PostLikesConnection

  """Reads and enables pagination through a set of `PostRecording`."""
  postRecordings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PostRecording`."""
    orderBy: [PostRecordingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostRecordingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostRecordingFilter
  ): PostRecordingsConnection

  """Reads and enables pagination through a set of `Post`."""
  posts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter
  ): PostsConnection

  """Reads and enables pagination through a set of `Prompt`."""
  prompts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Prompt`."""
    orderBy: [PromptsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PromptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PromptFilter
  ): PromptsConnection

  """Reads and enables pagination through a set of `GermanRandomQuestion`."""
  germanRandomQuestions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GermanRandomQuestion`."""
    orderBy: [GermanRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GermanRandomQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GermanRandomQuestionFilter
  ): GermanRandomQuestionsConnection

  """Reads and enables pagination through a set of `EnglishRandomQuestion`."""
  englishRandomQuestions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EnglishRandomQuestion`."""
    orderBy: [EnglishRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EnglishRandomQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EnglishRandomQuestionFilter
  ): EnglishRandomQuestionsConnection

  """Reads and enables pagination through a set of `SpanishRandomQuestion`."""
  spanishRandomQuestions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SpanishRandomQuestion`."""
    orderBy: [SpanishRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpanishRandomQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpanishRandomQuestionFilter
  ): SpanishRandomQuestionsConnection

  """Reads and enables pagination through a set of `FrenchRandomQuestion`."""
  frenchRandomQuestions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FrenchRandomQuestion`."""
    orderBy: [FrenchRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FrenchRandomQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FrenchRandomQuestionFilter
  ): FrenchRandomQuestionsConnection

  """Reads and enables pagination through a set of `ItalianRandomQuestion`."""
  italianRandomQuestions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ItalianRandomQuestion`."""
    orderBy: [ItalianRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItalianRandomQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ItalianRandomQuestionFilter
  ): ItalianRandomQuestionsConnection

  """
  Reads and enables pagination through a set of `JapaneseRandomQuestion`.
  """
  japaneseRandomQuestions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `JapaneseRandomQuestion`."""
    orderBy: [JapaneseRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JapaneseRandomQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: JapaneseRandomQuestionFilter
  ): JapaneseRandomQuestionsConnection

  """Reads and enables pagination through a set of `KoreanRandomQuestion`."""
  koreanRandomQuestions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `KoreanRandomQuestion`."""
    orderBy: [KoreanRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: KoreanRandomQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: KoreanRandomQuestionFilter
  ): KoreanRandomQuestionsConnection

  """
  Reads and enables pagination through a set of `PortugueseRandomQuestion`.
  """
  portugueseRandomQuestions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PortugueseRandomQuestion`."""
    orderBy: [PortugueseRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PortugueseRandomQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PortugueseRandomQuestionFilter
  ): PortugueseRandomQuestionsConnection

  """Reads and enables pagination through a set of `RussianRandomQuestion`."""
  russianRandomQuestions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RussianRandomQuestion`."""
    orderBy: [RussianRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RussianRandomQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RussianRandomQuestionFilter
  ): RussianRandomQuestionsConnection

  """Reads and enables pagination through a set of `ChineseRandomQuestion`."""
  chineseRandomQuestions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChineseRandomQuestion`."""
    orderBy: [ChineseRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChineseRandomQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChineseRandomQuestionFilter
  ): ChineseRandomQuestionsConnection

  """Reads and enables pagination through a set of `UserDevice`."""
  userDevices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserDevice`."""
    orderBy: [UserDevicesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserDeviceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserDeviceFilter
  ): UserDevicesConnection

  """Reads and enables pagination through a set of `UserLanguage`."""
  userLanguages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserLanguage`."""
    orderBy: [UserLanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserLanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserLanguageFilter
  ): UserLanguagesConnection

  """Reads and enables pagination through a set of `UserSession`."""
  userSessions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserSession`."""
    orderBy: [UserSessionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserSessionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserSessionFilter
  ): UserSessionsConnection

  """Reads and enables pagination through a set of `User`."""
  users(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection

  """Reads and enables pagination through a set of `GermanWord`."""
  germanWords(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GermanWord`."""
    orderBy: [GermanWordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GermanWordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GermanWordFilter
  ): GermanWordsConnection

  """Reads and enables pagination through a set of `EnglishWord`."""
  englishWords(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EnglishWord`."""
    orderBy: [EnglishWordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EnglishWordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EnglishWordFilter
  ): EnglishWordsConnection

  """Reads and enables pagination through a set of `SpanishWord`."""
  spanishWords(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SpanishWord`."""
    orderBy: [SpanishWordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpanishWordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpanishWordFilter
  ): SpanishWordsConnection

  """Reads and enables pagination through a set of `FrenchWord`."""
  frenchWords(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FrenchWord`."""
    orderBy: [FrenchWordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FrenchWordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FrenchWordFilter
  ): FrenchWordsConnection

  """Reads and enables pagination through a set of `ItalianWord`."""
  italianWords(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ItalianWord`."""
    orderBy: [ItalianWordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItalianWordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ItalianWordFilter
  ): ItalianWordsConnection

  """Reads and enables pagination through a set of `PortugueseWord`."""
  portugueseWords(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PortugueseWord`."""
    orderBy: [PortugueseWordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PortugueseWordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PortugueseWordFilter
  ): PortugueseWordsConnection

  """Reads and enables pagination through a set of `RussianWord`."""
  russianWords(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RussianWord`."""
    orderBy: [RussianWordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RussianWordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RussianWordFilter
  ): RussianWordsConnection

  """
  Reads and enables pagination through a set of `GermanWouldYouRatherQuestion`.
  """
  germanWouldYouRatherQuestions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GermanWouldYouRatherQuestion`."""
    orderBy: [GermanWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GermanWouldYouRatherQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GermanWouldYouRatherQuestionFilter
  ): GermanWouldYouRatherQuestionsConnection

  """
  Reads and enables pagination through a set of `EnglishWouldYouRatherQuestion`.
  """
  englishWouldYouRatherQuestions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EnglishWouldYouRatherQuestion`."""
    orderBy: [EnglishWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EnglishWouldYouRatherQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EnglishWouldYouRatherQuestionFilter
  ): EnglishWouldYouRatherQuestionsConnection

  """
  Reads and enables pagination through a set of `SpanishWouldYouRatherQuestion`.
  """
  spanishWouldYouRatherQuestions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SpanishWouldYouRatherQuestion`."""
    orderBy: [SpanishWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpanishWouldYouRatherQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpanishWouldYouRatherQuestionFilter
  ): SpanishWouldYouRatherQuestionsConnection

  """
  Reads and enables pagination through a set of `FrenchWouldYouRatherQuestion`.
  """
  frenchWouldYouRatherQuestions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FrenchWouldYouRatherQuestion`."""
    orderBy: [FrenchWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FrenchWouldYouRatherQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FrenchWouldYouRatherQuestionFilter
  ): FrenchWouldYouRatherQuestionsConnection

  """
  Reads and enables pagination through a set of `ItalianWouldYouRatherQuestion`.
  """
  italianWouldYouRatherQuestions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ItalianWouldYouRatherQuestion`."""
    orderBy: [ItalianWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItalianWouldYouRatherQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ItalianWouldYouRatherQuestionFilter
  ): ItalianWouldYouRatherQuestionsConnection

  """
  Reads and enables pagination through a set of `JapaneseWouldYouRatherQuestion`.
  """
  japaneseWouldYouRatherQuestions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `JapaneseWouldYouRatherQuestion`."""
    orderBy: [JapaneseWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JapaneseWouldYouRatherQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: JapaneseWouldYouRatherQuestionFilter
  ): JapaneseWouldYouRatherQuestionsConnection

  """
  Reads and enables pagination through a set of `KoreanWouldYouRatherQuestion`.
  """
  koreanWouldYouRatherQuestions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `KoreanWouldYouRatherQuestion`."""
    orderBy: [KoreanWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: KoreanWouldYouRatherQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: KoreanWouldYouRatherQuestionFilter
  ): KoreanWouldYouRatherQuestionsConnection

  """
  Reads and enables pagination through a set of `PortugueseWouldYouRatherQuestion`.
  """
  portugueseWouldYouRatherQuestions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PortugueseWouldYouRatherQuestion`."""
    orderBy: [PortugueseWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PortugueseWouldYouRatherQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PortugueseWouldYouRatherQuestionFilter
  ): PortugueseWouldYouRatherQuestionsConnection

  """
  Reads and enables pagination through a set of `RussianWouldYouRatherQuestion`.
  """
  russianWouldYouRatherQuestions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RussianWouldYouRatherQuestion`."""
    orderBy: [RussianWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RussianWouldYouRatherQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RussianWouldYouRatherQuestionFilter
  ): RussianWouldYouRatherQuestionsConnection

  """
  Reads and enables pagination through a set of `ChineseWouldYouRatherQuestion`.
  """
  chineseWouldYouRatherQuestions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChineseWouldYouRatherQuestion`."""
    orderBy: [ChineseWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChineseWouldYouRatherQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChineseWouldYouRatherQuestionFilter
  ): ChineseWouldYouRatherQuestionsConnection
  groupUser(id: Int!): GroupUser
  group(id: Int!): Group
  groupByUuid(uuid: UUID!): Group
  chineseGuessCharacterQuestion(id: Int!): ChineseGuessCharacterQuestion
  chineseGuessCharacterQuestionByUuid(uuid: UUID!): ChineseGuessCharacterQuestion
  inviteToken(id: Int!): InviteToken
  languageSkillLevel(id: Int!): LanguageSkillLevel
  language(id: Int!): Language
  languageByAlpha2(alpha2: String!): Language
  languageByEnglishName(englishName: String!): Language
  messagePreview(id: Int!): MessagePreview
  messagePreviewByUuid(uuid: UUID!): MessagePreview
  message(id: Int!): Message
  messageByUuid(uuid: UUID!): Message
  notificationChannel(id: Int!): NotificationChannel
  notificationChannelByUuid(uuid: UUID!): NotificationChannel
  notificationChannelByName(name: String!): NotificationChannel
  notification(id: Int!): Notification
  notificationByUuid(uuid: UUID!): Notification
  postLike(id: Int!): PostLike
  postRecording(id: Int!): PostRecording
  postRecordingByUuid(uuid: UUID!): PostRecording
  post(id: Int!): Post
  postByUuid(uuid: UUID!): Post
  prompt(id: Int!): Prompt
  promptByUuid(uuid: UUID!): Prompt
  germanRandomQuestion(id: Int!): GermanRandomQuestion
  germanRandomQuestionByUuid(uuid: UUID!): GermanRandomQuestion
  englishRandomQuestion(id: Int!): EnglishRandomQuestion
  englishRandomQuestionByUuid(uuid: UUID!): EnglishRandomQuestion
  spanishRandomQuestion(id: Int!): SpanishRandomQuestion
  spanishRandomQuestionByUuid(uuid: UUID!): SpanishRandomQuestion
  frenchRandomQuestion(id: Int!): FrenchRandomQuestion
  frenchRandomQuestionByUuid(uuid: UUID!): FrenchRandomQuestion
  italianRandomQuestion(id: Int!): ItalianRandomQuestion
  italianRandomQuestionByUuid(uuid: UUID!): ItalianRandomQuestion
  japaneseRandomQuestion(id: Int!): JapaneseRandomQuestion
  japaneseRandomQuestionByUuid(uuid: UUID!): JapaneseRandomQuestion
  koreanRandomQuestion(id: Int!): KoreanRandomQuestion
  koreanRandomQuestionByUuid(uuid: UUID!): KoreanRandomQuestion
  portugueseRandomQuestion(id: Int!): PortugueseRandomQuestion
  portugueseRandomQuestionByUuid(uuid: UUID!): PortugueseRandomQuestion
  russianRandomQuestion(id: Int!): RussianRandomQuestion
  russianRandomQuestionByUuid(uuid: UUID!): RussianRandomQuestion
  chineseRandomQuestion(id: Int!): ChineseRandomQuestion
  chineseRandomQuestionByUuid(uuid: UUID!): ChineseRandomQuestion
  userDevice(id: Int!): UserDevice
  userDeviceByUuid(uuid: UUID!): UserDevice
  userDeviceByFcmToken(fcmToken: String!): UserDevice
  userLanguage(id: Int!): UserLanguage
  userSession(sid: String!): UserSession
  user(id: Int!): User
  userByUsername(username: String!): User
  userByEmail(email: String!): User
  userByUuid(uuid: UUID!): User
  userByEmailUnsubscribeToken(emailUnsubscribeToken: String!): User
  germanWord(id: Int!): GermanWord
  germanWordByUuid(uuid: UUID!): GermanWord
  englishWord(id: Int!): EnglishWord
  englishWordByUuid(uuid: UUID!): EnglishWord
  spanishWord(id: Int!): SpanishWord
  spanishWordByUuid(uuid: UUID!): SpanishWord
  frenchWord(id: Int!): FrenchWord
  frenchWordByUuid(uuid: UUID!): FrenchWord
  italianWord(id: Int!): ItalianWord
  italianWordByUuid(uuid: UUID!): ItalianWord
  portugueseWord(id: Int!): PortugueseWord
  portugueseWordByUuid(uuid: UUID!): PortugueseWord
  russianWord(id: Int!): RussianWord
  russianWordByUuid(uuid: UUID!): RussianWord
  germanWouldYouRatherQuestion(id: Int!): GermanWouldYouRatherQuestion
  germanWouldYouRatherQuestionByUuid(uuid: UUID!): GermanWouldYouRatherQuestion
  englishWouldYouRatherQuestion(id: Int!): EnglishWouldYouRatherQuestion
  englishWouldYouRatherQuestionByUuid(uuid: UUID!): EnglishWouldYouRatherQuestion
  spanishWouldYouRatherQuestion(id: Int!): SpanishWouldYouRatherQuestion
  spanishWouldYouRatherQuestionByUuid(uuid: UUID!): SpanishWouldYouRatherQuestion
  frenchWouldYouRatherQuestion(id: Int!): FrenchWouldYouRatherQuestion
  frenchWouldYouRatherQuestionByUuid(uuid: UUID!): FrenchWouldYouRatherQuestion
  italianWouldYouRatherQuestion(id: Int!): ItalianWouldYouRatherQuestion
  italianWouldYouRatherQuestionByUuid(uuid: UUID!): ItalianWouldYouRatherQuestion
  japaneseWouldYouRatherQuestion(id: Int!): JapaneseWouldYouRatherQuestion
  japaneseWouldYouRatherQuestionByUuid(uuid: UUID!): JapaneseWouldYouRatherQuestion
  koreanWouldYouRatherQuestion(id: Int!): KoreanWouldYouRatherQuestion
  koreanWouldYouRatherQuestionByUuid(uuid: UUID!): KoreanWouldYouRatherQuestion
  portugueseWouldYouRatherQuestion(id: Int!): PortugueseWouldYouRatherQuestion
  portugueseWouldYouRatherQuestionByUuid(uuid: UUID!): PortugueseWouldYouRatherQuestion
  russianWouldYouRatherQuestion(id: Int!): RussianWouldYouRatherQuestion
  russianWouldYouRatherQuestionByUuid(uuid: UUID!): RussianWouldYouRatherQuestion
  chineseWouldYouRatherQuestion(id: Int!): ChineseWouldYouRatherQuestion
  chineseWouldYouRatherQuestionByUuid(uuid: UUID!): ChineseWouldYouRatherQuestion
  currentUser: User
  currentUserId: Int
  groupIsGlobal(gid: Int!): Boolean
  userIsInGroup(gid: Int!): Boolean

  """Reads and enables pagination through a set of `User`."""
  usersWithoutLearnerGroup(
    lid: Int
    lsklid: Int

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection

  """Reads and enables pagination through a set of `User`."""
  usersWithoutNativeGroup(
    lid: Int

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection

  """Reads a single `GroupUser` using its globally unique `ID`."""
  groupUserByNodeId(
    """The globally unique `ID` to be used in selecting a single `GroupUser`."""
    nodeId: ID!
  ): GroupUser

  """Reads a single `Group` using its globally unique `ID`."""
  groupByNodeId(
    """The globally unique `ID` to be used in selecting a single `Group`."""
    nodeId: ID!
  ): Group

  """
  Reads a single `ChineseGuessCharacterQuestion` using its globally unique `ID`.
  """
  chineseGuessCharacterQuestionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ChineseGuessCharacterQuestion`.
    """
    nodeId: ID!
  ): ChineseGuessCharacterQuestion

  """Reads a single `InviteToken` using its globally unique `ID`."""
  inviteTokenByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `InviteToken`.
    """
    nodeId: ID!
  ): InviteToken

  """Reads a single `LanguageSkillLevel` using its globally unique `ID`."""
  languageSkillLevelByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `LanguageSkillLevel`.
    """
    nodeId: ID!
  ): LanguageSkillLevel

  """Reads a single `Language` using its globally unique `ID`."""
  languageByNodeId(
    """The globally unique `ID` to be used in selecting a single `Language`."""
    nodeId: ID!
  ): Language

  """Reads a single `MessagePreview` using its globally unique `ID`."""
  messagePreviewByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `MessagePreview`.
    """
    nodeId: ID!
  ): MessagePreview

  """Reads a single `Message` using its globally unique `ID`."""
  messageByNodeId(
    """The globally unique `ID` to be used in selecting a single `Message`."""
    nodeId: ID!
  ): Message

  """Reads a single `NotificationChannel` using its globally unique `ID`."""
  notificationChannelByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `NotificationChannel`.
    """
    nodeId: ID!
  ): NotificationChannel

  """Reads a single `Notification` using its globally unique `ID`."""
  notificationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Notification`.
    """
    nodeId: ID!
  ): Notification

  """Reads a single `PostLike` using its globally unique `ID`."""
  postLikeByNodeId(
    """The globally unique `ID` to be used in selecting a single `PostLike`."""
    nodeId: ID!
  ): PostLike

  """Reads a single `PostRecording` using its globally unique `ID`."""
  postRecordingByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `PostRecording`.
    """
    nodeId: ID!
  ): PostRecording

  """Reads a single `Post` using its globally unique `ID`."""
  postByNodeId(
    """The globally unique `ID` to be used in selecting a single `Post`."""
    nodeId: ID!
  ): Post

  """Reads a single `Prompt` using its globally unique `ID`."""
  promptByNodeId(
    """The globally unique `ID` to be used in selecting a single `Prompt`."""
    nodeId: ID!
  ): Prompt

  """Reads a single `GermanRandomQuestion` using its globally unique `ID`."""
  germanRandomQuestionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `GermanRandomQuestion`.
    """
    nodeId: ID!
  ): GermanRandomQuestion

  """Reads a single `EnglishRandomQuestion` using its globally unique `ID`."""
  englishRandomQuestionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `EnglishRandomQuestion`.
    """
    nodeId: ID!
  ): EnglishRandomQuestion

  """Reads a single `SpanishRandomQuestion` using its globally unique `ID`."""
  spanishRandomQuestionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `SpanishRandomQuestion`.
    """
    nodeId: ID!
  ): SpanishRandomQuestion

  """Reads a single `FrenchRandomQuestion` using its globally unique `ID`."""
  frenchRandomQuestionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `FrenchRandomQuestion`.
    """
    nodeId: ID!
  ): FrenchRandomQuestion

  """Reads a single `ItalianRandomQuestion` using its globally unique `ID`."""
  italianRandomQuestionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ItalianRandomQuestion`.
    """
    nodeId: ID!
  ): ItalianRandomQuestion

  """
  Reads a single `JapaneseRandomQuestion` using its globally unique `ID`.
  """
  japaneseRandomQuestionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `JapaneseRandomQuestion`.
    """
    nodeId: ID!
  ): JapaneseRandomQuestion

  """Reads a single `KoreanRandomQuestion` using its globally unique `ID`."""
  koreanRandomQuestionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `KoreanRandomQuestion`.
    """
    nodeId: ID!
  ): KoreanRandomQuestion

  """
  Reads a single `PortugueseRandomQuestion` using its globally unique `ID`.
  """
  portugueseRandomQuestionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `PortugueseRandomQuestion`.
    """
    nodeId: ID!
  ): PortugueseRandomQuestion

  """Reads a single `RussianRandomQuestion` using its globally unique `ID`."""
  russianRandomQuestionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `RussianRandomQuestion`.
    """
    nodeId: ID!
  ): RussianRandomQuestion

  """Reads a single `ChineseRandomQuestion` using its globally unique `ID`."""
  chineseRandomQuestionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ChineseRandomQuestion`.
    """
    nodeId: ID!
  ): ChineseRandomQuestion

  """Reads a single `UserDevice` using its globally unique `ID`."""
  userDeviceByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `UserDevice`.
    """
    nodeId: ID!
  ): UserDevice

  """Reads a single `UserLanguage` using its globally unique `ID`."""
  userLanguageByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `UserLanguage`.
    """
    nodeId: ID!
  ): UserLanguage

  """Reads a single `UserSession` using its globally unique `ID`."""
  userSessionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `UserSession`.
    """
    nodeId: ID!
  ): UserSession

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User

  """Reads a single `GermanWord` using its globally unique `ID`."""
  germanWordByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `GermanWord`.
    """
    nodeId: ID!
  ): GermanWord

  """Reads a single `EnglishWord` using its globally unique `ID`."""
  englishWordByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `EnglishWord`.
    """
    nodeId: ID!
  ): EnglishWord

  """Reads a single `SpanishWord` using its globally unique `ID`."""
  spanishWordByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `SpanishWord`.
    """
    nodeId: ID!
  ): SpanishWord

  """Reads a single `FrenchWord` using its globally unique `ID`."""
  frenchWordByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `FrenchWord`.
    """
    nodeId: ID!
  ): FrenchWord

  """Reads a single `ItalianWord` using its globally unique `ID`."""
  italianWordByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ItalianWord`.
    """
    nodeId: ID!
  ): ItalianWord

  """Reads a single `PortugueseWord` using its globally unique `ID`."""
  portugueseWordByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `PortugueseWord`.
    """
    nodeId: ID!
  ): PortugueseWord

  """Reads a single `RussianWord` using its globally unique `ID`."""
  russianWordByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `RussianWord`.
    """
    nodeId: ID!
  ): RussianWord

  """
  Reads a single `GermanWouldYouRatherQuestion` using its globally unique `ID`.
  """
  germanWouldYouRatherQuestionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `GermanWouldYouRatherQuestion`.
    """
    nodeId: ID!
  ): GermanWouldYouRatherQuestion

  """
  Reads a single `EnglishWouldYouRatherQuestion` using its globally unique `ID`.
  """
  englishWouldYouRatherQuestionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `EnglishWouldYouRatherQuestion`.
    """
    nodeId: ID!
  ): EnglishWouldYouRatherQuestion

  """
  Reads a single `SpanishWouldYouRatherQuestion` using its globally unique `ID`.
  """
  spanishWouldYouRatherQuestionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `SpanishWouldYouRatherQuestion`.
    """
    nodeId: ID!
  ): SpanishWouldYouRatherQuestion

  """
  Reads a single `FrenchWouldYouRatherQuestion` using its globally unique `ID`.
  """
  frenchWouldYouRatherQuestionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `FrenchWouldYouRatherQuestion`.
    """
    nodeId: ID!
  ): FrenchWouldYouRatherQuestion

  """
  Reads a single `ItalianWouldYouRatherQuestion` using its globally unique `ID`.
  """
  italianWouldYouRatherQuestionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ItalianWouldYouRatherQuestion`.
    """
    nodeId: ID!
  ): ItalianWouldYouRatherQuestion

  """
  Reads a single `JapaneseWouldYouRatherQuestion` using its globally unique `ID`.
  """
  japaneseWouldYouRatherQuestionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `JapaneseWouldYouRatherQuestion`.
    """
    nodeId: ID!
  ): JapaneseWouldYouRatherQuestion

  """
  Reads a single `KoreanWouldYouRatherQuestion` using its globally unique `ID`.
  """
  koreanWouldYouRatherQuestionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `KoreanWouldYouRatherQuestion`.
    """
    nodeId: ID!
  ): KoreanWouldYouRatherQuestion

  """
  Reads a single `PortugueseWouldYouRatherQuestion` using its globally unique `ID`.
  """
  portugueseWouldYouRatherQuestionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `PortugueseWouldYouRatherQuestion`.
    """
    nodeId: ID!
  ): PortugueseWouldYouRatherQuestion

  """
  Reads a single `RussianWouldYouRatherQuestion` using its globally unique `ID`.
  """
  russianWouldYouRatherQuestionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `RussianWouldYouRatherQuestion`.
    """
    nodeId: ID!
  ): RussianWouldYouRatherQuestion

  """
  Reads a single `ChineseWouldYouRatherQuestion` using its globally unique `ID`.
  """
  chineseWouldYouRatherQuestionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ChineseWouldYouRatherQuestion`.
    """
    nodeId: ID!
  ): ChineseWouldYouRatherQuestion
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `GroupUser` values."""
type GroupUsersConnection {
  """A list of `GroupUser` objects."""
  nodes: [GroupUser]!

  """
  A list of edges which contains the `GroupUser` and cursor to aid in pagination.
  """
  edges: [GroupUsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GroupUser` you could get from the connection."""
  totalCount: Int!
}

type GroupUser implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  userId: Int!
  groupId: Int!
  userType: UserType!
  joinedOn: Datetime!
  lastActive: Datetime

  """Reads a single `User` that is related to this `GroupUser`."""
  user: User

  """Reads a single `Group` that is related to this `GroupUser`."""
  group: Group
}

enum UserType {
  LEARNER
  NATIVE
  GLOBAL
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  username: String
  email: String!
  unconfirmedEmail: String
  gender: String
  bio: String!
  lastActiveAt: Datetime!
  createdAt: Datetime!
  passwordHash: String
  uuid: UUID!
  avatarUrl: String
  locale: Int
  googleId: String
  signedUpWithTokenId: Int
  emailNotificationsEnabled: Boolean!
  emailUnsubscribeToken: String
  displayName: String

  """Reads a single `Language` that is related to this `User`."""
  languageByLocale: Language

  """Reads a single `InviteToken` that is related to this `User`."""
  signedUpWithToken: InviteToken

  """Reads and enables pagination through a set of `UserLanguage`."""
  userLanguages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserLanguage`."""
    orderBy: [UserLanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserLanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserLanguageFilter
  ): UserLanguagesConnection!

  """Reads and enables pagination through a set of `GroupUser`."""
  groupUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GroupUser`."""
    orderBy: [GroupUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupUserFilter
  ): GroupUsersConnection!

  """Reads and enables pagination through a set of `Message`."""
  messagesBySenderId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): MessagesConnection!

  """Reads and enables pagination through a set of `Message`."""
  messagesByRecipientId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): MessagesConnection!

  """Reads and enables pagination through a set of `InviteToken`."""
  inviteTokens(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `InviteToken`."""
    orderBy: [InviteTokensOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InviteTokenCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InviteTokenFilter
  ): InviteTokensConnection!

  """Reads and enables pagination through a set of `UserDevice`."""
  userDevices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserDevice`."""
    orderBy: [UserDevicesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserDeviceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserDeviceFilter
  ): UserDevicesConnection!

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByRecipientId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!

  """Reads and enables pagination through a set of `Post`."""
  authoredPosts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter
  ): PostsConnection!

  """Reads and enables pagination through a set of `PostLike`."""
  postLikes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PostLike`."""
    orderBy: [PostLikesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostLikeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostLikeFilter
  ): PostLikesConnection!

  """Reads and enables pagination through a set of `PostRecording`."""
  postRecordings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PostRecording`."""
    orderBy: [PostRecordingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostRecordingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostRecordingFilter
  ): PostRecordingsConnection!

  """Reads and enables pagination through a set of `Language`."""
  languagesByUserLanguageUserIdAndLanguageId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter
  ): UserLanguagesByUserLanguageUserIdAndLanguageIdManyToManyConnection!

  """Reads and enables pagination through a set of `LanguageSkillLevel`."""
  languageSkillLevelsByUserLanguageUserIdAndLanguageSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LanguageSkillLevel`."""
    orderBy: [LanguageSkillLevelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageSkillLevelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageSkillLevelFilter
  ): UserLanguageSkillLevelsByUserLanguageUserIdAndLanguageSkillLevelIdManyToManyConnection!

  """Reads and enables pagination through a set of `Group`."""
  groupsByGroupUserUserIdAndGroupId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter
  ): UserGroupsByGroupUserUserIdAndGroupIdManyToManyConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByMessageSenderIdAndRecipientId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UserUsersByMessageSenderIdAndRecipientIdManyToManyConnection!

  """Reads and enables pagination through a set of `Group`."""
  groupsByMessageSenderIdAndRecipientGroupId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter
  ): UserGroupsByMessageSenderIdAndRecipientGroupIdManyToManyConnection!

  """Reads and enables pagination through a set of `Message`."""
  messagesByMessageSenderIdAndParentMessageId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): UserMessagesByMessageSenderIdAndParentMessageIdManyToManyConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByMessageRecipientIdAndSenderId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UserUsersByMessageRecipientIdAndSenderIdManyToManyConnection!

  """Reads and enables pagination through a set of `Group`."""
  groupsByMessageRecipientIdAndRecipientGroupId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter
  ): UserGroupsByMessageRecipientIdAndRecipientGroupIdManyToManyConnection!

  """Reads and enables pagination through a set of `Message`."""
  messagesByMessageRecipientIdAndParentMessageId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): UserMessagesByMessageRecipientIdAndParentMessageIdManyToManyConnection!

  """Reads and enables pagination through a set of `NotificationChannel`."""
  notificationChannelsByNotificationRecipientIdAndChannelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NotificationChannel`."""
    orderBy: [NotificationChannelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationChannelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationChannelFilter
  ): UserNotificationChannelsByNotificationRecipientIdAndChannelIdManyToManyConnection!

  """Reads and enables pagination through a set of `Group`."""
  groupsByNotificationRecipientIdAndRecipientGroupId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter
  ): UserGroupsByNotificationRecipientIdAndRecipientGroupIdManyToManyConnection!

  """Reads and enables pagination through a set of `Post`."""
  postsByPostAuthorIdAndParentPostId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter
  ): UserPostsByPostAuthorIdAndParentPostIdManyToManyConnection!

  """Reads and enables pagination through a set of `Language`."""
  languagesByPostAuthorIdAndLanguageId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter
  ): UserLanguagesByPostAuthorIdAndLanguageIdManyToManyConnection!

  """Reads and enables pagination through a set of `Prompt`."""
  promptsByPostAuthorIdAndPromptId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Prompt`."""
    orderBy: [PromptsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PromptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PromptFilter
  ): UserPromptsByPostAuthorIdAndPromptIdManyToManyConnection!

  """Reads and enables pagination through a set of `Post`."""
  postsByPostLikeUserIdAndPostId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter
  ): UserPostsByPostLikeUserIdAndPostIdManyToManyConnection!

  """Reads and enables pagination through a set of `Post`."""
  postsByPostRecordingUserIdAndPostId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter
  ): UserPostsByPostRecordingUserIdAndPostIdManyToManyConnection!
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

type Language implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!

  """ISO 3166-1 alpha-2 standardized code"""
  alpha2: String!
  englishName: String!
  createdAt: Datetime!

  """Reads and enables pagination through a set of `User`."""
  usersByLocale(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection!

  """Reads and enables pagination through a set of `UserLanguage`."""
  userLanguages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserLanguage`."""
    orderBy: [UserLanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserLanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserLanguageFilter
  ): UserLanguagesConnection!

  """Reads and enables pagination through a set of `Group`."""
  groups(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter
  ): GroupsConnection!

  """Reads and enables pagination through a set of `Post`."""
  posts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter
  ): PostsConnection!

  """Reads and enables pagination through a set of `Prompt`."""
  prompts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Prompt`."""
    orderBy: [PromptsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PromptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PromptFilter
  ): PromptsConnection!

  """Reads and enables pagination through a set of `InviteToken`."""
  inviteTokensByUserLocaleAndSignedUpWithTokenId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `InviteToken`."""
    orderBy: [InviteTokensOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InviteTokenCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InviteTokenFilter
  ): LanguageInviteTokensByUserLocaleAndSignedUpWithTokenIdManyToManyConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByUserLanguageLanguageIdAndUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): LanguageUsersByUserLanguageLanguageIdAndUserIdManyToManyConnection!

  """Reads and enables pagination through a set of `LanguageSkillLevel`."""
  languageSkillLevelsByUserLanguageLanguageIdAndLanguageSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LanguageSkillLevel`."""
    orderBy: [LanguageSkillLevelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageSkillLevelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageSkillLevelFilter
  ): LanguageLanguageSkillLevelsByUserLanguageLanguageIdAndLanguageSkillLevelIdManyToManyConnection!

  """Reads and enables pagination through a set of `LanguageSkillLevel`."""
  languageSkillLevelsByGroupLanguageIdAndLanguageSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LanguageSkillLevel`."""
    orderBy: [LanguageSkillLevelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageSkillLevelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageSkillLevelFilter
  ): LanguageLanguageSkillLevelsByGroupLanguageIdAndLanguageSkillLevelIdManyToManyConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByPostLanguageIdAndAuthorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): LanguageUsersByPostLanguageIdAndAuthorIdManyToManyConnection!

  """Reads and enables pagination through a set of `Post`."""
  postsByPostLanguageIdAndParentPostId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter
  ): LanguagePostsByPostLanguageIdAndParentPostIdManyToManyConnection!

  """Reads and enables pagination through a set of `Prompt`."""
  promptsByPostLanguageIdAndPromptId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Prompt`."""
    orderBy: [PromptsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PromptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PromptFilter
  ): LanguagePromptsByPostLanguageIdAndPromptIdManyToManyConnection!

  """Reads and enables pagination through a set of `LanguageSkillLevel`."""
  languageSkillLevelsByPromptLanguageIdAndRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LanguageSkillLevel`."""
    orderBy: [LanguageSkillLevelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageSkillLevelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageSkillLevelFilter
  ): LanguageLanguageSkillLevelsByPromptLanguageIdAndRecommendedSkillLevelIdManyToManyConnection!
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USERNAME_ASC
  USERNAME_DESC
  EMAIL_ASC
  EMAIL_DESC
  UNCONFIRMED_EMAIL_ASC
  UNCONFIRMED_EMAIL_DESC
  GENDER_ASC
  GENDER_DESC
  BIO_ASC
  BIO_DESC
  LAST_ACTIVE_AT_ASC
  LAST_ACTIVE_AT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PASSWORD_HASH_ASC
  PASSWORD_HASH_DESC
  UUID_ASC
  UUID_DESC
  AVATAR_URL_ASC
  AVATAR_URL_DESC
  LOCALE_ASC
  LOCALE_DESC
  GOOGLE_ID_ASC
  GOOGLE_ID_DESC
  SIGNED_UP_WITH_TOKEN_ID_ASC
  SIGNED_UP_WITH_TOKEN_ID_DESC
  EMAIL_NOTIFICATIONS_ENABLED_ASC
  EMAIL_NOTIFICATIONS_ENABLED_DESC
  EMAIL_UNSUBSCRIBE_TOKEN_ASC
  EMAIL_UNSUBSCRIBE_TOKEN_DESC
  DISPLAY_NAME_ASC
  DISPLAY_NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `username` field."""
  username: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `unconfirmedEmail` field."""
  unconfirmedEmail: String

  """Checks for equality with the object’s `gender` field."""
  gender: String

  """Checks for equality with the object’s `bio` field."""
  bio: String

  """Checks for equality with the object’s `lastActiveAt` field."""
  lastActiveAt: Datetime

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `passwordHash` field."""
  passwordHash: String

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `avatarUrl` field."""
  avatarUrl: String

  """Checks for equality with the object’s `locale` field."""
  locale: Int

  """Checks for equality with the object’s `googleId` field."""
  googleId: String

  """Checks for equality with the object’s `signedUpWithTokenId` field."""
  signedUpWithTokenId: Int

  """
  Checks for equality with the object’s `emailNotificationsEnabled` field.
  """
  emailNotificationsEnabled: Boolean

  """Checks for equality with the object’s `emailUnsubscribeToken` field."""
  emailUnsubscribeToken: String

  """Checks for equality with the object’s `displayName` field."""
  displayName: String
}

"""
A filter to be used against `User` object types. All fields are combined with a logical ‘and.’
"""
input UserFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `username` field."""
  username: StringFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `unconfirmedEmail` field."""
  unconfirmedEmail: StringFilter

  """Filter by the object’s `gender` field."""
  gender: StringFilter

  """Filter by the object’s `bio` field."""
  bio: StringFilter

  """Filter by the object’s `lastActiveAt` field."""
  lastActiveAt: DatetimeFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `passwordHash` field."""
  passwordHash: StringFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `avatarUrl` field."""
  avatarUrl: StringFilter

  """Filter by the object’s `locale` field."""
  locale: IntFilter

  """Filter by the object’s `googleId` field."""
  googleId: StringFilter

  """Filter by the object’s `signedUpWithTokenId` field."""
  signedUpWithTokenId: IntFilter

  """Filter by the object’s `emailNotificationsEnabled` field."""
  emailNotificationsEnabled: BooleanFilter

  """Filter by the object’s `emailUnsubscribeToken` field."""
  emailUnsubscribeToken: StringFilter

  """Filter by the object’s `displayName` field."""
  displayName: StringFilter

  """Checks for all expressions in this list."""
  and: [UserFilter!]

  """Checks for any expressions in this list."""
  or: [UserFilter!]

  """Negates the expression."""
  not: UserFilter
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String
}

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """Not included in the specified list."""
  notIn: [Datetime!]

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime
}

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Included in the specified list."""
  in: [UUID!]

  """Not included in the specified list."""
  notIn: [UUID!]

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """Not included in the specified list."""
  notIn: [Boolean!]

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean
}

"""A connection to a list of `UserLanguage` values."""
type UserLanguagesConnection {
  """A list of `UserLanguage` objects."""
  nodes: [UserLanguage]!

  """
  A list of edges which contains the `UserLanguage` and cursor to aid in pagination.
  """
  edges: [UserLanguagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserLanguage` you could get from the connection."""
  totalCount: Int!
}

type UserLanguage implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  userId: Int!
  languageId: Int!
  languageSkillLevelId: Int
  native: Boolean!
  createdAt: Datetime!

  """Reads a single `User` that is related to this `UserLanguage`."""
  user: User

  """Reads a single `Language` that is related to this `UserLanguage`."""
  language: Language

  """
  Reads a single `LanguageSkillLevel` that is related to this `UserLanguage`.
  """
  languageSkillLevel: LanguageSkillLevel
}

type LanguageSkillLevel implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String

  """Reads and enables pagination through a set of `UserLanguage`."""
  userLanguages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserLanguage`."""
    orderBy: [UserLanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserLanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserLanguageFilter
  ): UserLanguagesConnection!

  """Reads and enables pagination through a set of `Group`."""
  groups(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter
  ): GroupsConnection!

  """Reads and enables pagination through a set of `EnglishWord`."""
  englishWordsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EnglishWord`."""
    orderBy: [EnglishWordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EnglishWordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EnglishWordFilter
  ): EnglishWordsConnection!

  """Reads and enables pagination through a set of `GermanWord`."""
  germanWordsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GermanWord`."""
    orderBy: [GermanWordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GermanWordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GermanWordFilter
  ): GermanWordsConnection!

  """Reads and enables pagination through a set of `EnglishRandomQuestion`."""
  englishRandomQuestionsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EnglishRandomQuestion`."""
    orderBy: [EnglishRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EnglishRandomQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EnglishRandomQuestionFilter
  ): EnglishRandomQuestionsConnection!

  """Reads and enables pagination through a set of `GermanRandomQuestion`."""
  germanRandomQuestionsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GermanRandomQuestion`."""
    orderBy: [GermanRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GermanRandomQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GermanRandomQuestionFilter
  ): GermanRandomQuestionsConnection!

  """
  Reads and enables pagination through a set of `EnglishWouldYouRatherQuestion`.
  """
  englishWouldYouRatherQuestionsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EnglishWouldYouRatherQuestion`."""
    orderBy: [EnglishWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EnglishWouldYouRatherQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EnglishWouldYouRatherQuestionFilter
  ): EnglishWouldYouRatherQuestionsConnection!

  """
  Reads and enables pagination through a set of `GermanWouldYouRatherQuestion`.
  """
  germanWouldYouRatherQuestionsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GermanWouldYouRatherQuestion`."""
    orderBy: [GermanWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GermanWouldYouRatherQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GermanWouldYouRatherQuestionFilter
  ): GermanWouldYouRatherQuestionsConnection!

  """Reads and enables pagination through a set of `ChineseRandomQuestion`."""
  chineseRandomQuestionsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChineseRandomQuestion`."""
    orderBy: [ChineseRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChineseRandomQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChineseRandomQuestionFilter
  ): ChineseRandomQuestionsConnection!

  """
  Reads and enables pagination through a set of `ChineseWouldYouRatherQuestion`.
  """
  chineseWouldYouRatherQuestionsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChineseWouldYouRatherQuestion`."""
    orderBy: [ChineseWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChineseWouldYouRatherQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChineseWouldYouRatherQuestionFilter
  ): ChineseWouldYouRatherQuestionsConnection!

  """
  Reads and enables pagination through a set of `ChineseGuessCharacterQuestion`.
  """
  chineseGuessCharacterQuestionsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChineseGuessCharacterQuestion`."""
    orderBy: [ChineseGuessCharacterQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChineseGuessCharacterQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChineseGuessCharacterQuestionFilter
  ): ChineseGuessCharacterQuestionsConnection!

  """Reads and enables pagination through a set of `Prompt`."""
  promptsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Prompt`."""
    orderBy: [PromptsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PromptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PromptFilter
  ): PromptsConnection!

  """Reads and enables pagination through a set of `ItalianRandomQuestion`."""
  italianRandomQuestionsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ItalianRandomQuestion`."""
    orderBy: [ItalianRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItalianRandomQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ItalianRandomQuestionFilter
  ): ItalianRandomQuestionsConnection!

  """
  Reads and enables pagination through a set of `ItalianWouldYouRatherQuestion`.
  """
  italianWouldYouRatherQuestionsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ItalianWouldYouRatherQuestion`."""
    orderBy: [ItalianWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItalianWouldYouRatherQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ItalianWouldYouRatherQuestionFilter
  ): ItalianWouldYouRatherQuestionsConnection!

  """Reads and enables pagination through a set of `ItalianWord`."""
  italianWordsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ItalianWord`."""
    orderBy: [ItalianWordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItalianWordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ItalianWordFilter
  ): ItalianWordsConnection!

  """
  Reads and enables pagination through a set of `PortugueseRandomQuestion`.
  """
  portugueseRandomQuestionsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PortugueseRandomQuestion`."""
    orderBy: [PortugueseRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PortugueseRandomQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PortugueseRandomQuestionFilter
  ): PortugueseRandomQuestionsConnection!

  """
  Reads and enables pagination through a set of `PortugueseWouldYouRatherQuestion`.
  """
  portugueseWouldYouRatherQuestionsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PortugueseWouldYouRatherQuestion`."""
    orderBy: [PortugueseWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PortugueseWouldYouRatherQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PortugueseWouldYouRatherQuestionFilter
  ): PortugueseWouldYouRatherQuestionsConnection!

  """Reads and enables pagination through a set of `PortugueseWord`."""
  portugueseWordsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PortugueseWord`."""
    orderBy: [PortugueseWordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PortugueseWordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PortugueseWordFilter
  ): PortugueseWordsConnection!

  """Reads and enables pagination through a set of `SpanishRandomQuestion`."""
  spanishRandomQuestionsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SpanishRandomQuestion`."""
    orderBy: [SpanishRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpanishRandomQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpanishRandomQuestionFilter
  ): SpanishRandomQuestionsConnection!

  """
  Reads and enables pagination through a set of `SpanishWouldYouRatherQuestion`.
  """
  spanishWouldYouRatherQuestionsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SpanishWouldYouRatherQuestion`."""
    orderBy: [SpanishWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpanishWouldYouRatherQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpanishWouldYouRatherQuestionFilter
  ): SpanishWouldYouRatherQuestionsConnection!

  """Reads and enables pagination through a set of `SpanishWord`."""
  spanishWordsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SpanishWord`."""
    orderBy: [SpanishWordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpanishWordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SpanishWordFilter
  ): SpanishWordsConnection!

  """Reads and enables pagination through a set of `RussianRandomQuestion`."""
  russianRandomQuestionsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RussianRandomQuestion`."""
    orderBy: [RussianRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RussianRandomQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RussianRandomQuestionFilter
  ): RussianRandomQuestionsConnection!

  """
  Reads and enables pagination through a set of `RussianWouldYouRatherQuestion`.
  """
  russianWouldYouRatherQuestionsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RussianWouldYouRatherQuestion`."""
    orderBy: [RussianWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RussianWouldYouRatherQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RussianWouldYouRatherQuestionFilter
  ): RussianWouldYouRatherQuestionsConnection!

  """Reads and enables pagination through a set of `RussianWord`."""
  russianWordsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RussianWord`."""
    orderBy: [RussianWordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RussianWordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RussianWordFilter
  ): RussianWordsConnection!

  """Reads and enables pagination through a set of `FrenchRandomQuestion`."""
  frenchRandomQuestionsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FrenchRandomQuestion`."""
    orderBy: [FrenchRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FrenchRandomQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FrenchRandomQuestionFilter
  ): FrenchRandomQuestionsConnection!

  """
  Reads and enables pagination through a set of `FrenchWouldYouRatherQuestion`.
  """
  frenchWouldYouRatherQuestionsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FrenchWouldYouRatherQuestion`."""
    orderBy: [FrenchWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FrenchWouldYouRatherQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FrenchWouldYouRatherQuestionFilter
  ): FrenchWouldYouRatherQuestionsConnection!

  """Reads and enables pagination through a set of `FrenchWord`."""
  frenchWordsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FrenchWord`."""
    orderBy: [FrenchWordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FrenchWordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FrenchWordFilter
  ): FrenchWordsConnection!

  """Reads and enables pagination through a set of `KoreanRandomQuestion`."""
  koreanRandomQuestionsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `KoreanRandomQuestion`."""
    orderBy: [KoreanRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: KoreanRandomQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: KoreanRandomQuestionFilter
  ): KoreanRandomQuestionsConnection!

  """
  Reads and enables pagination through a set of `KoreanWouldYouRatherQuestion`.
  """
  koreanWouldYouRatherQuestionsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `KoreanWouldYouRatherQuestion`."""
    orderBy: [KoreanWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: KoreanWouldYouRatherQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: KoreanWouldYouRatherQuestionFilter
  ): KoreanWouldYouRatherQuestionsConnection!

  """
  Reads and enables pagination through a set of `JapaneseRandomQuestion`.
  """
  japaneseRandomQuestionsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `JapaneseRandomQuestion`."""
    orderBy: [JapaneseRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JapaneseRandomQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: JapaneseRandomQuestionFilter
  ): JapaneseRandomQuestionsConnection!

  """
  Reads and enables pagination through a set of `JapaneseWouldYouRatherQuestion`.
  """
  japaneseWouldYouRatherQuestionsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `JapaneseWouldYouRatherQuestion`."""
    orderBy: [JapaneseWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JapaneseWouldYouRatherQuestionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: JapaneseWouldYouRatherQuestionFilter
  ): JapaneseWouldYouRatherQuestionsConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByUserLanguageLanguageSkillLevelIdAndUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): LanguageSkillLevelUsersByUserLanguageLanguageSkillLevelIdAndUserIdManyToManyConnection!

  """Reads and enables pagination through a set of `Language`."""
  languagesByUserLanguageLanguageSkillLevelIdAndLanguageId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter
  ): LanguageSkillLevelLanguagesByUserLanguageLanguageSkillLevelIdAndLanguageIdManyToManyConnection!

  """Reads and enables pagination through a set of `Language`."""
  languagesByGroupLanguageSkillLevelIdAndLanguageId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter
  ): LanguageSkillLevelLanguagesByGroupLanguageSkillLevelIdAndLanguageIdManyToManyConnection!

  """Reads and enables pagination through a set of `Language`."""
  languagesByPromptRecommendedSkillLevelIdAndLanguageId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter
  ): LanguageSkillLevelLanguagesByPromptRecommendedSkillLevelIdAndLanguageIdManyToManyConnection!
}

"""Methods to use when ordering `UserLanguage`."""
enum UserLanguagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  LANGUAGE_ID_ASC
  LANGUAGE_ID_DESC
  LANGUAGE_SKILL_LEVEL_ID_ASC
  LANGUAGE_SKILL_LEVEL_ID_DESC
  NATIVE_ASC
  NATIVE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `UserLanguage` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UserLanguageCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `languageId` field."""
  languageId: Int

  """Checks for equality with the object’s `languageSkillLevelId` field."""
  languageSkillLevelId: Int

  """Checks for equality with the object’s `native` field."""
  native: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `UserLanguage` object types. All fields are combined with a logical ‘and.’
"""
input UserLanguageFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `languageId` field."""
  languageId: IntFilter

  """Filter by the object’s `languageSkillLevelId` field."""
  languageSkillLevelId: IntFilter

  """Filter by the object’s `native` field."""
  native: BooleanFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [UserLanguageFilter!]

  """Checks for any expressions in this list."""
  or: [UserLanguageFilter!]

  """Negates the expression."""
  not: UserLanguageFilter
}

"""A connection to a list of `Group` values."""
type GroupsConnection {
  """A list of `Group` objects."""
  nodes: [Group]!

  """
  A list of edges which contains the `Group` and cursor to aid in pagination.
  """
  edges: [GroupsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Group` you could get from the connection."""
  totalCount: Int!
}

type Group implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  groupName: String
  global: Boolean!
  languageId: Int!
  languageSkillLevelId: Int
  createdAt: Datetime!
  uuid: UUID!

  """Reads a single `Language` that is related to this `Group`."""
  language: Language

  """Reads a single `LanguageSkillLevel` that is related to this `Group`."""
  languageSkillLevel: LanguageSkillLevel

  """Reads and enables pagination through a set of `GroupUser`."""
  groupUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GroupUser`."""
    orderBy: [GroupUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupUserFilter
  ): GroupUsersConnection!

  """Reads and enables pagination through a set of `Message`."""
  messagesByRecipientGroupId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): MessagesConnection!

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByRecipientGroupId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByGroupUserGroupIdAndUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): GroupUsersByGroupUserGroupIdAndUserIdManyToManyConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByMessageRecipientGroupIdAndSenderId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): GroupUsersByMessageRecipientGroupIdAndSenderIdManyToManyConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByMessageRecipientGroupIdAndRecipientId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): GroupUsersByMessageRecipientGroupIdAndRecipientIdManyToManyConnection!

  """Reads and enables pagination through a set of `Message`."""
  messagesByMessageRecipientGroupIdAndParentMessageId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): GroupMessagesByMessageRecipientGroupIdAndParentMessageIdManyToManyConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByNotificationRecipientGroupIdAndRecipientId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): GroupUsersByNotificationRecipientGroupIdAndRecipientIdManyToManyConnection!

  """Reads and enables pagination through a set of `NotificationChannel`."""
  notificationChannelsByNotificationRecipientGroupIdAndChannelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NotificationChannel`."""
    orderBy: [NotificationChannelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationChannelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationChannelFilter
  ): GroupNotificationChannelsByNotificationRecipientGroupIdAndChannelIdManyToManyConnection!
}

"""Methods to use when ordering `GroupUser`."""
enum GroupUsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
  USER_TYPE_ASC
  USER_TYPE_DESC
  JOINED_ON_ASC
  JOINED_ON_DESC
  LAST_ACTIVE_ASC
  LAST_ACTIVE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `GroupUser` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GroupUserCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `groupId` field."""
  groupId: Int

  """Checks for equality with the object’s `userType` field."""
  userType: UserType

  """Checks for equality with the object’s `joinedOn` field."""
  joinedOn: Datetime

  """Checks for equality with the object’s `lastActive` field."""
  lastActive: Datetime
}

"""
A filter to be used against `GroupUser` object types. All fields are combined with a logical ‘and.’
"""
input GroupUserFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `groupId` field."""
  groupId: IntFilter

  """Filter by the object’s `userType` field."""
  userType: UserTypeFilter

  """Filter by the object’s `joinedOn` field."""
  joinedOn: DatetimeFilter

  """Filter by the object’s `lastActive` field."""
  lastActive: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [GroupUserFilter!]

  """Checks for any expressions in this list."""
  or: [GroupUserFilter!]

  """Negates the expression."""
  not: GroupUserFilter
}

"""
A filter to be used against UserType fields. All fields are combined with a logical ‘and.’
"""
input UserTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: UserType

  """Not equal to the specified value."""
  notEqualTo: UserType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UserType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UserType

  """Included in the specified list."""
  in: [UserType!]

  """Not included in the specified list."""
  notIn: [UserType!]

  """Less than the specified value."""
  lessThan: UserType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UserType

  """Greater than the specified value."""
  greaterThan: UserType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UserType
}

"""A connection to a list of `Message` values."""
type MessagesConnection {
  """A list of `Message` objects."""
  nodes: [Message]!

  """
  A list of edges which contains the `Message` and cursor to aid in pagination.
  """
  edges: [MessagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Message` you could get from the connection."""
  totalCount: Int!
}

type Message implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  senderId: Int
  recipientId: Int
  recipientGroupId: Int
  body: String!
  parentMessageId: Int
  createdAt: Datetime!

  """Reads a single `User` that is related to this `Message`."""
  sender: User

  """Reads a single `User` that is related to this `Message`."""
  recipient: User

  """Reads a single `Group` that is related to this `Message`."""
  recipientGroup: Group

  """Reads a single `Message` that is related to this `Message`."""
  parentMessage: Message

  """Reads and enables pagination through a set of `Message`."""
  messagesByParentMessageId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): MessagesConnection!

  """Reads and enables pagination through a set of `MessagePreview`."""
  messagePreviews(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MessagePreview`."""
    orderBy: [MessagePreviewsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessagePreviewCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessagePreviewFilter
  ): MessagePreviewsConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByMessageParentMessageIdAndSenderId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): MessageUsersByMessageParentMessageIdAndSenderIdManyToManyConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByMessageParentMessageIdAndRecipientId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): MessageUsersByMessageParentMessageIdAndRecipientIdManyToManyConnection!

  """Reads and enables pagination through a set of `Group`."""
  groupsByMessageParentMessageIdAndRecipientGroupId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter
  ): MessageGroupsByMessageParentMessageIdAndRecipientGroupIdManyToManyConnection!
}

"""Methods to use when ordering `Message`."""
enum MessagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  SENDER_ID_ASC
  SENDER_ID_DESC
  RECIPIENT_ID_ASC
  RECIPIENT_ID_DESC
  RECIPIENT_GROUP_ID_ASC
  RECIPIENT_GROUP_ID_DESC
  BODY_ASC
  BODY_DESC
  PARENT_MESSAGE_ID_ASC
  PARENT_MESSAGE_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Message` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MessageCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `senderId` field."""
  senderId: Int

  """Checks for equality with the object’s `recipientId` field."""
  recipientId: Int

  """Checks for equality with the object’s `recipientGroupId` field."""
  recipientGroupId: Int

  """Checks for equality with the object’s `body` field."""
  body: String

  """Checks for equality with the object’s `parentMessageId` field."""
  parentMessageId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `Message` object types. All fields are combined with a logical ‘and.’
"""
input MessageFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `senderId` field."""
  senderId: IntFilter

  """Filter by the object’s `recipientId` field."""
  recipientId: IntFilter

  """Filter by the object’s `recipientGroupId` field."""
  recipientGroupId: IntFilter

  """Filter by the object’s `body` field."""
  body: StringFilter

  """Filter by the object’s `parentMessageId` field."""
  parentMessageId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [MessageFilter!]

  """Checks for any expressions in this list."""
  or: [MessageFilter!]

  """Negates the expression."""
  not: MessageFilter
}

"""A connection to a list of `MessagePreview` values."""
type MessagePreviewsConnection {
  """A list of `MessagePreview` objects."""
  nodes: [MessagePreview]!

  """
  A list of edges which contains the `MessagePreview` and cursor to aid in pagination.
  """
  edges: [MessagePreviewsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MessagePreview` you could get from the connection."""
  totalCount: Int!
}

type MessagePreview implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!

  """Basename without extension"""
  filename: String!

  """Extension without leading dot"""
  extension: String
  messageId: Int!
  createdAt: Datetime!

  """Reads a single `Message` that is related to this `MessagePreview`."""
  message: Message
}

"""A `MessagePreview` edge in the connection."""
type MessagePreviewsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MessagePreview` at the end of the edge."""
  node: MessagePreview
}

"""Methods to use when ordering `MessagePreview`."""
enum MessagePreviewsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  FILENAME_ASC
  FILENAME_DESC
  EXTENSION_ASC
  EXTENSION_DESC
  MESSAGE_ID_ASC
  MESSAGE_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `MessagePreview` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MessagePreviewCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `filename` field."""
  filename: String

  """Checks for equality with the object’s `extension` field."""
  extension: String

  """Checks for equality with the object’s `messageId` field."""
  messageId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `MessagePreview` object types. All fields are combined with a logical ‘and.’
"""
input MessagePreviewFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `filename` field."""
  filename: StringFilter

  """Filter by the object’s `extension` field."""
  extension: StringFilter

  """Filter by the object’s `messageId` field."""
  messageId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [MessagePreviewFilter!]

  """Checks for any expressions in this list."""
  or: [MessagePreviewFilter!]

  """Negates the expression."""
  not: MessagePreviewFilter
}

"""A connection to a list of `User` values, with data from `Message`."""
type MessageUsersByMessageParentMessageIdAndSenderIdManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User`, info from the `Message`, and the cursor to aid in pagination.
  """
  edges: [MessageUsersByMessageParentMessageIdAndSenderIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Message`."""
type MessageUsersByMessageParentMessageIdAndSenderIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User

  """Reads and enables pagination through a set of `Message`."""
  messagesBySenderId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): MessagesConnection!
}

"""A connection to a list of `User` values, with data from `Message`."""
type MessageUsersByMessageParentMessageIdAndRecipientIdManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User`, info from the `Message`, and the cursor to aid in pagination.
  """
  edges: [MessageUsersByMessageParentMessageIdAndRecipientIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Message`."""
type MessageUsersByMessageParentMessageIdAndRecipientIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User

  """Reads and enables pagination through a set of `Message`."""
  messagesByRecipientId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): MessagesConnection!
}

"""A connection to a list of `Group` values, with data from `Message`."""
type MessageGroupsByMessageParentMessageIdAndRecipientGroupIdManyToManyConnection {
  """A list of `Group` objects."""
  nodes: [Group]!

  """
  A list of edges which contains the `Group`, info from the `Message`, and the cursor to aid in pagination.
  """
  edges: [MessageGroupsByMessageParentMessageIdAndRecipientGroupIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Group` you could get from the connection."""
  totalCount: Int!
}

"""A `Group` edge in the connection, with data from `Message`."""
type MessageGroupsByMessageParentMessageIdAndRecipientGroupIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Group` at the end of the edge."""
  node: Group

  """Reads and enables pagination through a set of `Message`."""
  messagesByRecipientGroupId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): MessagesConnection!
}

"""Methods to use when ordering `Group`."""
enum GroupsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  GROUP_NAME_ASC
  GROUP_NAME_DESC
  GLOBAL_ASC
  GLOBAL_DESC
  LANGUAGE_ID_ASC
  LANGUAGE_ID_DESC
  LANGUAGE_SKILL_LEVEL_ID_ASC
  LANGUAGE_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UUID_ASC
  UUID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Group` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GroupCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `groupName` field."""
  groupName: String

  """Checks for equality with the object’s `global` field."""
  global: Boolean

  """Checks for equality with the object’s `languageId` field."""
  languageId: Int

  """Checks for equality with the object’s `languageSkillLevelId` field."""
  languageSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID
}

"""
A filter to be used against `Group` object types. All fields are combined with a logical ‘and.’
"""
input GroupFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `groupName` field."""
  groupName: StringFilter

  """Filter by the object’s `global` field."""
  global: BooleanFilter

  """Filter by the object’s `languageId` field."""
  languageId: IntFilter

  """Filter by the object’s `languageSkillLevelId` field."""
  languageSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Checks for all expressions in this list."""
  and: [GroupFilter!]

  """Checks for any expressions in this list."""
  or: [GroupFilter!]

  """Negates the expression."""
  not: GroupFilter
}

"""A `Message` edge in the connection."""
type MessagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Message` at the end of the edge."""
  node: Message
}

"""A connection to a list of `Notification` values."""
type NotificationsConnection {
  """A list of `Notification` objects."""
  nodes: [Notification]!

  """
  A list of edges which contains the `Notification` and cursor to aid in pagination.
  """
  edges: [NotificationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Notification` you could get from the connection."""
  totalCount: Int!
}

type Notification implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  recipientId: Int
  channelId: Int!
  params: JSON
  sentAt: Datetime
  withheldUntil: Datetime
  expiresAt: Datetime
  readAt: Datetime
  createdAt: Datetime!
  recipientGroupId: Int

  """Reads a single `User` that is related to this `Notification`."""
  recipient: User

  """
  Reads a single `NotificationChannel` that is related to this `Notification`.
  """
  channel: NotificationChannel

  """Reads a single `Group` that is related to this `Notification`."""
  recipientGroup: Group
}

"""
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type NotificationChannel implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  name: String
  createdAt: Datetime!

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByChannelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByNotificationChannelIdAndRecipientId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): NotificationChannelUsersByNotificationChannelIdAndRecipientIdManyToManyConnection!

  """Reads and enables pagination through a set of `Group`."""
  groupsByNotificationChannelIdAndRecipientGroupId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter
  ): NotificationChannelGroupsByNotificationChannelIdAndRecipientGroupIdManyToManyConnection!
}

"""Methods to use when ordering `Notification`."""
enum NotificationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  RECIPIENT_ID_ASC
  RECIPIENT_ID_DESC
  CHANNEL_ID_ASC
  CHANNEL_ID_DESC
  PARAMS_ASC
  PARAMS_DESC
  SENT_AT_ASC
  SENT_AT_DESC
  WITHHELD_UNTIL_ASC
  WITHHELD_UNTIL_DESC
  EXPIRES_AT_ASC
  EXPIRES_AT_DESC
  READ_AT_ASC
  READ_AT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  RECIPIENT_GROUP_ID_ASC
  RECIPIENT_GROUP_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Notification` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input NotificationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `recipientId` field."""
  recipientId: Int

  """Checks for equality with the object’s `channelId` field."""
  channelId: Int

  """Checks for equality with the object’s `params` field."""
  params: JSON

  """Checks for equality with the object’s `sentAt` field."""
  sentAt: Datetime

  """Checks for equality with the object’s `withheldUntil` field."""
  withheldUntil: Datetime

  """Checks for equality with the object’s `expiresAt` field."""
  expiresAt: Datetime

  """Checks for equality with the object’s `readAt` field."""
  readAt: Datetime

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `recipientGroupId` field."""
  recipientGroupId: Int
}

"""
A filter to be used against `Notification` object types. All fields are combined with a logical ‘and.’
"""
input NotificationFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `recipientId` field."""
  recipientId: IntFilter

  """Filter by the object’s `channelId` field."""
  channelId: IntFilter

  """Filter by the object’s `sentAt` field."""
  sentAt: DatetimeFilter

  """Filter by the object’s `withheldUntil` field."""
  withheldUntil: DatetimeFilter

  """Filter by the object’s `expiresAt` field."""
  expiresAt: DatetimeFilter

  """Filter by the object’s `readAt` field."""
  readAt: DatetimeFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `recipientGroupId` field."""
  recipientGroupId: IntFilter

  """Checks for all expressions in this list."""
  and: [NotificationFilter!]

  """Checks for any expressions in this list."""
  or: [NotificationFilter!]

  """Negates the expression."""
  not: NotificationFilter
}

"""
A connection to a list of `User` values, with data from `Notification`.
"""
type NotificationChannelUsersByNotificationChannelIdAndRecipientIdManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User`, info from the `Notification`, and the cursor to aid in pagination.
  """
  edges: [NotificationChannelUsersByNotificationChannelIdAndRecipientIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Notification`."""
type NotificationChannelUsersByNotificationChannelIdAndRecipientIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByRecipientId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!
}

"""
A connection to a list of `Group` values, with data from `Notification`.
"""
type NotificationChannelGroupsByNotificationChannelIdAndRecipientGroupIdManyToManyConnection {
  """A list of `Group` objects."""
  nodes: [Group]!

  """
  A list of edges which contains the `Group`, info from the `Notification`, and the cursor to aid in pagination.
  """
  edges: [NotificationChannelGroupsByNotificationChannelIdAndRecipientGroupIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Group` you could get from the connection."""
  totalCount: Int!
}

"""A `Group` edge in the connection, with data from `Notification`."""
type NotificationChannelGroupsByNotificationChannelIdAndRecipientGroupIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Group` at the end of the edge."""
  node: Group

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByRecipientGroupId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!
}

"""A `Notification` edge in the connection."""
type NotificationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Notification` at the end of the edge."""
  node: Notification
}

"""A connection to a list of `User` values, with data from `GroupUser`."""
type GroupUsersByGroupUserGroupIdAndUserIdManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User`, info from the `GroupUser`, and the cursor to aid in pagination.
  """
  edges: [GroupUsersByGroupUserGroupIdAndUserIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `GroupUser`."""
type GroupUsersByGroupUserGroupIdAndUserIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User

  """Reads and enables pagination through a set of `GroupUser`."""
  groupUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GroupUser`."""
    orderBy: [GroupUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupUserFilter
  ): GroupUsersConnection!
}

"""A connection to a list of `User` values, with data from `Message`."""
type GroupUsersByMessageRecipientGroupIdAndSenderIdManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User`, info from the `Message`, and the cursor to aid in pagination.
  """
  edges: [GroupUsersByMessageRecipientGroupIdAndSenderIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Message`."""
type GroupUsersByMessageRecipientGroupIdAndSenderIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User

  """Reads and enables pagination through a set of `Message`."""
  messagesBySenderId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): MessagesConnection!
}

"""A connection to a list of `User` values, with data from `Message`."""
type GroupUsersByMessageRecipientGroupIdAndRecipientIdManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User`, info from the `Message`, and the cursor to aid in pagination.
  """
  edges: [GroupUsersByMessageRecipientGroupIdAndRecipientIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Message`."""
type GroupUsersByMessageRecipientGroupIdAndRecipientIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User

  """Reads and enables pagination through a set of `Message`."""
  messagesByRecipientId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): MessagesConnection!
}

"""A connection to a list of `Message` values, with data from `Message`."""
type GroupMessagesByMessageRecipientGroupIdAndParentMessageIdManyToManyConnection {
  """A list of `Message` objects."""
  nodes: [Message]!

  """
  A list of edges which contains the `Message`, info from the `Message`, and the cursor to aid in pagination.
  """
  edges: [GroupMessagesByMessageRecipientGroupIdAndParentMessageIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Message` you could get from the connection."""
  totalCount: Int!
}

"""A `Message` edge in the connection, with data from `Message`."""
type GroupMessagesByMessageRecipientGroupIdAndParentMessageIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Message` at the end of the edge."""
  node: Message

  """Reads and enables pagination through a set of `Message`."""
  messagesByParentMessageId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): MessagesConnection!
}

"""
A connection to a list of `User` values, with data from `Notification`.
"""
type GroupUsersByNotificationRecipientGroupIdAndRecipientIdManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User`, info from the `Notification`, and the cursor to aid in pagination.
  """
  edges: [GroupUsersByNotificationRecipientGroupIdAndRecipientIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Notification`."""
type GroupUsersByNotificationRecipientGroupIdAndRecipientIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByRecipientId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!
}

"""
A connection to a list of `NotificationChannel` values, with data from `Notification`.
"""
type GroupNotificationChannelsByNotificationRecipientGroupIdAndChannelIdManyToManyConnection {
  """A list of `NotificationChannel` objects."""
  nodes: [NotificationChannel]!

  """
  A list of edges which contains the `NotificationChannel`, info from the `Notification`, and the cursor to aid in pagination.
  """
  edges: [GroupNotificationChannelsByNotificationRecipientGroupIdAndChannelIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `NotificationChannel` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `NotificationChannel` edge in the connection, with data from `Notification`.
"""
type GroupNotificationChannelsByNotificationRecipientGroupIdAndChannelIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NotificationChannel` at the end of the edge."""
  node: NotificationChannel

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByChannelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!
}

"""Methods to use when ordering `NotificationChannel`."""
enum NotificationChannelsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `NotificationChannel` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input NotificationChannelCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `NotificationChannel` object types. All fields are combined with a logical ‘and.’
"""
input NotificationChannelFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [NotificationChannelFilter!]

  """Checks for any expressions in this list."""
  or: [NotificationChannelFilter!]

  """Negates the expression."""
  not: NotificationChannelFilter
}

"""A `Group` edge in the connection."""
type GroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Group` at the end of the edge."""
  node: Group
}

"""A connection to a list of `EnglishWord` values."""
type EnglishWordsConnection {
  """A list of `EnglishWord` objects."""
  nodes: [EnglishWord]!

  """
  A list of edges which contains the `EnglishWord` and cursor to aid in pagination.
  """
  edges: [EnglishWordsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EnglishWord` you could get from the connection."""
  totalCount: Int!
}

type EnglishWord implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  word: String!

  """Ranges from 0 to 1 (higher is more frequent)"""
  frequency: Float!
  length: Int
  recommendedSkillLevelId: Int
  createdAt: Datetime!

  """
  Reads a single `LanguageSkillLevel` that is related to this `EnglishWord`.
  """
  recommendedSkillLevel: LanguageSkillLevel
}

"""A `EnglishWord` edge in the connection."""
type EnglishWordsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EnglishWord` at the end of the edge."""
  node: EnglishWord
}

"""Methods to use when ordering `EnglishWord`."""
enum EnglishWordsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  WORD_ASC
  WORD_DESC
  FREQUENCY_ASC
  FREQUENCY_DESC
  LENGTH_ASC
  LENGTH_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `EnglishWord` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input EnglishWordCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `word` field."""
  word: String

  """Checks for equality with the object’s `frequency` field."""
  frequency: Float

  """Checks for equality with the object’s `length` field."""
  length: Int

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `EnglishWord` object types. All fields are combined with a logical ‘and.’
"""
input EnglishWordFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `word` field."""
  word: StringFilter

  """Filter by the object’s `frequency` field."""
  frequency: FloatFilter

  """Filter by the object’s `length` field."""
  length: IntFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [EnglishWordFilter!]

  """Checks for any expressions in this list."""
  or: [EnglishWordFilter!]

  """Negates the expression."""
  not: EnglishWordFilter
}

"""
A filter to be used against Float fields. All fields are combined with a logical ‘and.’
"""
input FloatFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Float

  """Not equal to the specified value."""
  notEqualTo: Float

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Float

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Float

  """Included in the specified list."""
  in: [Float!]

  """Not included in the specified list."""
  notIn: [Float!]

  """Less than the specified value."""
  lessThan: Float

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Float

  """Greater than the specified value."""
  greaterThan: Float

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Float
}

"""A connection to a list of `GermanWord` values."""
type GermanWordsConnection {
  """A list of `GermanWord` objects."""
  nodes: [GermanWord]!

  """
  A list of edges which contains the `GermanWord` and cursor to aid in pagination.
  """
  edges: [GermanWordsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GermanWord` you could get from the connection."""
  totalCount: Int!
}

type GermanWord implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  word: String!

  """Ranges from 0 to 1 (higher is more frequent)"""
  frequency: Float!
  length: Int
  recommendedSkillLevelId: Int
  createdAt: Datetime!

  """
  Reads a single `LanguageSkillLevel` that is related to this `GermanWord`.
  """
  recommendedSkillLevel: LanguageSkillLevel
}

"""A `GermanWord` edge in the connection."""
type GermanWordsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GermanWord` at the end of the edge."""
  node: GermanWord
}

"""Methods to use when ordering `GermanWord`."""
enum GermanWordsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  WORD_ASC
  WORD_DESC
  FREQUENCY_ASC
  FREQUENCY_DESC
  LENGTH_ASC
  LENGTH_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `GermanWord` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GermanWordCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `word` field."""
  word: String

  """Checks for equality with the object’s `frequency` field."""
  frequency: Float

  """Checks for equality with the object’s `length` field."""
  length: Int

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `GermanWord` object types. All fields are combined with a logical ‘and.’
"""
input GermanWordFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `word` field."""
  word: StringFilter

  """Filter by the object’s `frequency` field."""
  frequency: FloatFilter

  """Filter by the object’s `length` field."""
  length: IntFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [GermanWordFilter!]

  """Checks for any expressions in this list."""
  or: [GermanWordFilter!]

  """Negates the expression."""
  not: GermanWordFilter
}

"""A connection to a list of `EnglishRandomQuestion` values."""
type EnglishRandomQuestionsConnection {
  """A list of `EnglishRandomQuestion` objects."""
  nodes: [EnglishRandomQuestion]!

  """
  A list of edges which contains the `EnglishRandomQuestion` and cursor to aid in pagination.
  """
  edges: [EnglishRandomQuestionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EnglishRandomQuestion` you could get from the connection.
  """
  totalCount: Int!
}

type EnglishRandomQuestion implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  question: String!
  recommendedSkillLevelId: Int
  createdAt: Datetime!

  """
  Reads a single `LanguageSkillLevel` that is related to this `EnglishRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel
}

"""A `EnglishRandomQuestion` edge in the connection."""
type EnglishRandomQuestionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EnglishRandomQuestion` at the end of the edge."""
  node: EnglishRandomQuestion
}

"""Methods to use when ordering `EnglishRandomQuestion`."""
enum EnglishRandomQuestionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  QUESTION_ASC
  QUESTION_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `EnglishRandomQuestion` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input EnglishRandomQuestionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `question` field."""
  question: String

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `EnglishRandomQuestion` object types. All fields are combined with a logical ‘and.’
"""
input EnglishRandomQuestionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `question` field."""
  question: StringFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [EnglishRandomQuestionFilter!]

  """Checks for any expressions in this list."""
  or: [EnglishRandomQuestionFilter!]

  """Negates the expression."""
  not: EnglishRandomQuestionFilter
}

"""A connection to a list of `GermanRandomQuestion` values."""
type GermanRandomQuestionsConnection {
  """A list of `GermanRandomQuestion` objects."""
  nodes: [GermanRandomQuestion]!

  """
  A list of edges which contains the `GermanRandomQuestion` and cursor to aid in pagination.
  """
  edges: [GermanRandomQuestionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `GermanRandomQuestion` you could get from the connection.
  """
  totalCount: Int!
}

type GermanRandomQuestion implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  question: String!
  recommendedSkillLevelId: Int
  createdAt: Datetime!

  """
  Reads a single `LanguageSkillLevel` that is related to this `GermanRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel
}

"""A `GermanRandomQuestion` edge in the connection."""
type GermanRandomQuestionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GermanRandomQuestion` at the end of the edge."""
  node: GermanRandomQuestion
}

"""Methods to use when ordering `GermanRandomQuestion`."""
enum GermanRandomQuestionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  QUESTION_ASC
  QUESTION_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `GermanRandomQuestion` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input GermanRandomQuestionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `question` field."""
  question: String

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `GermanRandomQuestion` object types. All fields are combined with a logical ‘and.’
"""
input GermanRandomQuestionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `question` field."""
  question: StringFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [GermanRandomQuestionFilter!]

  """Checks for any expressions in this list."""
  or: [GermanRandomQuestionFilter!]

  """Negates the expression."""
  not: GermanRandomQuestionFilter
}

"""A connection to a list of `EnglishWouldYouRatherQuestion` values."""
type EnglishWouldYouRatherQuestionsConnection {
  """A list of `EnglishWouldYouRatherQuestion` objects."""
  nodes: [EnglishWouldYouRatherQuestion]!

  """
  A list of edges which contains the `EnglishWouldYouRatherQuestion` and cursor to aid in pagination.
  """
  edges: [EnglishWouldYouRatherQuestionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EnglishWouldYouRatherQuestion` you could get from the connection.
  """
  totalCount: Int!
}

type EnglishWouldYouRatherQuestion implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  question: String!
  answers: [String]!
  recommendedSkillLevelId: Int
  createdAt: Datetime!

  """
  Reads a single `LanguageSkillLevel` that is related to this `EnglishWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel
}

"""A `EnglishWouldYouRatherQuestion` edge in the connection."""
type EnglishWouldYouRatherQuestionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EnglishWouldYouRatherQuestion` at the end of the edge."""
  node: EnglishWouldYouRatherQuestion
}

"""Methods to use when ordering `EnglishWouldYouRatherQuestion`."""
enum EnglishWouldYouRatherQuestionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  QUESTION_ASC
  QUESTION_DESC
  ANSWERS_ASC
  ANSWERS_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `EnglishWouldYouRatherQuestion` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input EnglishWouldYouRatherQuestionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `question` field."""
  question: String

  """Checks for equality with the object’s `answers` field."""
  answers: [String]

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `EnglishWouldYouRatherQuestion` object types. All fields are combined with a logical ‘and.’
"""
input EnglishWouldYouRatherQuestionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `question` field."""
  question: StringFilter

  """Filter by the object’s `answers` field."""
  answers: StringListFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [EnglishWouldYouRatherQuestionFilter!]

  """Checks for any expressions in this list."""
  or: [EnglishWouldYouRatherQuestionFilter!]

  """Negates the expression."""
  not: EnglishWouldYouRatherQuestionFilter
}

"""
A filter to be used against String List fields. All fields are combined with a logical ‘and.’
"""
input StringListFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: [String]

  """Not equal to the specified value."""
  notEqualTo: [String]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [String]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [String]

  """Less than the specified value."""
  lessThan: [String]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [String]

  """Greater than the specified value."""
  greaterThan: [String]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [String]

  """Contains the specified list of values."""
  contains: [String]

  """Contained by the specified list of values."""
  containedBy: [String]

  """Overlaps the specified list of values."""
  overlaps: [String]

  """Any array item is equal to the specified value."""
  anyEqualTo: String

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: String

  """Any array item is less than the specified value."""
  anyLessThan: String

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: String

  """Any array item is greater than the specified value."""
  anyGreaterThan: String

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: String
}

"""A connection to a list of `GermanWouldYouRatherQuestion` values."""
type GermanWouldYouRatherQuestionsConnection {
  """A list of `GermanWouldYouRatherQuestion` objects."""
  nodes: [GermanWouldYouRatherQuestion]!

  """
  A list of edges which contains the `GermanWouldYouRatherQuestion` and cursor to aid in pagination.
  """
  edges: [GermanWouldYouRatherQuestionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `GermanWouldYouRatherQuestion` you could get from the connection.
  """
  totalCount: Int!
}

type GermanWouldYouRatherQuestion implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  question: String!
  answers: [String]!
  recommendedSkillLevelId: Int
  createdAt: Datetime!

  """
  Reads a single `LanguageSkillLevel` that is related to this `GermanWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel
}

"""A `GermanWouldYouRatherQuestion` edge in the connection."""
type GermanWouldYouRatherQuestionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GermanWouldYouRatherQuestion` at the end of the edge."""
  node: GermanWouldYouRatherQuestion
}

"""Methods to use when ordering `GermanWouldYouRatherQuestion`."""
enum GermanWouldYouRatherQuestionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  QUESTION_ASC
  QUESTION_DESC
  ANSWERS_ASC
  ANSWERS_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `GermanWouldYouRatherQuestion` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input GermanWouldYouRatherQuestionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `question` field."""
  question: String

  """Checks for equality with the object’s `answers` field."""
  answers: [String]

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `GermanWouldYouRatherQuestion` object types. All fields are combined with a logical ‘and.’
"""
input GermanWouldYouRatherQuestionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `question` field."""
  question: StringFilter

  """Filter by the object’s `answers` field."""
  answers: StringListFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [GermanWouldYouRatherQuestionFilter!]

  """Checks for any expressions in this list."""
  or: [GermanWouldYouRatherQuestionFilter!]

  """Negates the expression."""
  not: GermanWouldYouRatherQuestionFilter
}

"""A connection to a list of `ChineseRandomQuestion` values."""
type ChineseRandomQuestionsConnection {
  """A list of `ChineseRandomQuestion` objects."""
  nodes: [ChineseRandomQuestion]!

  """
  A list of edges which contains the `ChineseRandomQuestion` and cursor to aid in pagination.
  """
  edges: [ChineseRandomQuestionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ChineseRandomQuestion` you could get from the connection.
  """
  totalCount: Int!
}

type ChineseRandomQuestion implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  question: String!
  recommendedSkillLevelId: Int
  createdAt: Datetime!

  """
  Reads a single `LanguageSkillLevel` that is related to this `ChineseRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel
}

"""A `ChineseRandomQuestion` edge in the connection."""
type ChineseRandomQuestionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChineseRandomQuestion` at the end of the edge."""
  node: ChineseRandomQuestion
}

"""Methods to use when ordering `ChineseRandomQuestion`."""
enum ChineseRandomQuestionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  QUESTION_ASC
  QUESTION_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ChineseRandomQuestion` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ChineseRandomQuestionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `question` field."""
  question: String

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `ChineseRandomQuestion` object types. All fields are combined with a logical ‘and.’
"""
input ChineseRandomQuestionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `question` field."""
  question: StringFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [ChineseRandomQuestionFilter!]

  """Checks for any expressions in this list."""
  or: [ChineseRandomQuestionFilter!]

  """Negates the expression."""
  not: ChineseRandomQuestionFilter
}

"""A connection to a list of `ChineseWouldYouRatherQuestion` values."""
type ChineseWouldYouRatherQuestionsConnection {
  """A list of `ChineseWouldYouRatherQuestion` objects."""
  nodes: [ChineseWouldYouRatherQuestion]!

  """
  A list of edges which contains the `ChineseWouldYouRatherQuestion` and cursor to aid in pagination.
  """
  edges: [ChineseWouldYouRatherQuestionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ChineseWouldYouRatherQuestion` you could get from the connection.
  """
  totalCount: Int!
}

type ChineseWouldYouRatherQuestion implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  question: String!
  answers: [String]!
  recommendedSkillLevelId: Int
  createdAt: Datetime!

  """
  Reads a single `LanguageSkillLevel` that is related to this `ChineseWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel
}

"""A `ChineseWouldYouRatherQuestion` edge in the connection."""
type ChineseWouldYouRatherQuestionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChineseWouldYouRatherQuestion` at the end of the edge."""
  node: ChineseWouldYouRatherQuestion
}

"""Methods to use when ordering `ChineseWouldYouRatherQuestion`."""
enum ChineseWouldYouRatherQuestionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  QUESTION_ASC
  QUESTION_DESC
  ANSWERS_ASC
  ANSWERS_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ChineseWouldYouRatherQuestion` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ChineseWouldYouRatherQuestionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `question` field."""
  question: String

  """Checks for equality with the object’s `answers` field."""
  answers: [String]

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `ChineseWouldYouRatherQuestion` object types. All fields are combined with a logical ‘and.’
"""
input ChineseWouldYouRatherQuestionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `question` field."""
  question: StringFilter

  """Filter by the object’s `answers` field."""
  answers: StringListFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [ChineseWouldYouRatherQuestionFilter!]

  """Checks for any expressions in this list."""
  or: [ChineseWouldYouRatherQuestionFilter!]

  """Negates the expression."""
  not: ChineseWouldYouRatherQuestionFilter
}

"""A connection to a list of `ChineseGuessCharacterQuestion` values."""
type ChineseGuessCharacterQuestionsConnection {
  """A list of `ChineseGuessCharacterQuestion` objects."""
  nodes: [ChineseGuessCharacterQuestion]!

  """
  A list of edges which contains the `ChineseGuessCharacterQuestion` and cursor to aid in pagination.
  """
  edges: [ChineseGuessCharacterQuestionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ChineseGuessCharacterQuestion` you could get from the connection.
  """
  totalCount: Int!
}

type ChineseGuessCharacterQuestion implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  character: String!
  hint: String!
  recommendedSkillLevelId: Int
  createdAt: Datetime!

  """
  Reads a single `LanguageSkillLevel` that is related to this `ChineseGuessCharacterQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel
}

"""A `ChineseGuessCharacterQuestion` edge in the connection."""
type ChineseGuessCharacterQuestionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChineseGuessCharacterQuestion` at the end of the edge."""
  node: ChineseGuessCharacterQuestion
}

"""Methods to use when ordering `ChineseGuessCharacterQuestion`."""
enum ChineseGuessCharacterQuestionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  CHARACTER_ASC
  CHARACTER_DESC
  HINT_ASC
  HINT_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ChineseGuessCharacterQuestion` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ChineseGuessCharacterQuestionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `character` field."""
  character: String

  """Checks for equality with the object’s `hint` field."""
  hint: String

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `ChineseGuessCharacterQuestion` object types. All fields are combined with a logical ‘and.’
"""
input ChineseGuessCharacterQuestionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `character` field."""
  character: StringFilter

  """Filter by the object’s `hint` field."""
  hint: StringFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [ChineseGuessCharacterQuestionFilter!]

  """Checks for any expressions in this list."""
  or: [ChineseGuessCharacterQuestionFilter!]

  """Negates the expression."""
  not: ChineseGuessCharacterQuestionFilter
}

"""A connection to a list of `Prompt` values."""
type PromptsConnection {
  """A list of `Prompt` objects."""
  nodes: [Prompt]!

  """
  A list of edges which contains the `Prompt` and cursor to aid in pagination.
  """
  edges: [PromptsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Prompt` you could get from the connection."""
  totalCount: Int!
}

type Prompt implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  languageId: Int!
  recommendedSkillLevelId: Int
  type: PromptType!
  contentEn: String
  contentDe: String
  contentZh: String
  createdAt: Datetime!
  contentEs: String
  contentFr: String
  contentPt: String
  contentRu: String
  contentJa: String
  contentKo: String
  contentIt: String

  """Reads a single `Language` that is related to this `Prompt`."""
  language: Language

  """Reads a single `LanguageSkillLevel` that is related to this `Prompt`."""
  recommendedSkillLevel: LanguageSkillLevel

  """Reads and enables pagination through a set of `Post`."""
  posts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter
  ): PostsConnection!
  content: String

  """Reads and enables pagination through a set of `User`."""
  usersByPostPromptIdAndAuthorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): PromptUsersByPostPromptIdAndAuthorIdManyToManyConnection!

  """Reads and enables pagination through a set of `Post`."""
  postsByPostPromptIdAndParentPostId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter
  ): PromptPostsByPostPromptIdAndParentPostIdManyToManyConnection!

  """Reads and enables pagination through a set of `Language`."""
  languagesByPostPromptIdAndLanguageId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter
  ): PromptLanguagesByPostPromptIdAndLanguageIdManyToManyConnection!
}

enum PromptType {
  QUESTION
  WORD
}

"""A connection to a list of `Post` values."""
type PostsConnection {
  """A list of `Post` objects."""
  nodes: [Post]!

  """
  A list of edges which contains the `Post` and cursor to aid in pagination.
  """
  edges: [PostsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Post` you could get from the connection."""
  totalCount: Int!
}

type Post implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  authorId: Int
  body: String!
  parentPostId: Int
  createdAt: Datetime!
  languageId: Int!
  promptId: Int

  """Reads a single `User` that is related to this `Post`."""
  author: User

  """Reads a single `Post` that is related to this `Post`."""
  parentPost: Post

  """Reads a single `Language` that is related to this `Post`."""
  language: Language

  """Reads a single `Prompt` that is related to this `Post`."""
  prompt: Prompt

  """Reads and enables pagination through a set of `Post`."""
  replies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter
  ): PostsConnection!

  """Reads and enables pagination through a set of `PostLike`."""
  likes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PostLike`."""
    orderBy: [PostLikesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostLikeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostLikeFilter
  ): PostLikesConnection!

  """Reads and enables pagination through a set of `PostRecording`."""
  recordings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PostRecording`."""
    orderBy: [PostRecordingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostRecordingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostRecordingFilter
  ): PostRecordingsConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByPostParentPostIdAndAuthorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): PostUsersByPostParentPostIdAndAuthorIdManyToManyConnection!

  """Reads and enables pagination through a set of `Language`."""
  languagesByPostParentPostIdAndLanguageId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter
  ): PostLanguagesByPostParentPostIdAndLanguageIdManyToManyConnection!

  """Reads and enables pagination through a set of `Prompt`."""
  promptsByPostParentPostIdAndPromptId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Prompt`."""
    orderBy: [PromptsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PromptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PromptFilter
  ): PostPromptsByPostParentPostIdAndPromptIdManyToManyConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByPostLikePostIdAndUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): PostUsersByPostLikePostIdAndUserIdManyToManyConnection!

  """Reads and enables pagination through a set of `User`."""
  usersByPostRecordingPostIdAndUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): PostUsersByPostRecordingPostIdAndUserIdManyToManyConnection!
}

"""Methods to use when ordering `Post`."""
enum PostsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  BODY_ASC
  BODY_DESC
  PARENT_POST_ID_ASC
  PARENT_POST_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  LANGUAGE_ID_ASC
  LANGUAGE_ID_DESC
  PROMPT_ID_ASC
  PROMPT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Post` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PostCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `authorId` field."""
  authorId: Int

  """Checks for equality with the object’s `body` field."""
  body: String

  """Checks for equality with the object’s `parentPostId` field."""
  parentPostId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `languageId` field."""
  languageId: Int

  """Checks for equality with the object’s `promptId` field."""
  promptId: Int
}

"""
A filter to be used against `Post` object types. All fields are combined with a logical ‘and.’
"""
input PostFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `authorId` field."""
  authorId: IntFilter

  """Filter by the object’s `body` field."""
  body: StringFilter

  """Filter by the object’s `parentPostId` field."""
  parentPostId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `languageId` field."""
  languageId: IntFilter

  """Filter by the object’s `promptId` field."""
  promptId: IntFilter

  """Checks for all expressions in this list."""
  and: [PostFilter!]

  """Checks for any expressions in this list."""
  or: [PostFilter!]

  """Negates the expression."""
  not: PostFilter
}

"""A connection to a list of `PostLike` values."""
type PostLikesConnection {
  """A list of `PostLike` objects."""
  nodes: [PostLike]!

  """
  A list of edges which contains the `PostLike` and cursor to aid in pagination.
  """
  edges: [PostLikesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PostLike` you could get from the connection."""
  totalCount: Int!
}

type PostLike implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  userId: Int!
  postId: Int!
  createdAt: Datetime!

  """Reads a single `User` that is related to this `PostLike`."""
  user: User

  """Reads a single `Post` that is related to this `PostLike`."""
  post: Post
}

"""A `PostLike` edge in the connection."""
type PostLikesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PostLike` at the end of the edge."""
  node: PostLike
}

"""Methods to use when ordering `PostLike`."""
enum PostLikesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  POST_ID_ASC
  POST_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `PostLike` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PostLikeCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `postId` field."""
  postId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `PostLike` object types. All fields are combined with a logical ‘and.’
"""
input PostLikeFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `postId` field."""
  postId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [PostLikeFilter!]

  """Checks for any expressions in this list."""
  or: [PostLikeFilter!]

  """Negates the expression."""
  not: PostLikeFilter
}

"""A connection to a list of `PostRecording` values."""
type PostRecordingsConnection {
  """A list of `PostRecording` objects."""
  nodes: [PostRecording]!

  """
  A list of edges which contains the `PostRecording` and cursor to aid in pagination.
  """
  edges: [PostRecordingsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PostRecording` you could get from the connection."""
  totalCount: Int!
}

type PostRecording implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  userId: Int!
  postId: Int!

  """Basename without extension"""
  filename: String!

  """Extension without leading dot"""
  extension: String
  createdAt: Datetime!

  """Reads a single `User` that is related to this `PostRecording`."""
  user: User

  """Reads a single `Post` that is related to this `PostRecording`."""
  post: Post
}

"""A `PostRecording` edge in the connection."""
type PostRecordingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PostRecording` at the end of the edge."""
  node: PostRecording
}

"""Methods to use when ordering `PostRecording`."""
enum PostRecordingsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  USER_ID_ASC
  USER_ID_DESC
  POST_ID_ASC
  POST_ID_DESC
  FILENAME_ASC
  FILENAME_DESC
  EXTENSION_ASC
  EXTENSION_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `PostRecording` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PostRecordingCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `postId` field."""
  postId: Int

  """Checks for equality with the object’s `filename` field."""
  filename: String

  """Checks for equality with the object’s `extension` field."""
  extension: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `PostRecording` object types. All fields are combined with a logical ‘and.’
"""
input PostRecordingFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `postId` field."""
  postId: IntFilter

  """Filter by the object’s `filename` field."""
  filename: StringFilter

  """Filter by the object’s `extension` field."""
  extension: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [PostRecordingFilter!]

  """Checks for any expressions in this list."""
  or: [PostRecordingFilter!]

  """Negates the expression."""
  not: PostRecordingFilter
}

"""A connection to a list of `User` values, with data from `Post`."""
type PostUsersByPostParentPostIdAndAuthorIdManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User`, info from the `Post`, and the cursor to aid in pagination.
  """
  edges: [PostUsersByPostParentPostIdAndAuthorIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Post`."""
type PostUsersByPostParentPostIdAndAuthorIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User

  """Reads and enables pagination through a set of `Post`."""
  authoredPosts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter
  ): PostsConnection!
}

"""A connection to a list of `Language` values, with data from `Post`."""
type PostLanguagesByPostParentPostIdAndLanguageIdManyToManyConnection {
  """A list of `Language` objects."""
  nodes: [Language]!

  """
  A list of edges which contains the `Language`, info from the `Post`, and the cursor to aid in pagination.
  """
  edges: [PostLanguagesByPostParentPostIdAndLanguageIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Language` you could get from the connection."""
  totalCount: Int!
}

"""A `Language` edge in the connection, with data from `Post`."""
type PostLanguagesByPostParentPostIdAndLanguageIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Language` at the end of the edge."""
  node: Language

  """Reads and enables pagination through a set of `Post`."""
  posts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter
  ): PostsConnection!
}

"""Methods to use when ordering `Language`."""
enum LanguagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ALPHA2_ASC
  ALPHA2_DESC
  ENGLISH_NAME_ASC
  ENGLISH_NAME_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Language` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input LanguageCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `alpha2` field."""
  alpha2: String

  """Checks for equality with the object’s `englishName` field."""
  englishName: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `Language` object types. All fields are combined with a logical ‘and.’
"""
input LanguageFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `alpha2` field."""
  alpha2: StringFilter

  """Filter by the object’s `englishName` field."""
  englishName: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [LanguageFilter!]

  """Checks for any expressions in this list."""
  or: [LanguageFilter!]

  """Negates the expression."""
  not: LanguageFilter
}

"""A connection to a list of `Prompt` values, with data from `Post`."""
type PostPromptsByPostParentPostIdAndPromptIdManyToManyConnection {
  """A list of `Prompt` objects."""
  nodes: [Prompt]!

  """
  A list of edges which contains the `Prompt`, info from the `Post`, and the cursor to aid in pagination.
  """
  edges: [PostPromptsByPostParentPostIdAndPromptIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Prompt` you could get from the connection."""
  totalCount: Int!
}

"""A `Prompt` edge in the connection, with data from `Post`."""
type PostPromptsByPostParentPostIdAndPromptIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Prompt` at the end of the edge."""
  node: Prompt

  """Reads and enables pagination through a set of `Post`."""
  posts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter
  ): PostsConnection!
}

"""Methods to use when ordering `Prompt`."""
enum PromptsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  LANGUAGE_ID_ASC
  LANGUAGE_ID_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  TYPE_ASC
  TYPE_DESC
  CONTENT_EN_ASC
  CONTENT_EN_DESC
  CONTENT_DE_ASC
  CONTENT_DE_DESC
  CONTENT_ZH_ASC
  CONTENT_ZH_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CONTENT_ES_ASC
  CONTENT_ES_DESC
  CONTENT_FR_ASC
  CONTENT_FR_DESC
  CONTENT_PT_ASC
  CONTENT_PT_DESC
  CONTENT_RU_ASC
  CONTENT_RU_DESC
  CONTENT_JA_ASC
  CONTENT_JA_DESC
  CONTENT_KO_ASC
  CONTENT_KO_DESC
  CONTENT_IT_ASC
  CONTENT_IT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Prompt` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PromptCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `languageId` field."""
  languageId: Int

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `type` field."""
  type: PromptType

  """Checks for equality with the object’s `contentEn` field."""
  contentEn: String

  """Checks for equality with the object’s `contentDe` field."""
  contentDe: String

  """Checks for equality with the object’s `contentZh` field."""
  contentZh: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `contentEs` field."""
  contentEs: String

  """Checks for equality with the object’s `contentFr` field."""
  contentFr: String

  """Checks for equality with the object’s `contentPt` field."""
  contentPt: String

  """Checks for equality with the object’s `contentRu` field."""
  contentRu: String

  """Checks for equality with the object’s `contentJa` field."""
  contentJa: String

  """Checks for equality with the object’s `contentKo` field."""
  contentKo: String

  """Checks for equality with the object’s `contentIt` field."""
  contentIt: String
}

"""
A filter to be used against `Prompt` object types. All fields are combined with a logical ‘and.’
"""
input PromptFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `languageId` field."""
  languageId: IntFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `type` field."""
  type: PromptTypeFilter

  """Filter by the object’s `contentEn` field."""
  contentEn: StringFilter

  """Filter by the object’s `contentDe` field."""
  contentDe: StringFilter

  """Filter by the object’s `contentZh` field."""
  contentZh: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `contentEs` field."""
  contentEs: StringFilter

  """Filter by the object’s `contentFr` field."""
  contentFr: StringFilter

  """Filter by the object’s `contentPt` field."""
  contentPt: StringFilter

  """Filter by the object’s `contentRu` field."""
  contentRu: StringFilter

  """Filter by the object’s `contentJa` field."""
  contentJa: StringFilter

  """Filter by the object’s `contentKo` field."""
  contentKo: StringFilter

  """Filter by the object’s `contentIt` field."""
  contentIt: StringFilter

  """Filter by the object’s `content` field."""
  content: StringFilter

  """Checks for all expressions in this list."""
  and: [PromptFilter!]

  """Checks for any expressions in this list."""
  or: [PromptFilter!]

  """Negates the expression."""
  not: PromptFilter
}

"""
A filter to be used against PromptType fields. All fields are combined with a logical ‘and.’
"""
input PromptTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: PromptType

  """Not equal to the specified value."""
  notEqualTo: PromptType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: PromptType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: PromptType

  """Included in the specified list."""
  in: [PromptType!]

  """Not included in the specified list."""
  notIn: [PromptType!]

  """Less than the specified value."""
  lessThan: PromptType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: PromptType

  """Greater than the specified value."""
  greaterThan: PromptType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: PromptType
}

"""A connection to a list of `User` values, with data from `PostLike`."""
type PostUsersByPostLikePostIdAndUserIdManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User`, info from the `PostLike`, and the cursor to aid in pagination.
  """
  edges: [PostUsersByPostLikePostIdAndUserIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `PostLike`."""
type PostUsersByPostLikePostIdAndUserIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User

  """Reads and enables pagination through a set of `PostLike`."""
  postLikes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PostLike`."""
    orderBy: [PostLikesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostLikeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostLikeFilter
  ): PostLikesConnection!
}

"""
A connection to a list of `User` values, with data from `PostRecording`.
"""
type PostUsersByPostRecordingPostIdAndUserIdManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User`, info from the `PostRecording`, and the cursor to aid in pagination.
  """
  edges: [PostUsersByPostRecordingPostIdAndUserIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `PostRecording`."""
type PostUsersByPostRecordingPostIdAndUserIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User

  """Reads and enables pagination through a set of `PostRecording`."""
  postRecordings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PostRecording`."""
    orderBy: [PostRecordingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostRecordingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostRecordingFilter
  ): PostRecordingsConnection!
}

"""A `Post` edge in the connection."""
type PostsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Post` at the end of the edge."""
  node: Post
}

"""A connection to a list of `User` values, with data from `Post`."""
type PromptUsersByPostPromptIdAndAuthorIdManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User`, info from the `Post`, and the cursor to aid in pagination.
  """
  edges: [PromptUsersByPostPromptIdAndAuthorIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Post`."""
type PromptUsersByPostPromptIdAndAuthorIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User

  """Reads and enables pagination through a set of `Post`."""
  authoredPosts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter
  ): PostsConnection!
}

"""A connection to a list of `Post` values, with data from `Post`."""
type PromptPostsByPostPromptIdAndParentPostIdManyToManyConnection {
  """A list of `Post` objects."""
  nodes: [Post]!

  """
  A list of edges which contains the `Post`, info from the `Post`, and the cursor to aid in pagination.
  """
  edges: [PromptPostsByPostPromptIdAndParentPostIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Post` you could get from the connection."""
  totalCount: Int!
}

"""A `Post` edge in the connection, with data from `Post`."""
type PromptPostsByPostPromptIdAndParentPostIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Post` at the end of the edge."""
  node: Post

  """Reads and enables pagination through a set of `Post`."""
  replies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter
  ): PostsConnection!
}

"""A connection to a list of `Language` values, with data from `Post`."""
type PromptLanguagesByPostPromptIdAndLanguageIdManyToManyConnection {
  """A list of `Language` objects."""
  nodes: [Language]!

  """
  A list of edges which contains the `Language`, info from the `Post`, and the cursor to aid in pagination.
  """
  edges: [PromptLanguagesByPostPromptIdAndLanguageIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Language` you could get from the connection."""
  totalCount: Int!
}

"""A `Language` edge in the connection, with data from `Post`."""
type PromptLanguagesByPostPromptIdAndLanguageIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Language` at the end of the edge."""
  node: Language

  """Reads and enables pagination through a set of `Post`."""
  posts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter
  ): PostsConnection!
}

"""A `Prompt` edge in the connection."""
type PromptsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Prompt` at the end of the edge."""
  node: Prompt
}

"""A connection to a list of `ItalianRandomQuestion` values."""
type ItalianRandomQuestionsConnection {
  """A list of `ItalianRandomQuestion` objects."""
  nodes: [ItalianRandomQuestion]!

  """
  A list of edges which contains the `ItalianRandomQuestion` and cursor to aid in pagination.
  """
  edges: [ItalianRandomQuestionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ItalianRandomQuestion` you could get from the connection.
  """
  totalCount: Int!
}

type ItalianRandomQuestion implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  question: String!
  recommendedSkillLevelId: Int
  createdAt: Datetime!

  """
  Reads a single `LanguageSkillLevel` that is related to this `ItalianRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel
}

"""A `ItalianRandomQuestion` edge in the connection."""
type ItalianRandomQuestionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ItalianRandomQuestion` at the end of the edge."""
  node: ItalianRandomQuestion
}

"""Methods to use when ordering `ItalianRandomQuestion`."""
enum ItalianRandomQuestionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  QUESTION_ASC
  QUESTION_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ItalianRandomQuestion` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ItalianRandomQuestionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `question` field."""
  question: String

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `ItalianRandomQuestion` object types. All fields are combined with a logical ‘and.’
"""
input ItalianRandomQuestionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `question` field."""
  question: StringFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [ItalianRandomQuestionFilter!]

  """Checks for any expressions in this list."""
  or: [ItalianRandomQuestionFilter!]

  """Negates the expression."""
  not: ItalianRandomQuestionFilter
}

"""A connection to a list of `ItalianWouldYouRatherQuestion` values."""
type ItalianWouldYouRatherQuestionsConnection {
  """A list of `ItalianWouldYouRatherQuestion` objects."""
  nodes: [ItalianWouldYouRatherQuestion]!

  """
  A list of edges which contains the `ItalianWouldYouRatherQuestion` and cursor to aid in pagination.
  """
  edges: [ItalianWouldYouRatherQuestionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ItalianWouldYouRatherQuestion` you could get from the connection.
  """
  totalCount: Int!
}

type ItalianWouldYouRatherQuestion implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  question: String!
  answers: [String]!
  recommendedSkillLevelId: Int
  createdAt: Datetime!

  """
  Reads a single `LanguageSkillLevel` that is related to this `ItalianWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel
}

"""A `ItalianWouldYouRatherQuestion` edge in the connection."""
type ItalianWouldYouRatherQuestionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ItalianWouldYouRatherQuestion` at the end of the edge."""
  node: ItalianWouldYouRatherQuestion
}

"""Methods to use when ordering `ItalianWouldYouRatherQuestion`."""
enum ItalianWouldYouRatherQuestionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  QUESTION_ASC
  QUESTION_DESC
  ANSWERS_ASC
  ANSWERS_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ItalianWouldYouRatherQuestion` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ItalianWouldYouRatherQuestionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `question` field."""
  question: String

  """Checks for equality with the object’s `answers` field."""
  answers: [String]

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `ItalianWouldYouRatherQuestion` object types. All fields are combined with a logical ‘and.’
"""
input ItalianWouldYouRatherQuestionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `question` field."""
  question: StringFilter

  """Filter by the object’s `answers` field."""
  answers: StringListFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [ItalianWouldYouRatherQuestionFilter!]

  """Checks for any expressions in this list."""
  or: [ItalianWouldYouRatherQuestionFilter!]

  """Negates the expression."""
  not: ItalianWouldYouRatherQuestionFilter
}

"""A connection to a list of `ItalianWord` values."""
type ItalianWordsConnection {
  """A list of `ItalianWord` objects."""
  nodes: [ItalianWord]!

  """
  A list of edges which contains the `ItalianWord` and cursor to aid in pagination.
  """
  edges: [ItalianWordsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ItalianWord` you could get from the connection."""
  totalCount: Int!
}

type ItalianWord implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  word: String!

  """Ranges from 0 to 1 (higher is more frequent)"""
  frequency: Float!
  length: Int
  recommendedSkillLevelId: Int
  createdAt: Datetime!

  """
  Reads a single `LanguageSkillLevel` that is related to this `ItalianWord`.
  """
  recommendedSkillLevel: LanguageSkillLevel
}

"""A `ItalianWord` edge in the connection."""
type ItalianWordsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ItalianWord` at the end of the edge."""
  node: ItalianWord
}

"""Methods to use when ordering `ItalianWord`."""
enum ItalianWordsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  WORD_ASC
  WORD_DESC
  FREQUENCY_ASC
  FREQUENCY_DESC
  LENGTH_ASC
  LENGTH_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ItalianWord` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ItalianWordCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `word` field."""
  word: String

  """Checks for equality with the object’s `frequency` field."""
  frequency: Float

  """Checks for equality with the object’s `length` field."""
  length: Int

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `ItalianWord` object types. All fields are combined with a logical ‘and.’
"""
input ItalianWordFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `word` field."""
  word: StringFilter

  """Filter by the object’s `frequency` field."""
  frequency: FloatFilter

  """Filter by the object’s `length` field."""
  length: IntFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [ItalianWordFilter!]

  """Checks for any expressions in this list."""
  or: [ItalianWordFilter!]

  """Negates the expression."""
  not: ItalianWordFilter
}

"""A connection to a list of `PortugueseRandomQuestion` values."""
type PortugueseRandomQuestionsConnection {
  """A list of `PortugueseRandomQuestion` objects."""
  nodes: [PortugueseRandomQuestion]!

  """
  A list of edges which contains the `PortugueseRandomQuestion` and cursor to aid in pagination.
  """
  edges: [PortugueseRandomQuestionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `PortugueseRandomQuestion` you could get from the connection.
  """
  totalCount: Int!
}

type PortugueseRandomQuestion implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  question: String!
  recommendedSkillLevelId: Int
  createdAt: Datetime!

  """
  Reads a single `LanguageSkillLevel` that is related to this `PortugueseRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel
}

"""A `PortugueseRandomQuestion` edge in the connection."""
type PortugueseRandomQuestionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PortugueseRandomQuestion` at the end of the edge."""
  node: PortugueseRandomQuestion
}

"""Methods to use when ordering `PortugueseRandomQuestion`."""
enum PortugueseRandomQuestionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  QUESTION_ASC
  QUESTION_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `PortugueseRandomQuestion` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input PortugueseRandomQuestionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `question` field."""
  question: String

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `PortugueseRandomQuestion` object types. All fields are combined with a logical ‘and.’
"""
input PortugueseRandomQuestionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `question` field."""
  question: StringFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [PortugueseRandomQuestionFilter!]

  """Checks for any expressions in this list."""
  or: [PortugueseRandomQuestionFilter!]

  """Negates the expression."""
  not: PortugueseRandomQuestionFilter
}

"""A connection to a list of `PortugueseWouldYouRatherQuestion` values."""
type PortugueseWouldYouRatherQuestionsConnection {
  """A list of `PortugueseWouldYouRatherQuestion` objects."""
  nodes: [PortugueseWouldYouRatherQuestion]!

  """
  A list of edges which contains the `PortugueseWouldYouRatherQuestion` and cursor to aid in pagination.
  """
  edges: [PortugueseWouldYouRatherQuestionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `PortugueseWouldYouRatherQuestion` you could get from the connection.
  """
  totalCount: Int!
}

type PortugueseWouldYouRatherQuestion implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  question: String!
  answers: [String]!
  recommendedSkillLevelId: Int
  createdAt: Datetime!

  """
  Reads a single `LanguageSkillLevel` that is related to this `PortugueseWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel
}

"""A `PortugueseWouldYouRatherQuestion` edge in the connection."""
type PortugueseWouldYouRatherQuestionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PortugueseWouldYouRatherQuestion` at the end of the edge."""
  node: PortugueseWouldYouRatherQuestion
}

"""Methods to use when ordering `PortugueseWouldYouRatherQuestion`."""
enum PortugueseWouldYouRatherQuestionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  QUESTION_ASC
  QUESTION_DESC
  ANSWERS_ASC
  ANSWERS_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `PortugueseWouldYouRatherQuestion` object types.
All fields are tested for equality and combined with a logical ‘and.’
"""
input PortugueseWouldYouRatherQuestionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `question` field."""
  question: String

  """Checks for equality with the object’s `answers` field."""
  answers: [String]

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `PortugueseWouldYouRatherQuestion` object types. All fields are combined with a logical ‘and.’
"""
input PortugueseWouldYouRatherQuestionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `question` field."""
  question: StringFilter

  """Filter by the object’s `answers` field."""
  answers: StringListFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [PortugueseWouldYouRatherQuestionFilter!]

  """Checks for any expressions in this list."""
  or: [PortugueseWouldYouRatherQuestionFilter!]

  """Negates the expression."""
  not: PortugueseWouldYouRatherQuestionFilter
}

"""A connection to a list of `PortugueseWord` values."""
type PortugueseWordsConnection {
  """A list of `PortugueseWord` objects."""
  nodes: [PortugueseWord]!

  """
  A list of edges which contains the `PortugueseWord` and cursor to aid in pagination.
  """
  edges: [PortugueseWordsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PortugueseWord` you could get from the connection."""
  totalCount: Int!
}

type PortugueseWord implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  word: String!

  """Ranges from 0 to 1 (higher is more frequent)"""
  frequency: Float!
  length: Int
  recommendedSkillLevelId: Int
  createdAt: Datetime!

  """
  Reads a single `LanguageSkillLevel` that is related to this `PortugueseWord`.
  """
  recommendedSkillLevel: LanguageSkillLevel
}

"""A `PortugueseWord` edge in the connection."""
type PortugueseWordsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PortugueseWord` at the end of the edge."""
  node: PortugueseWord
}

"""Methods to use when ordering `PortugueseWord`."""
enum PortugueseWordsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  WORD_ASC
  WORD_DESC
  FREQUENCY_ASC
  FREQUENCY_DESC
  LENGTH_ASC
  LENGTH_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `PortugueseWord` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PortugueseWordCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `word` field."""
  word: String

  """Checks for equality with the object’s `frequency` field."""
  frequency: Float

  """Checks for equality with the object’s `length` field."""
  length: Int

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `PortugueseWord` object types. All fields are combined with a logical ‘and.’
"""
input PortugueseWordFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `word` field."""
  word: StringFilter

  """Filter by the object’s `frequency` field."""
  frequency: FloatFilter

  """Filter by the object’s `length` field."""
  length: IntFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [PortugueseWordFilter!]

  """Checks for any expressions in this list."""
  or: [PortugueseWordFilter!]

  """Negates the expression."""
  not: PortugueseWordFilter
}

"""A connection to a list of `SpanishRandomQuestion` values."""
type SpanishRandomQuestionsConnection {
  """A list of `SpanishRandomQuestion` objects."""
  nodes: [SpanishRandomQuestion]!

  """
  A list of edges which contains the `SpanishRandomQuestion` and cursor to aid in pagination.
  """
  edges: [SpanishRandomQuestionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SpanishRandomQuestion` you could get from the connection.
  """
  totalCount: Int!
}

type SpanishRandomQuestion implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  question: String!
  recommendedSkillLevelId: Int
  createdAt: Datetime!

  """
  Reads a single `LanguageSkillLevel` that is related to this `SpanishRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel
}

"""A `SpanishRandomQuestion` edge in the connection."""
type SpanishRandomQuestionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SpanishRandomQuestion` at the end of the edge."""
  node: SpanishRandomQuestion
}

"""Methods to use when ordering `SpanishRandomQuestion`."""
enum SpanishRandomQuestionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  QUESTION_ASC
  QUESTION_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `SpanishRandomQuestion` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input SpanishRandomQuestionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `question` field."""
  question: String

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `SpanishRandomQuestion` object types. All fields are combined with a logical ‘and.’
"""
input SpanishRandomQuestionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `question` field."""
  question: StringFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [SpanishRandomQuestionFilter!]

  """Checks for any expressions in this list."""
  or: [SpanishRandomQuestionFilter!]

  """Negates the expression."""
  not: SpanishRandomQuestionFilter
}

"""A connection to a list of `SpanishWouldYouRatherQuestion` values."""
type SpanishWouldYouRatherQuestionsConnection {
  """A list of `SpanishWouldYouRatherQuestion` objects."""
  nodes: [SpanishWouldYouRatherQuestion]!

  """
  A list of edges which contains the `SpanishWouldYouRatherQuestion` and cursor to aid in pagination.
  """
  edges: [SpanishWouldYouRatherQuestionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SpanishWouldYouRatherQuestion` you could get from the connection.
  """
  totalCount: Int!
}

type SpanishWouldYouRatherQuestion implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  question: String!
  answers: [String]!
  recommendedSkillLevelId: Int
  createdAt: Datetime!

  """
  Reads a single `LanguageSkillLevel` that is related to this `SpanishWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel
}

"""A `SpanishWouldYouRatherQuestion` edge in the connection."""
type SpanishWouldYouRatherQuestionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SpanishWouldYouRatherQuestion` at the end of the edge."""
  node: SpanishWouldYouRatherQuestion
}

"""Methods to use when ordering `SpanishWouldYouRatherQuestion`."""
enum SpanishWouldYouRatherQuestionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  QUESTION_ASC
  QUESTION_DESC
  ANSWERS_ASC
  ANSWERS_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `SpanishWouldYouRatherQuestion` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input SpanishWouldYouRatherQuestionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `question` field."""
  question: String

  """Checks for equality with the object’s `answers` field."""
  answers: [String]

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `SpanishWouldYouRatherQuestion` object types. All fields are combined with a logical ‘and.’
"""
input SpanishWouldYouRatherQuestionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `question` field."""
  question: StringFilter

  """Filter by the object’s `answers` field."""
  answers: StringListFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [SpanishWouldYouRatherQuestionFilter!]

  """Checks for any expressions in this list."""
  or: [SpanishWouldYouRatherQuestionFilter!]

  """Negates the expression."""
  not: SpanishWouldYouRatherQuestionFilter
}

"""A connection to a list of `SpanishWord` values."""
type SpanishWordsConnection {
  """A list of `SpanishWord` objects."""
  nodes: [SpanishWord]!

  """
  A list of edges which contains the `SpanishWord` and cursor to aid in pagination.
  """
  edges: [SpanishWordsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SpanishWord` you could get from the connection."""
  totalCount: Int!
}

type SpanishWord implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  word: String!

  """Ranges from 0 to 1 (higher is more frequent)"""
  frequency: Float!
  length: Int
  recommendedSkillLevelId: Int
  createdAt: Datetime!

  """
  Reads a single `LanguageSkillLevel` that is related to this `SpanishWord`.
  """
  recommendedSkillLevel: LanguageSkillLevel
}

"""A `SpanishWord` edge in the connection."""
type SpanishWordsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SpanishWord` at the end of the edge."""
  node: SpanishWord
}

"""Methods to use when ordering `SpanishWord`."""
enum SpanishWordsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  WORD_ASC
  WORD_DESC
  FREQUENCY_ASC
  FREQUENCY_DESC
  LENGTH_ASC
  LENGTH_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `SpanishWord` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SpanishWordCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `word` field."""
  word: String

  """Checks for equality with the object’s `frequency` field."""
  frequency: Float

  """Checks for equality with the object’s `length` field."""
  length: Int

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `SpanishWord` object types. All fields are combined with a logical ‘and.’
"""
input SpanishWordFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `word` field."""
  word: StringFilter

  """Filter by the object’s `frequency` field."""
  frequency: FloatFilter

  """Filter by the object’s `length` field."""
  length: IntFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [SpanishWordFilter!]

  """Checks for any expressions in this list."""
  or: [SpanishWordFilter!]

  """Negates the expression."""
  not: SpanishWordFilter
}

"""A connection to a list of `RussianRandomQuestion` values."""
type RussianRandomQuestionsConnection {
  """A list of `RussianRandomQuestion` objects."""
  nodes: [RussianRandomQuestion]!

  """
  A list of edges which contains the `RussianRandomQuestion` and cursor to aid in pagination.
  """
  edges: [RussianRandomQuestionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `RussianRandomQuestion` you could get from the connection.
  """
  totalCount: Int!
}

type RussianRandomQuestion implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  question: String!
  recommendedSkillLevelId: Int
  createdAt: Datetime!

  """
  Reads a single `LanguageSkillLevel` that is related to this `RussianRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel
}

"""A `RussianRandomQuestion` edge in the connection."""
type RussianRandomQuestionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RussianRandomQuestion` at the end of the edge."""
  node: RussianRandomQuestion
}

"""Methods to use when ordering `RussianRandomQuestion`."""
enum RussianRandomQuestionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  QUESTION_ASC
  QUESTION_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `RussianRandomQuestion` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input RussianRandomQuestionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `question` field."""
  question: String

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `RussianRandomQuestion` object types. All fields are combined with a logical ‘and.’
"""
input RussianRandomQuestionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `question` field."""
  question: StringFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [RussianRandomQuestionFilter!]

  """Checks for any expressions in this list."""
  or: [RussianRandomQuestionFilter!]

  """Negates the expression."""
  not: RussianRandomQuestionFilter
}

"""A connection to a list of `RussianWouldYouRatherQuestion` values."""
type RussianWouldYouRatherQuestionsConnection {
  """A list of `RussianWouldYouRatherQuestion` objects."""
  nodes: [RussianWouldYouRatherQuestion]!

  """
  A list of edges which contains the `RussianWouldYouRatherQuestion` and cursor to aid in pagination.
  """
  edges: [RussianWouldYouRatherQuestionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `RussianWouldYouRatherQuestion` you could get from the connection.
  """
  totalCount: Int!
}

type RussianWouldYouRatherQuestion implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  question: String!
  answers: [String]!
  recommendedSkillLevelId: Int
  createdAt: Datetime!

  """
  Reads a single `LanguageSkillLevel` that is related to this `RussianWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel
}

"""A `RussianWouldYouRatherQuestion` edge in the connection."""
type RussianWouldYouRatherQuestionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RussianWouldYouRatherQuestion` at the end of the edge."""
  node: RussianWouldYouRatherQuestion
}

"""Methods to use when ordering `RussianWouldYouRatherQuestion`."""
enum RussianWouldYouRatherQuestionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  QUESTION_ASC
  QUESTION_DESC
  ANSWERS_ASC
  ANSWERS_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `RussianWouldYouRatherQuestion` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input RussianWouldYouRatherQuestionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `question` field."""
  question: String

  """Checks for equality with the object’s `answers` field."""
  answers: [String]

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `RussianWouldYouRatherQuestion` object types. All fields are combined with a logical ‘and.’
"""
input RussianWouldYouRatherQuestionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `question` field."""
  question: StringFilter

  """Filter by the object’s `answers` field."""
  answers: StringListFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [RussianWouldYouRatherQuestionFilter!]

  """Checks for any expressions in this list."""
  or: [RussianWouldYouRatherQuestionFilter!]

  """Negates the expression."""
  not: RussianWouldYouRatherQuestionFilter
}

"""A connection to a list of `RussianWord` values."""
type RussianWordsConnection {
  """A list of `RussianWord` objects."""
  nodes: [RussianWord]!

  """
  A list of edges which contains the `RussianWord` and cursor to aid in pagination.
  """
  edges: [RussianWordsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RussianWord` you could get from the connection."""
  totalCount: Int!
}

type RussianWord implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  word: String!

  """Ranges from 0 to 1 (higher is more frequent)"""
  frequency: Float!
  length: Int
  recommendedSkillLevelId: Int
  createdAt: Datetime!

  """
  Reads a single `LanguageSkillLevel` that is related to this `RussianWord`.
  """
  recommendedSkillLevel: LanguageSkillLevel
}

"""A `RussianWord` edge in the connection."""
type RussianWordsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RussianWord` at the end of the edge."""
  node: RussianWord
}

"""Methods to use when ordering `RussianWord`."""
enum RussianWordsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  WORD_ASC
  WORD_DESC
  FREQUENCY_ASC
  FREQUENCY_DESC
  LENGTH_ASC
  LENGTH_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `RussianWord` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input RussianWordCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `word` field."""
  word: String

  """Checks for equality with the object’s `frequency` field."""
  frequency: Float

  """Checks for equality with the object’s `length` field."""
  length: Int

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `RussianWord` object types. All fields are combined with a logical ‘and.’
"""
input RussianWordFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `word` field."""
  word: StringFilter

  """Filter by the object’s `frequency` field."""
  frequency: FloatFilter

  """Filter by the object’s `length` field."""
  length: IntFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [RussianWordFilter!]

  """Checks for any expressions in this list."""
  or: [RussianWordFilter!]

  """Negates the expression."""
  not: RussianWordFilter
}

"""A connection to a list of `FrenchRandomQuestion` values."""
type FrenchRandomQuestionsConnection {
  """A list of `FrenchRandomQuestion` objects."""
  nodes: [FrenchRandomQuestion]!

  """
  A list of edges which contains the `FrenchRandomQuestion` and cursor to aid in pagination.
  """
  edges: [FrenchRandomQuestionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FrenchRandomQuestion` you could get from the connection.
  """
  totalCount: Int!
}

type FrenchRandomQuestion implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  question: String!
  recommendedSkillLevelId: Int
  createdAt: Datetime!

  """
  Reads a single `LanguageSkillLevel` that is related to this `FrenchRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel
}

"""A `FrenchRandomQuestion` edge in the connection."""
type FrenchRandomQuestionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FrenchRandomQuestion` at the end of the edge."""
  node: FrenchRandomQuestion
}

"""Methods to use when ordering `FrenchRandomQuestion`."""
enum FrenchRandomQuestionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  QUESTION_ASC
  QUESTION_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `FrenchRandomQuestion` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input FrenchRandomQuestionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `question` field."""
  question: String

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `FrenchRandomQuestion` object types. All fields are combined with a logical ‘and.’
"""
input FrenchRandomQuestionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `question` field."""
  question: StringFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [FrenchRandomQuestionFilter!]

  """Checks for any expressions in this list."""
  or: [FrenchRandomQuestionFilter!]

  """Negates the expression."""
  not: FrenchRandomQuestionFilter
}

"""A connection to a list of `FrenchWouldYouRatherQuestion` values."""
type FrenchWouldYouRatherQuestionsConnection {
  """A list of `FrenchWouldYouRatherQuestion` objects."""
  nodes: [FrenchWouldYouRatherQuestion]!

  """
  A list of edges which contains the `FrenchWouldYouRatherQuestion` and cursor to aid in pagination.
  """
  edges: [FrenchWouldYouRatherQuestionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FrenchWouldYouRatherQuestion` you could get from the connection.
  """
  totalCount: Int!
}

type FrenchWouldYouRatherQuestion implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  question: String!
  answers: [String]!
  recommendedSkillLevelId: Int
  createdAt: Datetime!

  """
  Reads a single `LanguageSkillLevel` that is related to this `FrenchWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel
}

"""A `FrenchWouldYouRatherQuestion` edge in the connection."""
type FrenchWouldYouRatherQuestionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FrenchWouldYouRatherQuestion` at the end of the edge."""
  node: FrenchWouldYouRatherQuestion
}

"""Methods to use when ordering `FrenchWouldYouRatherQuestion`."""
enum FrenchWouldYouRatherQuestionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  QUESTION_ASC
  QUESTION_DESC
  ANSWERS_ASC
  ANSWERS_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `FrenchWouldYouRatherQuestion` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input FrenchWouldYouRatherQuestionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `question` field."""
  question: String

  """Checks for equality with the object’s `answers` field."""
  answers: [String]

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `FrenchWouldYouRatherQuestion` object types. All fields are combined with a logical ‘and.’
"""
input FrenchWouldYouRatherQuestionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `question` field."""
  question: StringFilter

  """Filter by the object’s `answers` field."""
  answers: StringListFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [FrenchWouldYouRatherQuestionFilter!]

  """Checks for any expressions in this list."""
  or: [FrenchWouldYouRatherQuestionFilter!]

  """Negates the expression."""
  not: FrenchWouldYouRatherQuestionFilter
}

"""A connection to a list of `FrenchWord` values."""
type FrenchWordsConnection {
  """A list of `FrenchWord` objects."""
  nodes: [FrenchWord]!

  """
  A list of edges which contains the `FrenchWord` and cursor to aid in pagination.
  """
  edges: [FrenchWordsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FrenchWord` you could get from the connection."""
  totalCount: Int!
}

type FrenchWord implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  word: String!

  """Ranges from 0 to 1 (higher is more frequent)"""
  frequency: Float!
  length: Int
  recommendedSkillLevelId: Int
  createdAt: Datetime!

  """
  Reads a single `LanguageSkillLevel` that is related to this `FrenchWord`.
  """
  recommendedSkillLevel: LanguageSkillLevel
}

"""A `FrenchWord` edge in the connection."""
type FrenchWordsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FrenchWord` at the end of the edge."""
  node: FrenchWord
}

"""Methods to use when ordering `FrenchWord`."""
enum FrenchWordsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  WORD_ASC
  WORD_DESC
  FREQUENCY_ASC
  FREQUENCY_DESC
  LENGTH_ASC
  LENGTH_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `FrenchWord` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FrenchWordCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `word` field."""
  word: String

  """Checks for equality with the object’s `frequency` field."""
  frequency: Float

  """Checks for equality with the object’s `length` field."""
  length: Int

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `FrenchWord` object types. All fields are combined with a logical ‘and.’
"""
input FrenchWordFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `word` field."""
  word: StringFilter

  """Filter by the object’s `frequency` field."""
  frequency: FloatFilter

  """Filter by the object’s `length` field."""
  length: IntFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [FrenchWordFilter!]

  """Checks for any expressions in this list."""
  or: [FrenchWordFilter!]

  """Negates the expression."""
  not: FrenchWordFilter
}

"""A connection to a list of `KoreanRandomQuestion` values."""
type KoreanRandomQuestionsConnection {
  """A list of `KoreanRandomQuestion` objects."""
  nodes: [KoreanRandomQuestion]!

  """
  A list of edges which contains the `KoreanRandomQuestion` and cursor to aid in pagination.
  """
  edges: [KoreanRandomQuestionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `KoreanRandomQuestion` you could get from the connection.
  """
  totalCount: Int!
}

type KoreanRandomQuestion implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  question: String!
  recommendedSkillLevelId: Int
  createdAt: Datetime!

  """
  Reads a single `LanguageSkillLevel` that is related to this `KoreanRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel
}

"""A `KoreanRandomQuestion` edge in the connection."""
type KoreanRandomQuestionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `KoreanRandomQuestion` at the end of the edge."""
  node: KoreanRandomQuestion
}

"""Methods to use when ordering `KoreanRandomQuestion`."""
enum KoreanRandomQuestionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  QUESTION_ASC
  QUESTION_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `KoreanRandomQuestion` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input KoreanRandomQuestionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `question` field."""
  question: String

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `KoreanRandomQuestion` object types. All fields are combined with a logical ‘and.’
"""
input KoreanRandomQuestionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `question` field."""
  question: StringFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [KoreanRandomQuestionFilter!]

  """Checks for any expressions in this list."""
  or: [KoreanRandomQuestionFilter!]

  """Negates the expression."""
  not: KoreanRandomQuestionFilter
}

"""A connection to a list of `KoreanWouldYouRatherQuestion` values."""
type KoreanWouldYouRatherQuestionsConnection {
  """A list of `KoreanWouldYouRatherQuestion` objects."""
  nodes: [KoreanWouldYouRatherQuestion]!

  """
  A list of edges which contains the `KoreanWouldYouRatherQuestion` and cursor to aid in pagination.
  """
  edges: [KoreanWouldYouRatherQuestionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `KoreanWouldYouRatherQuestion` you could get from the connection.
  """
  totalCount: Int!
}

type KoreanWouldYouRatherQuestion implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  question: String!
  answers: [String]!
  recommendedSkillLevelId: Int
  createdAt: Datetime!

  """
  Reads a single `LanguageSkillLevel` that is related to this `KoreanWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel
}

"""A `KoreanWouldYouRatherQuestion` edge in the connection."""
type KoreanWouldYouRatherQuestionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `KoreanWouldYouRatherQuestion` at the end of the edge."""
  node: KoreanWouldYouRatherQuestion
}

"""Methods to use when ordering `KoreanWouldYouRatherQuestion`."""
enum KoreanWouldYouRatherQuestionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  QUESTION_ASC
  QUESTION_DESC
  ANSWERS_ASC
  ANSWERS_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `KoreanWouldYouRatherQuestion` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input KoreanWouldYouRatherQuestionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `question` field."""
  question: String

  """Checks for equality with the object’s `answers` field."""
  answers: [String]

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `KoreanWouldYouRatherQuestion` object types. All fields are combined with a logical ‘and.’
"""
input KoreanWouldYouRatherQuestionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `question` field."""
  question: StringFilter

  """Filter by the object’s `answers` field."""
  answers: StringListFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [KoreanWouldYouRatherQuestionFilter!]

  """Checks for any expressions in this list."""
  or: [KoreanWouldYouRatherQuestionFilter!]

  """Negates the expression."""
  not: KoreanWouldYouRatherQuestionFilter
}

"""A connection to a list of `JapaneseRandomQuestion` values."""
type JapaneseRandomQuestionsConnection {
  """A list of `JapaneseRandomQuestion` objects."""
  nodes: [JapaneseRandomQuestion]!

  """
  A list of edges which contains the `JapaneseRandomQuestion` and cursor to aid in pagination.
  """
  edges: [JapaneseRandomQuestionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `JapaneseRandomQuestion` you could get from the connection.
  """
  totalCount: Int!
}

type JapaneseRandomQuestion implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  question: String!
  recommendedSkillLevelId: Int
  createdAt: Datetime!

  """
  Reads a single `LanguageSkillLevel` that is related to this `JapaneseRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel
}

"""A `JapaneseRandomQuestion` edge in the connection."""
type JapaneseRandomQuestionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `JapaneseRandomQuestion` at the end of the edge."""
  node: JapaneseRandomQuestion
}

"""Methods to use when ordering `JapaneseRandomQuestion`."""
enum JapaneseRandomQuestionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  QUESTION_ASC
  QUESTION_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `JapaneseRandomQuestion` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input JapaneseRandomQuestionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `question` field."""
  question: String

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `JapaneseRandomQuestion` object types. All fields are combined with a logical ‘and.’
"""
input JapaneseRandomQuestionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `question` field."""
  question: StringFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [JapaneseRandomQuestionFilter!]

  """Checks for any expressions in this list."""
  or: [JapaneseRandomQuestionFilter!]

  """Negates the expression."""
  not: JapaneseRandomQuestionFilter
}

"""A connection to a list of `JapaneseWouldYouRatherQuestion` values."""
type JapaneseWouldYouRatherQuestionsConnection {
  """A list of `JapaneseWouldYouRatherQuestion` objects."""
  nodes: [JapaneseWouldYouRatherQuestion]!

  """
  A list of edges which contains the `JapaneseWouldYouRatherQuestion` and cursor to aid in pagination.
  """
  edges: [JapaneseWouldYouRatherQuestionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `JapaneseWouldYouRatherQuestion` you could get from the connection.
  """
  totalCount: Int!
}

type JapaneseWouldYouRatherQuestion implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  question: String!
  answers: [String]!
  recommendedSkillLevelId: Int
  createdAt: Datetime!

  """
  Reads a single `LanguageSkillLevel` that is related to this `JapaneseWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel
}

"""A `JapaneseWouldYouRatherQuestion` edge in the connection."""
type JapaneseWouldYouRatherQuestionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `JapaneseWouldYouRatherQuestion` at the end of the edge."""
  node: JapaneseWouldYouRatherQuestion
}

"""Methods to use when ordering `JapaneseWouldYouRatherQuestion`."""
enum JapaneseWouldYouRatherQuestionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  QUESTION_ASC
  QUESTION_DESC
  ANSWERS_ASC
  ANSWERS_DESC
  RECOMMENDED_SKILL_LEVEL_ID_ASC
  RECOMMENDED_SKILL_LEVEL_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `JapaneseWouldYouRatherQuestion` object types.
All fields are tested for equality and combined with a logical ‘and.’
"""
input JapaneseWouldYouRatherQuestionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `question` field."""
  question: String

  """Checks for equality with the object’s `answers` field."""
  answers: [String]

  """Checks for equality with the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `JapaneseWouldYouRatherQuestion` object types. All fields are combined with a logical ‘and.’
"""
input JapaneseWouldYouRatherQuestionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `question` field."""
  question: StringFilter

  """Filter by the object’s `answers` field."""
  answers: StringListFilter

  """Filter by the object’s `recommendedSkillLevelId` field."""
  recommendedSkillLevelId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [JapaneseWouldYouRatherQuestionFilter!]

  """Checks for any expressions in this list."""
  or: [JapaneseWouldYouRatherQuestionFilter!]

  """Negates the expression."""
  not: JapaneseWouldYouRatherQuestionFilter
}

"""
A connection to a list of `User` values, with data from `UserLanguage`.
"""
type LanguageSkillLevelUsersByUserLanguageLanguageSkillLevelIdAndUserIdManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User`, info from the `UserLanguage`, and the cursor to aid in pagination.
  """
  edges: [LanguageSkillLevelUsersByUserLanguageLanguageSkillLevelIdAndUserIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `UserLanguage`."""
type LanguageSkillLevelUsersByUserLanguageLanguageSkillLevelIdAndUserIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User

  """Reads and enables pagination through a set of `UserLanguage`."""
  userLanguages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserLanguage`."""
    orderBy: [UserLanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserLanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserLanguageFilter
  ): UserLanguagesConnection!
}

"""
A connection to a list of `Language` values, with data from `UserLanguage`.
"""
type LanguageSkillLevelLanguagesByUserLanguageLanguageSkillLevelIdAndLanguageIdManyToManyConnection {
  """A list of `Language` objects."""
  nodes: [Language]!

  """
  A list of edges which contains the `Language`, info from the `UserLanguage`, and the cursor to aid in pagination.
  """
  edges: [LanguageSkillLevelLanguagesByUserLanguageLanguageSkillLevelIdAndLanguageIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Language` you could get from the connection."""
  totalCount: Int!
}

"""A `Language` edge in the connection, with data from `UserLanguage`."""
type LanguageSkillLevelLanguagesByUserLanguageLanguageSkillLevelIdAndLanguageIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Language` at the end of the edge."""
  node: Language

  """Reads and enables pagination through a set of `UserLanguage`."""
  userLanguages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserLanguage`."""
    orderBy: [UserLanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserLanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserLanguageFilter
  ): UserLanguagesConnection!
}

"""A connection to a list of `Language` values, with data from `Group`."""
type LanguageSkillLevelLanguagesByGroupLanguageSkillLevelIdAndLanguageIdManyToManyConnection {
  """A list of `Language` objects."""
  nodes: [Language]!

  """
  A list of edges which contains the `Language`, info from the `Group`, and the cursor to aid in pagination.
  """
  edges: [LanguageSkillLevelLanguagesByGroupLanguageSkillLevelIdAndLanguageIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Language` you could get from the connection."""
  totalCount: Int!
}

"""A `Language` edge in the connection, with data from `Group`."""
type LanguageSkillLevelLanguagesByGroupLanguageSkillLevelIdAndLanguageIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Language` at the end of the edge."""
  node: Language

  """Reads and enables pagination through a set of `Group`."""
  groups(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter
  ): GroupsConnection!
}

"""A connection to a list of `Language` values, with data from `Prompt`."""
type LanguageSkillLevelLanguagesByPromptRecommendedSkillLevelIdAndLanguageIdManyToManyConnection {
  """A list of `Language` objects."""
  nodes: [Language]!

  """
  A list of edges which contains the `Language`, info from the `Prompt`, and the cursor to aid in pagination.
  """
  edges: [LanguageSkillLevelLanguagesByPromptRecommendedSkillLevelIdAndLanguageIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Language` you could get from the connection."""
  totalCount: Int!
}

"""A `Language` edge in the connection, with data from `Prompt`."""
type LanguageSkillLevelLanguagesByPromptRecommendedSkillLevelIdAndLanguageIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Language` at the end of the edge."""
  node: Language

  """Reads and enables pagination through a set of `Prompt`."""
  prompts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Prompt`."""
    orderBy: [PromptsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PromptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PromptFilter
  ): PromptsConnection!
}

"""A `UserLanguage` edge in the connection."""
type UserLanguagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserLanguage` at the end of the edge."""
  node: UserLanguage
}

"""A connection to a list of `InviteToken` values, with data from `User`."""
type LanguageInviteTokensByUserLocaleAndSignedUpWithTokenIdManyToManyConnection {
  """A list of `InviteToken` objects."""
  nodes: [InviteToken]!

  """
  A list of edges which contains the `InviteToken`, info from the `User`, and the cursor to aid in pagination.
  """
  edges: [LanguageInviteTokensByUserLocaleAndSignedUpWithTokenIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `InviteToken` you could get from the connection."""
  totalCount: Int!
}

type InviteToken implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  userId: Int
  inviteToken: String!
  createdAt: Datetime!
  description: String

  """Reads a single `User` that is related to this `InviteToken`."""
  user: User

  """Reads and enables pagination through a set of `User`."""
  usersBySignedUpWithTokenId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection!

  """Reads and enables pagination through a set of `Language`."""
  languagesByUserSignedUpWithTokenIdAndLocale(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter
  ): InviteTokenLanguagesByUserSignedUpWithTokenIdAndLocaleManyToManyConnection!
}

"""A connection to a list of `Language` values, with data from `User`."""
type InviteTokenLanguagesByUserSignedUpWithTokenIdAndLocaleManyToManyConnection {
  """A list of `Language` objects."""
  nodes: [Language]!

  """
  A list of edges which contains the `Language`, info from the `User`, and the cursor to aid in pagination.
  """
  edges: [InviteTokenLanguagesByUserSignedUpWithTokenIdAndLocaleManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Language` you could get from the connection."""
  totalCount: Int!
}

"""A `Language` edge in the connection, with data from `User`."""
type InviteTokenLanguagesByUserSignedUpWithTokenIdAndLocaleManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Language` at the end of the edge."""
  node: Language

  """Reads and enables pagination through a set of `User`."""
  usersByLocale(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection!
}

"""A `InviteToken` edge in the connection, with data from `User`."""
type LanguageInviteTokensByUserLocaleAndSignedUpWithTokenIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `InviteToken` at the end of the edge."""
  node: InviteToken

  """Reads and enables pagination through a set of `User`."""
  usersBySignedUpWithTokenId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection!
}

"""Methods to use when ordering `InviteToken`."""
enum InviteTokensOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  INVITE_TOKEN_ASC
  INVITE_TOKEN_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `InviteToken` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input InviteTokenCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `inviteToken` field."""
  inviteToken: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""
A filter to be used against `InviteToken` object types. All fields are combined with a logical ‘and.’
"""
input InviteTokenFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `inviteToken` field."""
  inviteToken: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Checks for all expressions in this list."""
  and: [InviteTokenFilter!]

  """Checks for any expressions in this list."""
  or: [InviteTokenFilter!]

  """Negates the expression."""
  not: InviteTokenFilter
}

"""
A connection to a list of `User` values, with data from `UserLanguage`.
"""
type LanguageUsersByUserLanguageLanguageIdAndUserIdManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User`, info from the `UserLanguage`, and the cursor to aid in pagination.
  """
  edges: [LanguageUsersByUserLanguageLanguageIdAndUserIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `UserLanguage`."""
type LanguageUsersByUserLanguageLanguageIdAndUserIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User

  """Reads and enables pagination through a set of `UserLanguage`."""
  userLanguages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserLanguage`."""
    orderBy: [UserLanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserLanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserLanguageFilter
  ): UserLanguagesConnection!
}

"""
A connection to a list of `LanguageSkillLevel` values, with data from `UserLanguage`.
"""
type LanguageLanguageSkillLevelsByUserLanguageLanguageIdAndLanguageSkillLevelIdManyToManyConnection {
  """A list of `LanguageSkillLevel` objects."""
  nodes: [LanguageSkillLevel]!

  """
  A list of edges which contains the `LanguageSkillLevel`, info from the `UserLanguage`, and the cursor to aid in pagination.
  """
  edges: [LanguageLanguageSkillLevelsByUserLanguageLanguageIdAndLanguageSkillLevelIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `LanguageSkillLevel` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `LanguageSkillLevel` edge in the connection, with data from `UserLanguage`.
"""
type LanguageLanguageSkillLevelsByUserLanguageLanguageIdAndLanguageSkillLevelIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LanguageSkillLevel` at the end of the edge."""
  node: LanguageSkillLevel

  """Reads and enables pagination through a set of `UserLanguage`."""
  userLanguages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserLanguage`."""
    orderBy: [UserLanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserLanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserLanguageFilter
  ): UserLanguagesConnection!
}

"""Methods to use when ordering `LanguageSkillLevel`."""
enum LanguageSkillLevelsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `LanguageSkillLevel` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LanguageSkillLevelCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""
A filter to be used against `LanguageSkillLevel` object types. All fields are combined with a logical ‘and.’
"""
input LanguageSkillLevelFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Checks for all expressions in this list."""
  and: [LanguageSkillLevelFilter!]

  """Checks for any expressions in this list."""
  or: [LanguageSkillLevelFilter!]

  """Negates the expression."""
  not: LanguageSkillLevelFilter
}

"""
A connection to a list of `LanguageSkillLevel` values, with data from `Group`.
"""
type LanguageLanguageSkillLevelsByGroupLanguageIdAndLanguageSkillLevelIdManyToManyConnection {
  """A list of `LanguageSkillLevel` objects."""
  nodes: [LanguageSkillLevel]!

  """
  A list of edges which contains the `LanguageSkillLevel`, info from the `Group`, and the cursor to aid in pagination.
  """
  edges: [LanguageLanguageSkillLevelsByGroupLanguageIdAndLanguageSkillLevelIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `LanguageSkillLevel` you could get from the connection.
  """
  totalCount: Int!
}

"""A `LanguageSkillLevel` edge in the connection, with data from `Group`."""
type LanguageLanguageSkillLevelsByGroupLanguageIdAndLanguageSkillLevelIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LanguageSkillLevel` at the end of the edge."""
  node: LanguageSkillLevel

  """Reads and enables pagination through a set of `Group`."""
  groups(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter
  ): GroupsConnection!
}

"""A connection to a list of `User` values, with data from `Post`."""
type LanguageUsersByPostLanguageIdAndAuthorIdManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User`, info from the `Post`, and the cursor to aid in pagination.
  """
  edges: [LanguageUsersByPostLanguageIdAndAuthorIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Post`."""
type LanguageUsersByPostLanguageIdAndAuthorIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User

  """Reads and enables pagination through a set of `Post`."""
  authoredPosts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter
  ): PostsConnection!
}

"""A connection to a list of `Post` values, with data from `Post`."""
type LanguagePostsByPostLanguageIdAndParentPostIdManyToManyConnection {
  """A list of `Post` objects."""
  nodes: [Post]!

  """
  A list of edges which contains the `Post`, info from the `Post`, and the cursor to aid in pagination.
  """
  edges: [LanguagePostsByPostLanguageIdAndParentPostIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Post` you could get from the connection."""
  totalCount: Int!
}

"""A `Post` edge in the connection, with data from `Post`."""
type LanguagePostsByPostLanguageIdAndParentPostIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Post` at the end of the edge."""
  node: Post

  """Reads and enables pagination through a set of `Post`."""
  replies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter
  ): PostsConnection!
}

"""A connection to a list of `Prompt` values, with data from `Post`."""
type LanguagePromptsByPostLanguageIdAndPromptIdManyToManyConnection {
  """A list of `Prompt` objects."""
  nodes: [Prompt]!

  """
  A list of edges which contains the `Prompt`, info from the `Post`, and the cursor to aid in pagination.
  """
  edges: [LanguagePromptsByPostLanguageIdAndPromptIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Prompt` you could get from the connection."""
  totalCount: Int!
}

"""A `Prompt` edge in the connection, with data from `Post`."""
type LanguagePromptsByPostLanguageIdAndPromptIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Prompt` at the end of the edge."""
  node: Prompt

  """Reads and enables pagination through a set of `Post`."""
  posts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter
  ): PostsConnection!
}

"""
A connection to a list of `LanguageSkillLevel` values, with data from `Prompt`.
"""
type LanguageLanguageSkillLevelsByPromptLanguageIdAndRecommendedSkillLevelIdManyToManyConnection {
  """A list of `LanguageSkillLevel` objects."""
  nodes: [LanguageSkillLevel]!

  """
  A list of edges which contains the `LanguageSkillLevel`, info from the `Prompt`, and the cursor to aid in pagination.
  """
  edges: [LanguageLanguageSkillLevelsByPromptLanguageIdAndRecommendedSkillLevelIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `LanguageSkillLevel` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `LanguageSkillLevel` edge in the connection, with data from `Prompt`.
"""
type LanguageLanguageSkillLevelsByPromptLanguageIdAndRecommendedSkillLevelIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LanguageSkillLevel` at the end of the edge."""
  node: LanguageSkillLevel

  """Reads and enables pagination through a set of `Prompt`."""
  promptsByRecommendedSkillLevelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Prompt`."""
    orderBy: [PromptsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PromptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PromptFilter
  ): PromptsConnection!
}

"""A connection to a list of `InviteToken` values."""
type InviteTokensConnection {
  """A list of `InviteToken` objects."""
  nodes: [InviteToken]!

  """
  A list of edges which contains the `InviteToken` and cursor to aid in pagination.
  """
  edges: [InviteTokensEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `InviteToken` you could get from the connection."""
  totalCount: Int!
}

"""A `InviteToken` edge in the connection."""
type InviteTokensEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `InviteToken` at the end of the edge."""
  node: InviteToken
}

"""A connection to a list of `UserDevice` values."""
type UserDevicesConnection {
  """A list of `UserDevice` objects."""
  nodes: [UserDevice]!

  """
  A list of edges which contains the `UserDevice` and cursor to aid in pagination.
  """
  edges: [UserDevicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserDevice` you could get from the connection."""
  totalCount: Int!
}

type UserDevice implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uuid: UUID!
  userId: Int
  fcmToken: String
  createdAt: Datetime!

  """Reads a single `User` that is related to this `UserDevice`."""
  user: User
}

"""A `UserDevice` edge in the connection."""
type UserDevicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserDevice` at the end of the edge."""
  node: UserDevice
}

"""Methods to use when ordering `UserDevice`."""
enum UserDevicesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UUID_ASC
  UUID_DESC
  USER_ID_ASC
  USER_ID_DESC
  FCM_TOKEN_ASC
  FCM_TOKEN_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `UserDevice` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserDeviceCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `fcmToken` field."""
  fcmToken: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `UserDevice` object types. All fields are combined with a logical ‘and.’
"""
input UserDeviceFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Filter by the object’s `userId` field."""
  userId: IntFilter

  """Filter by the object’s `fcmToken` field."""
  fcmToken: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [UserDeviceFilter!]

  """Checks for any expressions in this list."""
  or: [UserDeviceFilter!]

  """Negates the expression."""
  not: UserDeviceFilter
}

"""
A connection to a list of `Language` values, with data from `UserLanguage`.
"""
type UserLanguagesByUserLanguageUserIdAndLanguageIdManyToManyConnection {
  """A list of `Language` objects."""
  nodes: [Language]!

  """
  A list of edges which contains the `Language`, info from the `UserLanguage`, and the cursor to aid in pagination.
  """
  edges: [UserLanguagesByUserLanguageUserIdAndLanguageIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Language` you could get from the connection."""
  totalCount: Int!
}

"""A `Language` edge in the connection, with data from `UserLanguage`."""
type UserLanguagesByUserLanguageUserIdAndLanguageIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Language` at the end of the edge."""
  node: Language

  """Reads and enables pagination through a set of `UserLanguage`."""
  userLanguages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserLanguage`."""
    orderBy: [UserLanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserLanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserLanguageFilter
  ): UserLanguagesConnection!
}

"""
A connection to a list of `LanguageSkillLevel` values, with data from `UserLanguage`.
"""
type UserLanguageSkillLevelsByUserLanguageUserIdAndLanguageSkillLevelIdManyToManyConnection {
  """A list of `LanguageSkillLevel` objects."""
  nodes: [LanguageSkillLevel]!

  """
  A list of edges which contains the `LanguageSkillLevel`, info from the `UserLanguage`, and the cursor to aid in pagination.
  """
  edges: [UserLanguageSkillLevelsByUserLanguageUserIdAndLanguageSkillLevelIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `LanguageSkillLevel` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `LanguageSkillLevel` edge in the connection, with data from `UserLanguage`.
"""
type UserLanguageSkillLevelsByUserLanguageUserIdAndLanguageSkillLevelIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LanguageSkillLevel` at the end of the edge."""
  node: LanguageSkillLevel

  """Reads and enables pagination through a set of `UserLanguage`."""
  userLanguages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserLanguage`."""
    orderBy: [UserLanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserLanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserLanguageFilter
  ): UserLanguagesConnection!
}

"""A connection to a list of `Group` values, with data from `GroupUser`."""
type UserGroupsByGroupUserUserIdAndGroupIdManyToManyConnection {
  """A list of `Group` objects."""
  nodes: [Group]!

  """
  A list of edges which contains the `Group`, info from the `GroupUser`, and the cursor to aid in pagination.
  """
  edges: [UserGroupsByGroupUserUserIdAndGroupIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Group` you could get from the connection."""
  totalCount: Int!
}

"""A `Group` edge in the connection, with data from `GroupUser`."""
type UserGroupsByGroupUserUserIdAndGroupIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Group` at the end of the edge."""
  node: Group

  """Reads and enables pagination through a set of `GroupUser`."""
  groupUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GroupUser`."""
    orderBy: [GroupUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupUserFilter
  ): GroupUsersConnection!
}

"""A connection to a list of `User` values, with data from `Message`."""
type UserUsersByMessageSenderIdAndRecipientIdManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User`, info from the `Message`, and the cursor to aid in pagination.
  """
  edges: [UserUsersByMessageSenderIdAndRecipientIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Message`."""
type UserUsersByMessageSenderIdAndRecipientIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User

  """Reads and enables pagination through a set of `Message`."""
  messagesByRecipientId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): MessagesConnection!
}

"""A connection to a list of `Group` values, with data from `Message`."""
type UserGroupsByMessageSenderIdAndRecipientGroupIdManyToManyConnection {
  """A list of `Group` objects."""
  nodes: [Group]!

  """
  A list of edges which contains the `Group`, info from the `Message`, and the cursor to aid in pagination.
  """
  edges: [UserGroupsByMessageSenderIdAndRecipientGroupIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Group` you could get from the connection."""
  totalCount: Int!
}

"""A `Group` edge in the connection, with data from `Message`."""
type UserGroupsByMessageSenderIdAndRecipientGroupIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Group` at the end of the edge."""
  node: Group

  """Reads and enables pagination through a set of `Message`."""
  messagesByRecipientGroupId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): MessagesConnection!
}

"""A connection to a list of `Message` values, with data from `Message`."""
type UserMessagesByMessageSenderIdAndParentMessageIdManyToManyConnection {
  """A list of `Message` objects."""
  nodes: [Message]!

  """
  A list of edges which contains the `Message`, info from the `Message`, and the cursor to aid in pagination.
  """
  edges: [UserMessagesByMessageSenderIdAndParentMessageIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Message` you could get from the connection."""
  totalCount: Int!
}

"""A `Message` edge in the connection, with data from `Message`."""
type UserMessagesByMessageSenderIdAndParentMessageIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Message` at the end of the edge."""
  node: Message

  """Reads and enables pagination through a set of `Message`."""
  messagesByParentMessageId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): MessagesConnection!
}

"""A connection to a list of `User` values, with data from `Message`."""
type UserUsersByMessageRecipientIdAndSenderIdManyToManyConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User`, info from the `Message`, and the cursor to aid in pagination.
  """
  edges: [UserUsersByMessageRecipientIdAndSenderIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection, with data from `Message`."""
type UserUsersByMessageRecipientIdAndSenderIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User

  """Reads and enables pagination through a set of `Message`."""
  messagesBySenderId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): MessagesConnection!
}

"""A connection to a list of `Group` values, with data from `Message`."""
type UserGroupsByMessageRecipientIdAndRecipientGroupIdManyToManyConnection {
  """A list of `Group` objects."""
  nodes: [Group]!

  """
  A list of edges which contains the `Group`, info from the `Message`, and the cursor to aid in pagination.
  """
  edges: [UserGroupsByMessageRecipientIdAndRecipientGroupIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Group` you could get from the connection."""
  totalCount: Int!
}

"""A `Group` edge in the connection, with data from `Message`."""
type UserGroupsByMessageRecipientIdAndRecipientGroupIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Group` at the end of the edge."""
  node: Group

  """Reads and enables pagination through a set of `Message`."""
  messagesByRecipientGroupId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): MessagesConnection!
}

"""A connection to a list of `Message` values, with data from `Message`."""
type UserMessagesByMessageRecipientIdAndParentMessageIdManyToManyConnection {
  """A list of `Message` objects."""
  nodes: [Message]!

  """
  A list of edges which contains the `Message`, info from the `Message`, and the cursor to aid in pagination.
  """
  edges: [UserMessagesByMessageRecipientIdAndParentMessageIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Message` you could get from the connection."""
  totalCount: Int!
}

"""A `Message` edge in the connection, with data from `Message`."""
type UserMessagesByMessageRecipientIdAndParentMessageIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Message` at the end of the edge."""
  node: Message

  """Reads and enables pagination through a set of `Message`."""
  messagesByParentMessageId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): MessagesConnection!
}

"""
A connection to a list of `NotificationChannel` values, with data from `Notification`.
"""
type UserNotificationChannelsByNotificationRecipientIdAndChannelIdManyToManyConnection {
  """A list of `NotificationChannel` objects."""
  nodes: [NotificationChannel]!

  """
  A list of edges which contains the `NotificationChannel`, info from the `Notification`, and the cursor to aid in pagination.
  """
  edges: [UserNotificationChannelsByNotificationRecipientIdAndChannelIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `NotificationChannel` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `NotificationChannel` edge in the connection, with data from `Notification`.
"""
type UserNotificationChannelsByNotificationRecipientIdAndChannelIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NotificationChannel` at the end of the edge."""
  node: NotificationChannel

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByChannelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!
}

"""
A connection to a list of `Group` values, with data from `Notification`.
"""
type UserGroupsByNotificationRecipientIdAndRecipientGroupIdManyToManyConnection {
  """A list of `Group` objects."""
  nodes: [Group]!

  """
  A list of edges which contains the `Group`, info from the `Notification`, and the cursor to aid in pagination.
  """
  edges: [UserGroupsByNotificationRecipientIdAndRecipientGroupIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Group` you could get from the connection."""
  totalCount: Int!
}

"""A `Group` edge in the connection, with data from `Notification`."""
type UserGroupsByNotificationRecipientIdAndRecipientGroupIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Group` at the end of the edge."""
  node: Group

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByRecipientGroupId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!
}

"""A connection to a list of `Post` values, with data from `Post`."""
type UserPostsByPostAuthorIdAndParentPostIdManyToManyConnection {
  """A list of `Post` objects."""
  nodes: [Post]!

  """
  A list of edges which contains the `Post`, info from the `Post`, and the cursor to aid in pagination.
  """
  edges: [UserPostsByPostAuthorIdAndParentPostIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Post` you could get from the connection."""
  totalCount: Int!
}

"""A `Post` edge in the connection, with data from `Post`."""
type UserPostsByPostAuthorIdAndParentPostIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Post` at the end of the edge."""
  node: Post

  """Reads and enables pagination through a set of `Post`."""
  replies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter
  ): PostsConnection!
}

"""A connection to a list of `Language` values, with data from `Post`."""
type UserLanguagesByPostAuthorIdAndLanguageIdManyToManyConnection {
  """A list of `Language` objects."""
  nodes: [Language]!

  """
  A list of edges which contains the `Language`, info from the `Post`, and the cursor to aid in pagination.
  """
  edges: [UserLanguagesByPostAuthorIdAndLanguageIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Language` you could get from the connection."""
  totalCount: Int!
}

"""A `Language` edge in the connection, with data from `Post`."""
type UserLanguagesByPostAuthorIdAndLanguageIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Language` at the end of the edge."""
  node: Language

  """Reads and enables pagination through a set of `Post`."""
  posts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter
  ): PostsConnection!
}

"""A connection to a list of `Prompt` values, with data from `Post`."""
type UserPromptsByPostAuthorIdAndPromptIdManyToManyConnection {
  """A list of `Prompt` objects."""
  nodes: [Prompt]!

  """
  A list of edges which contains the `Prompt`, info from the `Post`, and the cursor to aid in pagination.
  """
  edges: [UserPromptsByPostAuthorIdAndPromptIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Prompt` you could get from the connection."""
  totalCount: Int!
}

"""A `Prompt` edge in the connection, with data from `Post`."""
type UserPromptsByPostAuthorIdAndPromptIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Prompt` at the end of the edge."""
  node: Prompt

  """Reads and enables pagination through a set of `Post`."""
  posts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter
  ): PostsConnection!
}

"""A connection to a list of `Post` values, with data from `PostLike`."""
type UserPostsByPostLikeUserIdAndPostIdManyToManyConnection {
  """A list of `Post` objects."""
  nodes: [Post]!

  """
  A list of edges which contains the `Post`, info from the `PostLike`, and the cursor to aid in pagination.
  """
  edges: [UserPostsByPostLikeUserIdAndPostIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Post` you could get from the connection."""
  totalCount: Int!
}

"""A `Post` edge in the connection, with data from `PostLike`."""
type UserPostsByPostLikeUserIdAndPostIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Post` at the end of the edge."""
  node: Post

  """Reads and enables pagination through a set of `PostLike`."""
  likes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PostLike`."""
    orderBy: [PostLikesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostLikeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostLikeFilter
  ): PostLikesConnection!
}

"""
A connection to a list of `Post` values, with data from `PostRecording`.
"""
type UserPostsByPostRecordingUserIdAndPostIdManyToManyConnection {
  """A list of `Post` objects."""
  nodes: [Post]!

  """
  A list of edges which contains the `Post`, info from the `PostRecording`, and the cursor to aid in pagination.
  """
  edges: [UserPostsByPostRecordingUserIdAndPostIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Post` you could get from the connection."""
  totalCount: Int!
}

"""A `Post` edge in the connection, with data from `PostRecording`."""
type UserPostsByPostRecordingUserIdAndPostIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Post` at the end of the edge."""
  node: Post

  """Reads and enables pagination through a set of `PostRecording`."""
  recordings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PostRecording`."""
    orderBy: [PostRecordingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostRecordingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostRecordingFilter
  ): PostRecordingsConnection!
}

"""A `GroupUser` edge in the connection."""
type GroupUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GroupUser` at the end of the edge."""
  node: GroupUser
}

"""A connection to a list of `LanguageSkillLevel` values."""
type LanguageSkillLevelsConnection {
  """A list of `LanguageSkillLevel` objects."""
  nodes: [LanguageSkillLevel]!

  """
  A list of edges which contains the `LanguageSkillLevel` and cursor to aid in pagination.
  """
  edges: [LanguageSkillLevelsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `LanguageSkillLevel` you could get from the connection.
  """
  totalCount: Int!
}

"""A `LanguageSkillLevel` edge in the connection."""
type LanguageSkillLevelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LanguageSkillLevel` at the end of the edge."""
  node: LanguageSkillLevel
}

"""A connection to a list of `Language` values."""
type LanguagesConnection {
  """A list of `Language` objects."""
  nodes: [Language]!

  """
  A list of edges which contains the `Language` and cursor to aid in pagination.
  """
  edges: [LanguagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Language` you could get from the connection."""
  totalCount: Int!
}

"""A `Language` edge in the connection."""
type LanguagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Language` at the end of the edge."""
  node: Language
}

"""A connection to a list of `NotificationChannel` values."""
type NotificationChannelsConnection {
  """A list of `NotificationChannel` objects."""
  nodes: [NotificationChannel]!

  """
  A list of edges which contains the `NotificationChannel` and cursor to aid in pagination.
  """
  edges: [NotificationChannelsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `NotificationChannel` you could get from the connection.
  """
  totalCount: Int!
}

"""A `NotificationChannel` edge in the connection."""
type NotificationChannelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NotificationChannel` at the end of the edge."""
  node: NotificationChannel
}

"""A connection to a list of `UserSession` values."""
type UserSessionsConnection {
  """A list of `UserSession` objects."""
  nodes: [UserSession]!

  """
  A list of edges which contains the `UserSession` and cursor to aid in pagination.
  """
  edges: [UserSessionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserSession` you could get from the connection."""
  totalCount: Int!
}

type UserSession implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  sid: String!
  sess: JSON!
  expire: Datetime!
  createdAt: Datetime!
}

"""A `UserSession` edge in the connection."""
type UserSessionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserSession` at the end of the edge."""
  node: UserSession
}

"""Methods to use when ordering `UserSession`."""
enum UserSessionsOrderBy {
  NATURAL
  SID_ASC
  SID_DESC
  SESS_ASC
  SESS_DESC
  EXPIRE_ASC
  EXPIRE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `UserSession` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserSessionCondition {
  """Checks for equality with the object’s `sid` field."""
  sid: String

  """Checks for equality with the object’s `sess` field."""
  sess: JSON

  """Checks for equality with the object’s `expire` field."""
  expire: Datetime

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `UserSession` object types. All fields are combined with a logical ‘and.’
"""
input UserSessionFilter {
  """Filter by the object’s `sid` field."""
  sid: StringFilter

  """Filter by the object’s `expire` field."""
  expire: DatetimeFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [UserSessionFilter!]

  """Checks for any expressions in this list."""
  or: [UserSessionFilter!]

  """Negates the expression."""
  not: UserSessionFilter
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `GroupUser`."""
  createGroupUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGroupUserInput!
  ): CreateGroupUserPayload

  """Creates a single `Group`."""
  createGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGroupInput!
  ): CreateGroupPayload

  """Creates a single `ChineseGuessCharacterQuestion`."""
  createChineseGuessCharacterQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChineseGuessCharacterQuestionInput!
  ): CreateChineseGuessCharacterQuestionPayload

  """Creates a single `InviteToken`."""
  createInviteToken(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateInviteTokenInput!
  ): CreateInviteTokenPayload

  """Creates a single `LanguageSkillLevel`."""
  createLanguageSkillLevel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLanguageSkillLevelInput!
  ): CreateLanguageSkillLevelPayload

  """Creates a single `Language`."""
  createLanguage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLanguageInput!
  ): CreateLanguagePayload

  """Creates a single `MessagePreview`."""
  createMessagePreview(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMessagePreviewInput!
  ): CreateMessagePreviewPayload

  """Creates a single `Message`."""
  createMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMessageInput!
  ): CreateMessagePayload

  """Creates a single `NotificationChannel`."""
  createNotificationChannel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNotificationChannelInput!
  ): CreateNotificationChannelPayload

  """Creates a single `Notification`."""
  createNotification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNotificationInput!
  ): CreateNotificationPayload

  """Creates a single `PostLike`."""
  createPostLike(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePostLikeInput!
  ): CreatePostLikePayload

  """Creates a single `PostRecording`."""
  createPostRecording(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePostRecordingInput!
  ): CreatePostRecordingPayload

  """Creates a single `Post`."""
  createPost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePostInput!
  ): CreatePostPayload

  """Creates a single `Prompt`."""
  createPrompt(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePromptInput!
  ): CreatePromptPayload

  """Creates a single `GermanRandomQuestion`."""
  createGermanRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGermanRandomQuestionInput!
  ): CreateGermanRandomQuestionPayload

  """Creates a single `EnglishRandomQuestion`."""
  createEnglishRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEnglishRandomQuestionInput!
  ): CreateEnglishRandomQuestionPayload

  """Creates a single `SpanishRandomQuestion`."""
  createSpanishRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSpanishRandomQuestionInput!
  ): CreateSpanishRandomQuestionPayload

  """Creates a single `FrenchRandomQuestion`."""
  createFrenchRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFrenchRandomQuestionInput!
  ): CreateFrenchRandomQuestionPayload

  """Creates a single `ItalianRandomQuestion`."""
  createItalianRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateItalianRandomQuestionInput!
  ): CreateItalianRandomQuestionPayload

  """Creates a single `JapaneseRandomQuestion`."""
  createJapaneseRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateJapaneseRandomQuestionInput!
  ): CreateJapaneseRandomQuestionPayload

  """Creates a single `KoreanRandomQuestion`."""
  createKoreanRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateKoreanRandomQuestionInput!
  ): CreateKoreanRandomQuestionPayload

  """Creates a single `PortugueseRandomQuestion`."""
  createPortugueseRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePortugueseRandomQuestionInput!
  ): CreatePortugueseRandomQuestionPayload

  """Creates a single `RussianRandomQuestion`."""
  createRussianRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRussianRandomQuestionInput!
  ): CreateRussianRandomQuestionPayload

  """Creates a single `ChineseRandomQuestion`."""
  createChineseRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChineseRandomQuestionInput!
  ): CreateChineseRandomQuestionPayload

  """Creates a single `UserDevice`."""
  createUserDevice(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserDeviceInput!
  ): CreateUserDevicePayload

  """Creates a single `UserLanguage`."""
  createUserLanguage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserLanguageInput!
  ): CreateUserLanguagePayload

  """Creates a single `UserSession`."""
  createUserSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserSessionInput!
  ): CreateUserSessionPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Creates a single `GermanWord`."""
  createGermanWord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGermanWordInput!
  ): CreateGermanWordPayload

  """Creates a single `EnglishWord`."""
  createEnglishWord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEnglishWordInput!
  ): CreateEnglishWordPayload

  """Creates a single `SpanishWord`."""
  createSpanishWord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSpanishWordInput!
  ): CreateSpanishWordPayload

  """Creates a single `FrenchWord`."""
  createFrenchWord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFrenchWordInput!
  ): CreateFrenchWordPayload

  """Creates a single `ItalianWord`."""
  createItalianWord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateItalianWordInput!
  ): CreateItalianWordPayload

  """Creates a single `PortugueseWord`."""
  createPortugueseWord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePortugueseWordInput!
  ): CreatePortugueseWordPayload

  """Creates a single `RussianWord`."""
  createRussianWord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRussianWordInput!
  ): CreateRussianWordPayload

  """Creates a single `GermanWouldYouRatherQuestion`."""
  createGermanWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGermanWouldYouRatherQuestionInput!
  ): CreateGermanWouldYouRatherQuestionPayload

  """Creates a single `EnglishWouldYouRatherQuestion`."""
  createEnglishWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEnglishWouldYouRatherQuestionInput!
  ): CreateEnglishWouldYouRatherQuestionPayload

  """Creates a single `SpanishWouldYouRatherQuestion`."""
  createSpanishWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSpanishWouldYouRatherQuestionInput!
  ): CreateSpanishWouldYouRatherQuestionPayload

  """Creates a single `FrenchWouldYouRatherQuestion`."""
  createFrenchWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFrenchWouldYouRatherQuestionInput!
  ): CreateFrenchWouldYouRatherQuestionPayload

  """Creates a single `ItalianWouldYouRatherQuestion`."""
  createItalianWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateItalianWouldYouRatherQuestionInput!
  ): CreateItalianWouldYouRatherQuestionPayload

  """Creates a single `JapaneseWouldYouRatherQuestion`."""
  createJapaneseWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateJapaneseWouldYouRatherQuestionInput!
  ): CreateJapaneseWouldYouRatherQuestionPayload

  """Creates a single `KoreanWouldYouRatherQuestion`."""
  createKoreanWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateKoreanWouldYouRatherQuestionInput!
  ): CreateKoreanWouldYouRatherQuestionPayload

  """Creates a single `PortugueseWouldYouRatherQuestion`."""
  createPortugueseWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePortugueseWouldYouRatherQuestionInput!
  ): CreatePortugueseWouldYouRatherQuestionPayload

  """Creates a single `RussianWouldYouRatherQuestion`."""
  createRussianWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRussianWouldYouRatherQuestionInput!
  ): CreateRussianWouldYouRatherQuestionPayload

  """Creates a single `ChineseWouldYouRatherQuestion`."""
  createChineseWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChineseWouldYouRatherQuestionInput!
  ): CreateChineseWouldYouRatherQuestionPayload

  """Updates a single `GroupUser` using its globally unique id and a patch."""
  updateGroupUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupUserByNodeIdInput!
  ): UpdateGroupUserPayload

  """Updates a single `GroupUser` using a unique key and a patch."""
  updateGroupUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupUserInput!
  ): UpdateGroupUserPayload

  """Updates a single `Group` using its globally unique id and a patch."""
  updateGroupByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupByNodeIdInput!
  ): UpdateGroupPayload

  """Updates a single `Group` using a unique key and a patch."""
  updateGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupInput!
  ): UpdateGroupPayload

  """Updates a single `Group` using a unique key and a patch."""
  updateGroupByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupByUuidInput!
  ): UpdateGroupPayload

  """
  Updates a single `ChineseGuessCharacterQuestion` using its globally unique id and a patch.
  """
  updateChineseGuessCharacterQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChineseGuessCharacterQuestionByNodeIdInput!
  ): UpdateChineseGuessCharacterQuestionPayload

  """
  Updates a single `ChineseGuessCharacterQuestion` using a unique key and a patch.
  """
  updateChineseGuessCharacterQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChineseGuessCharacterQuestionInput!
  ): UpdateChineseGuessCharacterQuestionPayload

  """
  Updates a single `ChineseGuessCharacterQuestion` using a unique key and a patch.
  """
  updateChineseGuessCharacterQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChineseGuessCharacterQuestionByUuidInput!
  ): UpdateChineseGuessCharacterQuestionPayload

  """
  Updates a single `InviteToken` using its globally unique id and a patch.
  """
  updateInviteTokenByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInviteTokenByNodeIdInput!
  ): UpdateInviteTokenPayload

  """Updates a single `InviteToken` using a unique key and a patch."""
  updateInviteToken(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInviteTokenInput!
  ): UpdateInviteTokenPayload

  """
  Updates a single `LanguageSkillLevel` using its globally unique id and a patch.
  """
  updateLanguageSkillLevelByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLanguageSkillLevelByNodeIdInput!
  ): UpdateLanguageSkillLevelPayload

  """Updates a single `LanguageSkillLevel` using a unique key and a patch."""
  updateLanguageSkillLevel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLanguageSkillLevelInput!
  ): UpdateLanguageSkillLevelPayload

  """Updates a single `Language` using its globally unique id and a patch."""
  updateLanguageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLanguageByNodeIdInput!
  ): UpdateLanguagePayload

  """Updates a single `Language` using a unique key and a patch."""
  updateLanguage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLanguageInput!
  ): UpdateLanguagePayload

  """Updates a single `Language` using a unique key and a patch."""
  updateLanguageByAlpha2(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLanguageByAlpha2Input!
  ): UpdateLanguagePayload

  """Updates a single `Language` using a unique key and a patch."""
  updateLanguageByEnglishName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLanguageByEnglishNameInput!
  ): UpdateLanguagePayload

  """
  Updates a single `MessagePreview` using its globally unique id and a patch.
  """
  updateMessagePreviewByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMessagePreviewByNodeIdInput!
  ): UpdateMessagePreviewPayload

  """Updates a single `MessagePreview` using a unique key and a patch."""
  updateMessagePreview(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMessagePreviewInput!
  ): UpdateMessagePreviewPayload

  """Updates a single `MessagePreview` using a unique key and a patch."""
  updateMessagePreviewByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMessagePreviewByUuidInput!
  ): UpdateMessagePreviewPayload

  """Updates a single `Message` using its globally unique id and a patch."""
  updateMessageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMessageByNodeIdInput!
  ): UpdateMessagePayload

  """Updates a single `Message` using a unique key and a patch."""
  updateMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMessageInput!
  ): UpdateMessagePayload

  """Updates a single `Message` using a unique key and a patch."""
  updateMessageByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMessageByUuidInput!
  ): UpdateMessagePayload

  """
  Updates a single `NotificationChannel` using its globally unique id and a patch.
  """
  updateNotificationChannelByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNotificationChannelByNodeIdInput!
  ): UpdateNotificationChannelPayload

  """Updates a single `NotificationChannel` using a unique key and a patch."""
  updateNotificationChannel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNotificationChannelInput!
  ): UpdateNotificationChannelPayload

  """Updates a single `NotificationChannel` using a unique key and a patch."""
  updateNotificationChannelByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNotificationChannelByUuidInput!
  ): UpdateNotificationChannelPayload

  """Updates a single `NotificationChannel` using a unique key and a patch."""
  updateNotificationChannelByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNotificationChannelByNameInput!
  ): UpdateNotificationChannelPayload

  """
  Updates a single `Notification` using its globally unique id and a patch.
  """
  updateNotificationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNotificationByNodeIdInput!
  ): UpdateNotificationPayload

  """Updates a single `Notification` using a unique key and a patch."""
  updateNotification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNotificationInput!
  ): UpdateNotificationPayload

  """Updates a single `Notification` using a unique key and a patch."""
  updateNotificationByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNotificationByUuidInput!
  ): UpdateNotificationPayload

  """Updates a single `PostLike` using its globally unique id and a patch."""
  updatePostLikeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePostLikeByNodeIdInput!
  ): UpdatePostLikePayload

  """Updates a single `PostLike` using a unique key and a patch."""
  updatePostLike(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePostLikeInput!
  ): UpdatePostLikePayload

  """
  Updates a single `PostRecording` using its globally unique id and a patch.
  """
  updatePostRecordingByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePostRecordingByNodeIdInput!
  ): UpdatePostRecordingPayload

  """Updates a single `PostRecording` using a unique key and a patch."""
  updatePostRecording(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePostRecordingInput!
  ): UpdatePostRecordingPayload

  """Updates a single `PostRecording` using a unique key and a patch."""
  updatePostRecordingByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePostRecordingByUuidInput!
  ): UpdatePostRecordingPayload

  """Updates a single `Post` using its globally unique id and a patch."""
  updatePostByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePostByNodeIdInput!
  ): UpdatePostPayload

  """Updates a single `Post` using a unique key and a patch."""
  updatePost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePostInput!
  ): UpdatePostPayload

  """Updates a single `Post` using a unique key and a patch."""
  updatePostByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePostByUuidInput!
  ): UpdatePostPayload

  """Updates a single `Prompt` using its globally unique id and a patch."""
  updatePromptByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePromptByNodeIdInput!
  ): UpdatePromptPayload

  """Updates a single `Prompt` using a unique key and a patch."""
  updatePrompt(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePromptInput!
  ): UpdatePromptPayload

  """Updates a single `Prompt` using a unique key and a patch."""
  updatePromptByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePromptByUuidInput!
  ): UpdatePromptPayload

  """
  Updates a single `GermanRandomQuestion` using its globally unique id and a patch.
  """
  updateGermanRandomQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGermanRandomQuestionByNodeIdInput!
  ): UpdateGermanRandomQuestionPayload

  """
  Updates a single `GermanRandomQuestion` using a unique key and a patch.
  """
  updateGermanRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGermanRandomQuestionInput!
  ): UpdateGermanRandomQuestionPayload

  """
  Updates a single `GermanRandomQuestion` using a unique key and a patch.
  """
  updateGermanRandomQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGermanRandomQuestionByUuidInput!
  ): UpdateGermanRandomQuestionPayload

  """
  Updates a single `EnglishRandomQuestion` using its globally unique id and a patch.
  """
  updateEnglishRandomQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEnglishRandomQuestionByNodeIdInput!
  ): UpdateEnglishRandomQuestionPayload

  """
  Updates a single `EnglishRandomQuestion` using a unique key and a patch.
  """
  updateEnglishRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEnglishRandomQuestionInput!
  ): UpdateEnglishRandomQuestionPayload

  """
  Updates a single `EnglishRandomQuestion` using a unique key and a patch.
  """
  updateEnglishRandomQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEnglishRandomQuestionByUuidInput!
  ): UpdateEnglishRandomQuestionPayload

  """
  Updates a single `SpanishRandomQuestion` using its globally unique id and a patch.
  """
  updateSpanishRandomQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSpanishRandomQuestionByNodeIdInput!
  ): UpdateSpanishRandomQuestionPayload

  """
  Updates a single `SpanishRandomQuestion` using a unique key and a patch.
  """
  updateSpanishRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSpanishRandomQuestionInput!
  ): UpdateSpanishRandomQuestionPayload

  """
  Updates a single `SpanishRandomQuestion` using a unique key and a patch.
  """
  updateSpanishRandomQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSpanishRandomQuestionByUuidInput!
  ): UpdateSpanishRandomQuestionPayload

  """
  Updates a single `FrenchRandomQuestion` using its globally unique id and a patch.
  """
  updateFrenchRandomQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFrenchRandomQuestionByNodeIdInput!
  ): UpdateFrenchRandomQuestionPayload

  """
  Updates a single `FrenchRandomQuestion` using a unique key and a patch.
  """
  updateFrenchRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFrenchRandomQuestionInput!
  ): UpdateFrenchRandomQuestionPayload

  """
  Updates a single `FrenchRandomQuestion` using a unique key and a patch.
  """
  updateFrenchRandomQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFrenchRandomQuestionByUuidInput!
  ): UpdateFrenchRandomQuestionPayload

  """
  Updates a single `ItalianRandomQuestion` using its globally unique id and a patch.
  """
  updateItalianRandomQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItalianRandomQuestionByNodeIdInput!
  ): UpdateItalianRandomQuestionPayload

  """
  Updates a single `ItalianRandomQuestion` using a unique key and a patch.
  """
  updateItalianRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItalianRandomQuestionInput!
  ): UpdateItalianRandomQuestionPayload

  """
  Updates a single `ItalianRandomQuestion` using a unique key and a patch.
  """
  updateItalianRandomQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItalianRandomQuestionByUuidInput!
  ): UpdateItalianRandomQuestionPayload

  """
  Updates a single `JapaneseRandomQuestion` using its globally unique id and a patch.
  """
  updateJapaneseRandomQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateJapaneseRandomQuestionByNodeIdInput!
  ): UpdateJapaneseRandomQuestionPayload

  """
  Updates a single `JapaneseRandomQuestion` using a unique key and a patch.
  """
  updateJapaneseRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateJapaneseRandomQuestionInput!
  ): UpdateJapaneseRandomQuestionPayload

  """
  Updates a single `JapaneseRandomQuestion` using a unique key and a patch.
  """
  updateJapaneseRandomQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateJapaneseRandomQuestionByUuidInput!
  ): UpdateJapaneseRandomQuestionPayload

  """
  Updates a single `KoreanRandomQuestion` using its globally unique id and a patch.
  """
  updateKoreanRandomQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateKoreanRandomQuestionByNodeIdInput!
  ): UpdateKoreanRandomQuestionPayload

  """
  Updates a single `KoreanRandomQuestion` using a unique key and a patch.
  """
  updateKoreanRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateKoreanRandomQuestionInput!
  ): UpdateKoreanRandomQuestionPayload

  """
  Updates a single `KoreanRandomQuestion` using a unique key and a patch.
  """
  updateKoreanRandomQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateKoreanRandomQuestionByUuidInput!
  ): UpdateKoreanRandomQuestionPayload

  """
  Updates a single `PortugueseRandomQuestion` using its globally unique id and a patch.
  """
  updatePortugueseRandomQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePortugueseRandomQuestionByNodeIdInput!
  ): UpdatePortugueseRandomQuestionPayload

  """
  Updates a single `PortugueseRandomQuestion` using a unique key and a patch.
  """
  updatePortugueseRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePortugueseRandomQuestionInput!
  ): UpdatePortugueseRandomQuestionPayload

  """
  Updates a single `PortugueseRandomQuestion` using a unique key and a patch.
  """
  updatePortugueseRandomQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePortugueseRandomQuestionByUuidInput!
  ): UpdatePortugueseRandomQuestionPayload

  """
  Updates a single `RussianRandomQuestion` using its globally unique id and a patch.
  """
  updateRussianRandomQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRussianRandomQuestionByNodeIdInput!
  ): UpdateRussianRandomQuestionPayload

  """
  Updates a single `RussianRandomQuestion` using a unique key and a patch.
  """
  updateRussianRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRussianRandomQuestionInput!
  ): UpdateRussianRandomQuestionPayload

  """
  Updates a single `RussianRandomQuestion` using a unique key and a patch.
  """
  updateRussianRandomQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRussianRandomQuestionByUuidInput!
  ): UpdateRussianRandomQuestionPayload

  """
  Updates a single `ChineseRandomQuestion` using its globally unique id and a patch.
  """
  updateChineseRandomQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChineseRandomQuestionByNodeIdInput!
  ): UpdateChineseRandomQuestionPayload

  """
  Updates a single `ChineseRandomQuestion` using a unique key and a patch.
  """
  updateChineseRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChineseRandomQuestionInput!
  ): UpdateChineseRandomQuestionPayload

  """
  Updates a single `ChineseRandomQuestion` using a unique key and a patch.
  """
  updateChineseRandomQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChineseRandomQuestionByUuidInput!
  ): UpdateChineseRandomQuestionPayload

  """
  Updates a single `UserDevice` using its globally unique id and a patch.
  """
  updateUserDeviceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserDeviceByNodeIdInput!
  ): UpdateUserDevicePayload

  """Updates a single `UserDevice` using a unique key and a patch."""
  updateUserDevice(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserDeviceInput!
  ): UpdateUserDevicePayload

  """Updates a single `UserDevice` using a unique key and a patch."""
  updateUserDeviceByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserDeviceByUuidInput!
  ): UpdateUserDevicePayload

  """Updates a single `UserDevice` using a unique key and a patch."""
  updateUserDeviceByFcmToken(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserDeviceByFcmTokenInput!
  ): UpdateUserDevicePayload

  """
  Updates a single `UserLanguage` using its globally unique id and a patch.
  """
  updateUserLanguageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserLanguageByNodeIdInput!
  ): UpdateUserLanguagePayload

  """Updates a single `UserLanguage` using a unique key and a patch."""
  updateUserLanguage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserLanguageInput!
  ): UpdateUserLanguagePayload

  """
  Updates a single `UserSession` using its globally unique id and a patch.
  """
  updateUserSessionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserSessionByNodeIdInput!
  ): UpdateUserSessionPayload

  """Updates a single `UserSession` using a unique key and a patch."""
  updateUserSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserSessionInput!
  ): UpdateUserSessionPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNodeIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByUsernameInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByEmailInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByUuidInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByEmailUnsubscribeToken(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByEmailUnsubscribeTokenInput!
  ): UpdateUserPayload

  """
  Updates a single `GermanWord` using its globally unique id and a patch.
  """
  updateGermanWordByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGermanWordByNodeIdInput!
  ): UpdateGermanWordPayload

  """Updates a single `GermanWord` using a unique key and a patch."""
  updateGermanWord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGermanWordInput!
  ): UpdateGermanWordPayload

  """Updates a single `GermanWord` using a unique key and a patch."""
  updateGermanWordByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGermanWordByUuidInput!
  ): UpdateGermanWordPayload

  """
  Updates a single `EnglishWord` using its globally unique id and a patch.
  """
  updateEnglishWordByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEnglishWordByNodeIdInput!
  ): UpdateEnglishWordPayload

  """Updates a single `EnglishWord` using a unique key and a patch."""
  updateEnglishWord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEnglishWordInput!
  ): UpdateEnglishWordPayload

  """Updates a single `EnglishWord` using a unique key and a patch."""
  updateEnglishWordByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEnglishWordByUuidInput!
  ): UpdateEnglishWordPayload

  """
  Updates a single `SpanishWord` using its globally unique id and a patch.
  """
  updateSpanishWordByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSpanishWordByNodeIdInput!
  ): UpdateSpanishWordPayload

  """Updates a single `SpanishWord` using a unique key and a patch."""
  updateSpanishWord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSpanishWordInput!
  ): UpdateSpanishWordPayload

  """Updates a single `SpanishWord` using a unique key and a patch."""
  updateSpanishWordByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSpanishWordByUuidInput!
  ): UpdateSpanishWordPayload

  """
  Updates a single `FrenchWord` using its globally unique id and a patch.
  """
  updateFrenchWordByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFrenchWordByNodeIdInput!
  ): UpdateFrenchWordPayload

  """Updates a single `FrenchWord` using a unique key and a patch."""
  updateFrenchWord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFrenchWordInput!
  ): UpdateFrenchWordPayload

  """Updates a single `FrenchWord` using a unique key and a patch."""
  updateFrenchWordByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFrenchWordByUuidInput!
  ): UpdateFrenchWordPayload

  """
  Updates a single `ItalianWord` using its globally unique id and a patch.
  """
  updateItalianWordByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItalianWordByNodeIdInput!
  ): UpdateItalianWordPayload

  """Updates a single `ItalianWord` using a unique key and a patch."""
  updateItalianWord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItalianWordInput!
  ): UpdateItalianWordPayload

  """Updates a single `ItalianWord` using a unique key and a patch."""
  updateItalianWordByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItalianWordByUuidInput!
  ): UpdateItalianWordPayload

  """
  Updates a single `PortugueseWord` using its globally unique id and a patch.
  """
  updatePortugueseWordByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePortugueseWordByNodeIdInput!
  ): UpdatePortugueseWordPayload

  """Updates a single `PortugueseWord` using a unique key and a patch."""
  updatePortugueseWord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePortugueseWordInput!
  ): UpdatePortugueseWordPayload

  """Updates a single `PortugueseWord` using a unique key and a patch."""
  updatePortugueseWordByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePortugueseWordByUuidInput!
  ): UpdatePortugueseWordPayload

  """
  Updates a single `RussianWord` using its globally unique id and a patch.
  """
  updateRussianWordByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRussianWordByNodeIdInput!
  ): UpdateRussianWordPayload

  """Updates a single `RussianWord` using a unique key and a patch."""
  updateRussianWord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRussianWordInput!
  ): UpdateRussianWordPayload

  """Updates a single `RussianWord` using a unique key and a patch."""
  updateRussianWordByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRussianWordByUuidInput!
  ): UpdateRussianWordPayload

  """
  Updates a single `GermanWouldYouRatherQuestion` using its globally unique id and a patch.
  """
  updateGermanWouldYouRatherQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGermanWouldYouRatherQuestionByNodeIdInput!
  ): UpdateGermanWouldYouRatherQuestionPayload

  """
  Updates a single `GermanWouldYouRatherQuestion` using a unique key and a patch.
  """
  updateGermanWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGermanWouldYouRatherQuestionInput!
  ): UpdateGermanWouldYouRatherQuestionPayload

  """
  Updates a single `GermanWouldYouRatherQuestion` using a unique key and a patch.
  """
  updateGermanWouldYouRatherQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGermanWouldYouRatherQuestionByUuidInput!
  ): UpdateGermanWouldYouRatherQuestionPayload

  """
  Updates a single `EnglishWouldYouRatherQuestion` using its globally unique id and a patch.
  """
  updateEnglishWouldYouRatherQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEnglishWouldYouRatherQuestionByNodeIdInput!
  ): UpdateEnglishWouldYouRatherQuestionPayload

  """
  Updates a single `EnglishWouldYouRatherQuestion` using a unique key and a patch.
  """
  updateEnglishWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEnglishWouldYouRatherQuestionInput!
  ): UpdateEnglishWouldYouRatherQuestionPayload

  """
  Updates a single `EnglishWouldYouRatherQuestion` using a unique key and a patch.
  """
  updateEnglishWouldYouRatherQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEnglishWouldYouRatherQuestionByUuidInput!
  ): UpdateEnglishWouldYouRatherQuestionPayload

  """
  Updates a single `SpanishWouldYouRatherQuestion` using its globally unique id and a patch.
  """
  updateSpanishWouldYouRatherQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSpanishWouldYouRatherQuestionByNodeIdInput!
  ): UpdateSpanishWouldYouRatherQuestionPayload

  """
  Updates a single `SpanishWouldYouRatherQuestion` using a unique key and a patch.
  """
  updateSpanishWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSpanishWouldYouRatherQuestionInput!
  ): UpdateSpanishWouldYouRatherQuestionPayload

  """
  Updates a single `SpanishWouldYouRatherQuestion` using a unique key and a patch.
  """
  updateSpanishWouldYouRatherQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSpanishWouldYouRatherQuestionByUuidInput!
  ): UpdateSpanishWouldYouRatherQuestionPayload

  """
  Updates a single `FrenchWouldYouRatherQuestion` using its globally unique id and a patch.
  """
  updateFrenchWouldYouRatherQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFrenchWouldYouRatherQuestionByNodeIdInput!
  ): UpdateFrenchWouldYouRatherQuestionPayload

  """
  Updates a single `FrenchWouldYouRatherQuestion` using a unique key and a patch.
  """
  updateFrenchWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFrenchWouldYouRatherQuestionInput!
  ): UpdateFrenchWouldYouRatherQuestionPayload

  """
  Updates a single `FrenchWouldYouRatherQuestion` using a unique key and a patch.
  """
  updateFrenchWouldYouRatherQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFrenchWouldYouRatherQuestionByUuidInput!
  ): UpdateFrenchWouldYouRatherQuestionPayload

  """
  Updates a single `ItalianWouldYouRatherQuestion` using its globally unique id and a patch.
  """
  updateItalianWouldYouRatherQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItalianWouldYouRatherQuestionByNodeIdInput!
  ): UpdateItalianWouldYouRatherQuestionPayload

  """
  Updates a single `ItalianWouldYouRatherQuestion` using a unique key and a patch.
  """
  updateItalianWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItalianWouldYouRatherQuestionInput!
  ): UpdateItalianWouldYouRatherQuestionPayload

  """
  Updates a single `ItalianWouldYouRatherQuestion` using a unique key and a patch.
  """
  updateItalianWouldYouRatherQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItalianWouldYouRatherQuestionByUuidInput!
  ): UpdateItalianWouldYouRatherQuestionPayload

  """
  Updates a single `JapaneseWouldYouRatherQuestion` using its globally unique id and a patch.
  """
  updateJapaneseWouldYouRatherQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateJapaneseWouldYouRatherQuestionByNodeIdInput!
  ): UpdateJapaneseWouldYouRatherQuestionPayload

  """
  Updates a single `JapaneseWouldYouRatherQuestion` using a unique key and a patch.
  """
  updateJapaneseWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateJapaneseWouldYouRatherQuestionInput!
  ): UpdateJapaneseWouldYouRatherQuestionPayload

  """
  Updates a single `JapaneseWouldYouRatherQuestion` using a unique key and a patch.
  """
  updateJapaneseWouldYouRatherQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateJapaneseWouldYouRatherQuestionByUuidInput!
  ): UpdateJapaneseWouldYouRatherQuestionPayload

  """
  Updates a single `KoreanWouldYouRatherQuestion` using its globally unique id and a patch.
  """
  updateKoreanWouldYouRatherQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateKoreanWouldYouRatherQuestionByNodeIdInput!
  ): UpdateKoreanWouldYouRatherQuestionPayload

  """
  Updates a single `KoreanWouldYouRatherQuestion` using a unique key and a patch.
  """
  updateKoreanWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateKoreanWouldYouRatherQuestionInput!
  ): UpdateKoreanWouldYouRatherQuestionPayload

  """
  Updates a single `KoreanWouldYouRatherQuestion` using a unique key and a patch.
  """
  updateKoreanWouldYouRatherQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateKoreanWouldYouRatherQuestionByUuidInput!
  ): UpdateKoreanWouldYouRatherQuestionPayload

  """
  Updates a single `PortugueseWouldYouRatherQuestion` using its globally unique id and a patch.
  """
  updatePortugueseWouldYouRatherQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePortugueseWouldYouRatherQuestionByNodeIdInput!
  ): UpdatePortugueseWouldYouRatherQuestionPayload

  """
  Updates a single `PortugueseWouldYouRatherQuestion` using a unique key and a patch.
  """
  updatePortugueseWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePortugueseWouldYouRatherQuestionInput!
  ): UpdatePortugueseWouldYouRatherQuestionPayload

  """
  Updates a single `PortugueseWouldYouRatherQuestion` using a unique key and a patch.
  """
  updatePortugueseWouldYouRatherQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePortugueseWouldYouRatherQuestionByUuidInput!
  ): UpdatePortugueseWouldYouRatherQuestionPayload

  """
  Updates a single `RussianWouldYouRatherQuestion` using its globally unique id and a patch.
  """
  updateRussianWouldYouRatherQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRussianWouldYouRatherQuestionByNodeIdInput!
  ): UpdateRussianWouldYouRatherQuestionPayload

  """
  Updates a single `RussianWouldYouRatherQuestion` using a unique key and a patch.
  """
  updateRussianWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRussianWouldYouRatherQuestionInput!
  ): UpdateRussianWouldYouRatherQuestionPayload

  """
  Updates a single `RussianWouldYouRatherQuestion` using a unique key and a patch.
  """
  updateRussianWouldYouRatherQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRussianWouldYouRatherQuestionByUuidInput!
  ): UpdateRussianWouldYouRatherQuestionPayload

  """
  Updates a single `ChineseWouldYouRatherQuestion` using its globally unique id and a patch.
  """
  updateChineseWouldYouRatherQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChineseWouldYouRatherQuestionByNodeIdInput!
  ): UpdateChineseWouldYouRatherQuestionPayload

  """
  Updates a single `ChineseWouldYouRatherQuestion` using a unique key and a patch.
  """
  updateChineseWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChineseWouldYouRatherQuestionInput!
  ): UpdateChineseWouldYouRatherQuestionPayload

  """
  Updates a single `ChineseWouldYouRatherQuestion` using a unique key and a patch.
  """
  updateChineseWouldYouRatherQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChineseWouldYouRatherQuestionByUuidInput!
  ): UpdateChineseWouldYouRatherQuestionPayload

  """Deletes a single `GroupUser` using its globally unique id."""
  deleteGroupUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupUserByNodeIdInput!
  ): DeleteGroupUserPayload

  """Deletes a single `GroupUser` using a unique key."""
  deleteGroupUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupUserInput!
  ): DeleteGroupUserPayload

  """Deletes a single `Group` using its globally unique id."""
  deleteGroupByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupByNodeIdInput!
  ): DeleteGroupPayload

  """Deletes a single `Group` using a unique key."""
  deleteGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupInput!
  ): DeleteGroupPayload

  """Deletes a single `Group` using a unique key."""
  deleteGroupByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupByUuidInput!
  ): DeleteGroupPayload

  """
  Deletes a single `ChineseGuessCharacterQuestion` using its globally unique id.
  """
  deleteChineseGuessCharacterQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChineseGuessCharacterQuestionByNodeIdInput!
  ): DeleteChineseGuessCharacterQuestionPayload

  """Deletes a single `ChineseGuessCharacterQuestion` using a unique key."""
  deleteChineseGuessCharacterQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChineseGuessCharacterQuestionInput!
  ): DeleteChineseGuessCharacterQuestionPayload

  """Deletes a single `ChineseGuessCharacterQuestion` using a unique key."""
  deleteChineseGuessCharacterQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChineseGuessCharacterQuestionByUuidInput!
  ): DeleteChineseGuessCharacterQuestionPayload

  """Deletes a single `InviteToken` using its globally unique id."""
  deleteInviteTokenByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInviteTokenByNodeIdInput!
  ): DeleteInviteTokenPayload

  """Deletes a single `InviteToken` using a unique key."""
  deleteInviteToken(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInviteTokenInput!
  ): DeleteInviteTokenPayload

  """Deletes a single `LanguageSkillLevel` using its globally unique id."""
  deleteLanguageSkillLevelByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLanguageSkillLevelByNodeIdInput!
  ): DeleteLanguageSkillLevelPayload

  """Deletes a single `LanguageSkillLevel` using a unique key."""
  deleteLanguageSkillLevel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLanguageSkillLevelInput!
  ): DeleteLanguageSkillLevelPayload

  """Deletes a single `Language` using its globally unique id."""
  deleteLanguageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLanguageByNodeIdInput!
  ): DeleteLanguagePayload

  """Deletes a single `Language` using a unique key."""
  deleteLanguage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLanguageInput!
  ): DeleteLanguagePayload

  """Deletes a single `Language` using a unique key."""
  deleteLanguageByAlpha2(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLanguageByAlpha2Input!
  ): DeleteLanguagePayload

  """Deletes a single `Language` using a unique key."""
  deleteLanguageByEnglishName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLanguageByEnglishNameInput!
  ): DeleteLanguagePayload

  """Deletes a single `MessagePreview` using its globally unique id."""
  deleteMessagePreviewByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMessagePreviewByNodeIdInput!
  ): DeleteMessagePreviewPayload

  """Deletes a single `MessagePreview` using a unique key."""
  deleteMessagePreview(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMessagePreviewInput!
  ): DeleteMessagePreviewPayload

  """Deletes a single `MessagePreview` using a unique key."""
  deleteMessagePreviewByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMessagePreviewByUuidInput!
  ): DeleteMessagePreviewPayload

  """Deletes a single `Message` using its globally unique id."""
  deleteMessageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMessageByNodeIdInput!
  ): DeleteMessagePayload

  """Deletes a single `Message` using a unique key."""
  deleteMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMessageInput!
  ): DeleteMessagePayload

  """Deletes a single `Message` using a unique key."""
  deleteMessageByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMessageByUuidInput!
  ): DeleteMessagePayload

  """Deletes a single `NotificationChannel` using its globally unique id."""
  deleteNotificationChannelByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNotificationChannelByNodeIdInput!
  ): DeleteNotificationChannelPayload

  """Deletes a single `NotificationChannel` using a unique key."""
  deleteNotificationChannel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNotificationChannelInput!
  ): DeleteNotificationChannelPayload

  """Deletes a single `NotificationChannel` using a unique key."""
  deleteNotificationChannelByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNotificationChannelByUuidInput!
  ): DeleteNotificationChannelPayload

  """Deletes a single `NotificationChannel` using a unique key."""
  deleteNotificationChannelByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNotificationChannelByNameInput!
  ): DeleteNotificationChannelPayload

  """Deletes a single `Notification` using its globally unique id."""
  deleteNotificationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNotificationByNodeIdInput!
  ): DeleteNotificationPayload

  """Deletes a single `Notification` using a unique key."""
  deleteNotification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNotificationInput!
  ): DeleteNotificationPayload

  """Deletes a single `Notification` using a unique key."""
  deleteNotificationByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNotificationByUuidInput!
  ): DeleteNotificationPayload

  """Deletes a single `PostLike` using its globally unique id."""
  deletePostLikeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostLikeByNodeIdInput!
  ): DeletePostLikePayload

  """Deletes a single `PostLike` using a unique key."""
  deletePostLike(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostLikeInput!
  ): DeletePostLikePayload

  """Deletes a single `PostRecording` using its globally unique id."""
  deletePostRecordingByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostRecordingByNodeIdInput!
  ): DeletePostRecordingPayload

  """Deletes a single `PostRecording` using a unique key."""
  deletePostRecording(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostRecordingInput!
  ): DeletePostRecordingPayload

  """Deletes a single `PostRecording` using a unique key."""
  deletePostRecordingByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostRecordingByUuidInput!
  ): DeletePostRecordingPayload

  """Deletes a single `Post` using its globally unique id."""
  deletePostByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostByNodeIdInput!
  ): DeletePostPayload

  """Deletes a single `Post` using a unique key."""
  deletePost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostInput!
  ): DeletePostPayload

  """Deletes a single `Post` using a unique key."""
  deletePostByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostByUuidInput!
  ): DeletePostPayload

  """Deletes a single `Prompt` using its globally unique id."""
  deletePromptByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePromptByNodeIdInput!
  ): DeletePromptPayload

  """Deletes a single `Prompt` using a unique key."""
  deletePrompt(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePromptInput!
  ): DeletePromptPayload

  """Deletes a single `Prompt` using a unique key."""
  deletePromptByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePromptByUuidInput!
  ): DeletePromptPayload

  """Deletes a single `GermanRandomQuestion` using its globally unique id."""
  deleteGermanRandomQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGermanRandomQuestionByNodeIdInput!
  ): DeleteGermanRandomQuestionPayload

  """Deletes a single `GermanRandomQuestion` using a unique key."""
  deleteGermanRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGermanRandomQuestionInput!
  ): DeleteGermanRandomQuestionPayload

  """Deletes a single `GermanRandomQuestion` using a unique key."""
  deleteGermanRandomQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGermanRandomQuestionByUuidInput!
  ): DeleteGermanRandomQuestionPayload

  """Deletes a single `EnglishRandomQuestion` using its globally unique id."""
  deleteEnglishRandomQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEnglishRandomQuestionByNodeIdInput!
  ): DeleteEnglishRandomQuestionPayload

  """Deletes a single `EnglishRandomQuestion` using a unique key."""
  deleteEnglishRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEnglishRandomQuestionInput!
  ): DeleteEnglishRandomQuestionPayload

  """Deletes a single `EnglishRandomQuestion` using a unique key."""
  deleteEnglishRandomQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEnglishRandomQuestionByUuidInput!
  ): DeleteEnglishRandomQuestionPayload

  """Deletes a single `SpanishRandomQuestion` using its globally unique id."""
  deleteSpanishRandomQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSpanishRandomQuestionByNodeIdInput!
  ): DeleteSpanishRandomQuestionPayload

  """Deletes a single `SpanishRandomQuestion` using a unique key."""
  deleteSpanishRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSpanishRandomQuestionInput!
  ): DeleteSpanishRandomQuestionPayload

  """Deletes a single `SpanishRandomQuestion` using a unique key."""
  deleteSpanishRandomQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSpanishRandomQuestionByUuidInput!
  ): DeleteSpanishRandomQuestionPayload

  """Deletes a single `FrenchRandomQuestion` using its globally unique id."""
  deleteFrenchRandomQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFrenchRandomQuestionByNodeIdInput!
  ): DeleteFrenchRandomQuestionPayload

  """Deletes a single `FrenchRandomQuestion` using a unique key."""
  deleteFrenchRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFrenchRandomQuestionInput!
  ): DeleteFrenchRandomQuestionPayload

  """Deletes a single `FrenchRandomQuestion` using a unique key."""
  deleteFrenchRandomQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFrenchRandomQuestionByUuidInput!
  ): DeleteFrenchRandomQuestionPayload

  """Deletes a single `ItalianRandomQuestion` using its globally unique id."""
  deleteItalianRandomQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItalianRandomQuestionByNodeIdInput!
  ): DeleteItalianRandomQuestionPayload

  """Deletes a single `ItalianRandomQuestion` using a unique key."""
  deleteItalianRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItalianRandomQuestionInput!
  ): DeleteItalianRandomQuestionPayload

  """Deletes a single `ItalianRandomQuestion` using a unique key."""
  deleteItalianRandomQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItalianRandomQuestionByUuidInput!
  ): DeleteItalianRandomQuestionPayload

  """
  Deletes a single `JapaneseRandomQuestion` using its globally unique id.
  """
  deleteJapaneseRandomQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteJapaneseRandomQuestionByNodeIdInput!
  ): DeleteJapaneseRandomQuestionPayload

  """Deletes a single `JapaneseRandomQuestion` using a unique key."""
  deleteJapaneseRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteJapaneseRandomQuestionInput!
  ): DeleteJapaneseRandomQuestionPayload

  """Deletes a single `JapaneseRandomQuestion` using a unique key."""
  deleteJapaneseRandomQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteJapaneseRandomQuestionByUuidInput!
  ): DeleteJapaneseRandomQuestionPayload

  """Deletes a single `KoreanRandomQuestion` using its globally unique id."""
  deleteKoreanRandomQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteKoreanRandomQuestionByNodeIdInput!
  ): DeleteKoreanRandomQuestionPayload

  """Deletes a single `KoreanRandomQuestion` using a unique key."""
  deleteKoreanRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteKoreanRandomQuestionInput!
  ): DeleteKoreanRandomQuestionPayload

  """Deletes a single `KoreanRandomQuestion` using a unique key."""
  deleteKoreanRandomQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteKoreanRandomQuestionByUuidInput!
  ): DeleteKoreanRandomQuestionPayload

  """
  Deletes a single `PortugueseRandomQuestion` using its globally unique id.
  """
  deletePortugueseRandomQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePortugueseRandomQuestionByNodeIdInput!
  ): DeletePortugueseRandomQuestionPayload

  """Deletes a single `PortugueseRandomQuestion` using a unique key."""
  deletePortugueseRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePortugueseRandomQuestionInput!
  ): DeletePortugueseRandomQuestionPayload

  """Deletes a single `PortugueseRandomQuestion` using a unique key."""
  deletePortugueseRandomQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePortugueseRandomQuestionByUuidInput!
  ): DeletePortugueseRandomQuestionPayload

  """Deletes a single `RussianRandomQuestion` using its globally unique id."""
  deleteRussianRandomQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRussianRandomQuestionByNodeIdInput!
  ): DeleteRussianRandomQuestionPayload

  """Deletes a single `RussianRandomQuestion` using a unique key."""
  deleteRussianRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRussianRandomQuestionInput!
  ): DeleteRussianRandomQuestionPayload

  """Deletes a single `RussianRandomQuestion` using a unique key."""
  deleteRussianRandomQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRussianRandomQuestionByUuidInput!
  ): DeleteRussianRandomQuestionPayload

  """Deletes a single `ChineseRandomQuestion` using its globally unique id."""
  deleteChineseRandomQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChineseRandomQuestionByNodeIdInput!
  ): DeleteChineseRandomQuestionPayload

  """Deletes a single `ChineseRandomQuestion` using a unique key."""
  deleteChineseRandomQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChineseRandomQuestionInput!
  ): DeleteChineseRandomQuestionPayload

  """Deletes a single `ChineseRandomQuestion` using a unique key."""
  deleteChineseRandomQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChineseRandomQuestionByUuidInput!
  ): DeleteChineseRandomQuestionPayload

  """Deletes a single `UserDevice` using its globally unique id."""
  deleteUserDeviceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserDeviceByNodeIdInput!
  ): DeleteUserDevicePayload

  """Deletes a single `UserDevice` using a unique key."""
  deleteUserDevice(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserDeviceInput!
  ): DeleteUserDevicePayload

  """Deletes a single `UserDevice` using a unique key."""
  deleteUserDeviceByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserDeviceByUuidInput!
  ): DeleteUserDevicePayload

  """Deletes a single `UserDevice` using a unique key."""
  deleteUserDeviceByFcmToken(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserDeviceByFcmTokenInput!
  ): DeleteUserDevicePayload

  """Deletes a single `UserLanguage` using its globally unique id."""
  deleteUserLanguageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserLanguageByNodeIdInput!
  ): DeleteUserLanguagePayload

  """Deletes a single `UserLanguage` using a unique key."""
  deleteUserLanguage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserLanguageInput!
  ): DeleteUserLanguagePayload

  """Deletes a single `UserSession` using its globally unique id."""
  deleteUserSessionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserSessionByNodeIdInput!
  ): DeleteUserSessionPayload

  """Deletes a single `UserSession` using a unique key."""
  deleteUserSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserSessionInput!
  ): DeleteUserSessionPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByNodeIdInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByUsernameInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByEmailInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByUuidInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByEmailUnsubscribeToken(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByEmailUnsubscribeTokenInput!
  ): DeleteUserPayload

  """Deletes a single `GermanWord` using its globally unique id."""
  deleteGermanWordByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGermanWordByNodeIdInput!
  ): DeleteGermanWordPayload

  """Deletes a single `GermanWord` using a unique key."""
  deleteGermanWord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGermanWordInput!
  ): DeleteGermanWordPayload

  """Deletes a single `GermanWord` using a unique key."""
  deleteGermanWordByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGermanWordByUuidInput!
  ): DeleteGermanWordPayload

  """Deletes a single `EnglishWord` using its globally unique id."""
  deleteEnglishWordByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEnglishWordByNodeIdInput!
  ): DeleteEnglishWordPayload

  """Deletes a single `EnglishWord` using a unique key."""
  deleteEnglishWord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEnglishWordInput!
  ): DeleteEnglishWordPayload

  """Deletes a single `EnglishWord` using a unique key."""
  deleteEnglishWordByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEnglishWordByUuidInput!
  ): DeleteEnglishWordPayload

  """Deletes a single `SpanishWord` using its globally unique id."""
  deleteSpanishWordByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSpanishWordByNodeIdInput!
  ): DeleteSpanishWordPayload

  """Deletes a single `SpanishWord` using a unique key."""
  deleteSpanishWord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSpanishWordInput!
  ): DeleteSpanishWordPayload

  """Deletes a single `SpanishWord` using a unique key."""
  deleteSpanishWordByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSpanishWordByUuidInput!
  ): DeleteSpanishWordPayload

  """Deletes a single `FrenchWord` using its globally unique id."""
  deleteFrenchWordByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFrenchWordByNodeIdInput!
  ): DeleteFrenchWordPayload

  """Deletes a single `FrenchWord` using a unique key."""
  deleteFrenchWord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFrenchWordInput!
  ): DeleteFrenchWordPayload

  """Deletes a single `FrenchWord` using a unique key."""
  deleteFrenchWordByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFrenchWordByUuidInput!
  ): DeleteFrenchWordPayload

  """Deletes a single `ItalianWord` using its globally unique id."""
  deleteItalianWordByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItalianWordByNodeIdInput!
  ): DeleteItalianWordPayload

  """Deletes a single `ItalianWord` using a unique key."""
  deleteItalianWord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItalianWordInput!
  ): DeleteItalianWordPayload

  """Deletes a single `ItalianWord` using a unique key."""
  deleteItalianWordByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItalianWordByUuidInput!
  ): DeleteItalianWordPayload

  """Deletes a single `PortugueseWord` using its globally unique id."""
  deletePortugueseWordByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePortugueseWordByNodeIdInput!
  ): DeletePortugueseWordPayload

  """Deletes a single `PortugueseWord` using a unique key."""
  deletePortugueseWord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePortugueseWordInput!
  ): DeletePortugueseWordPayload

  """Deletes a single `PortugueseWord` using a unique key."""
  deletePortugueseWordByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePortugueseWordByUuidInput!
  ): DeletePortugueseWordPayload

  """Deletes a single `RussianWord` using its globally unique id."""
  deleteRussianWordByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRussianWordByNodeIdInput!
  ): DeleteRussianWordPayload

  """Deletes a single `RussianWord` using a unique key."""
  deleteRussianWord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRussianWordInput!
  ): DeleteRussianWordPayload

  """Deletes a single `RussianWord` using a unique key."""
  deleteRussianWordByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRussianWordByUuidInput!
  ): DeleteRussianWordPayload

  """
  Deletes a single `GermanWouldYouRatherQuestion` using its globally unique id.
  """
  deleteGermanWouldYouRatherQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGermanWouldYouRatherQuestionByNodeIdInput!
  ): DeleteGermanWouldYouRatherQuestionPayload

  """Deletes a single `GermanWouldYouRatherQuestion` using a unique key."""
  deleteGermanWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGermanWouldYouRatherQuestionInput!
  ): DeleteGermanWouldYouRatherQuestionPayload

  """Deletes a single `GermanWouldYouRatherQuestion` using a unique key."""
  deleteGermanWouldYouRatherQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGermanWouldYouRatherQuestionByUuidInput!
  ): DeleteGermanWouldYouRatherQuestionPayload

  """
  Deletes a single `EnglishWouldYouRatherQuestion` using its globally unique id.
  """
  deleteEnglishWouldYouRatherQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEnglishWouldYouRatherQuestionByNodeIdInput!
  ): DeleteEnglishWouldYouRatherQuestionPayload

  """Deletes a single `EnglishWouldYouRatherQuestion` using a unique key."""
  deleteEnglishWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEnglishWouldYouRatherQuestionInput!
  ): DeleteEnglishWouldYouRatherQuestionPayload

  """Deletes a single `EnglishWouldYouRatherQuestion` using a unique key."""
  deleteEnglishWouldYouRatherQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEnglishWouldYouRatherQuestionByUuidInput!
  ): DeleteEnglishWouldYouRatherQuestionPayload

  """
  Deletes a single `SpanishWouldYouRatherQuestion` using its globally unique id.
  """
  deleteSpanishWouldYouRatherQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSpanishWouldYouRatherQuestionByNodeIdInput!
  ): DeleteSpanishWouldYouRatherQuestionPayload

  """Deletes a single `SpanishWouldYouRatherQuestion` using a unique key."""
  deleteSpanishWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSpanishWouldYouRatherQuestionInput!
  ): DeleteSpanishWouldYouRatherQuestionPayload

  """Deletes a single `SpanishWouldYouRatherQuestion` using a unique key."""
  deleteSpanishWouldYouRatherQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSpanishWouldYouRatherQuestionByUuidInput!
  ): DeleteSpanishWouldYouRatherQuestionPayload

  """
  Deletes a single `FrenchWouldYouRatherQuestion` using its globally unique id.
  """
  deleteFrenchWouldYouRatherQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFrenchWouldYouRatherQuestionByNodeIdInput!
  ): DeleteFrenchWouldYouRatherQuestionPayload

  """Deletes a single `FrenchWouldYouRatherQuestion` using a unique key."""
  deleteFrenchWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFrenchWouldYouRatherQuestionInput!
  ): DeleteFrenchWouldYouRatherQuestionPayload

  """Deletes a single `FrenchWouldYouRatherQuestion` using a unique key."""
  deleteFrenchWouldYouRatherQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFrenchWouldYouRatherQuestionByUuidInput!
  ): DeleteFrenchWouldYouRatherQuestionPayload

  """
  Deletes a single `ItalianWouldYouRatherQuestion` using its globally unique id.
  """
  deleteItalianWouldYouRatherQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItalianWouldYouRatherQuestionByNodeIdInput!
  ): DeleteItalianWouldYouRatherQuestionPayload

  """Deletes a single `ItalianWouldYouRatherQuestion` using a unique key."""
  deleteItalianWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItalianWouldYouRatherQuestionInput!
  ): DeleteItalianWouldYouRatherQuestionPayload

  """Deletes a single `ItalianWouldYouRatherQuestion` using a unique key."""
  deleteItalianWouldYouRatherQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItalianWouldYouRatherQuestionByUuidInput!
  ): DeleteItalianWouldYouRatherQuestionPayload

  """
  Deletes a single `JapaneseWouldYouRatherQuestion` using its globally unique id.
  """
  deleteJapaneseWouldYouRatherQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteJapaneseWouldYouRatherQuestionByNodeIdInput!
  ): DeleteJapaneseWouldYouRatherQuestionPayload

  """Deletes a single `JapaneseWouldYouRatherQuestion` using a unique key."""
  deleteJapaneseWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteJapaneseWouldYouRatherQuestionInput!
  ): DeleteJapaneseWouldYouRatherQuestionPayload

  """Deletes a single `JapaneseWouldYouRatherQuestion` using a unique key."""
  deleteJapaneseWouldYouRatherQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteJapaneseWouldYouRatherQuestionByUuidInput!
  ): DeleteJapaneseWouldYouRatherQuestionPayload

  """
  Deletes a single `KoreanWouldYouRatherQuestion` using its globally unique id.
  """
  deleteKoreanWouldYouRatherQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteKoreanWouldYouRatherQuestionByNodeIdInput!
  ): DeleteKoreanWouldYouRatherQuestionPayload

  """Deletes a single `KoreanWouldYouRatherQuestion` using a unique key."""
  deleteKoreanWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteKoreanWouldYouRatherQuestionInput!
  ): DeleteKoreanWouldYouRatherQuestionPayload

  """Deletes a single `KoreanWouldYouRatherQuestion` using a unique key."""
  deleteKoreanWouldYouRatherQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteKoreanWouldYouRatherQuestionByUuidInput!
  ): DeleteKoreanWouldYouRatherQuestionPayload

  """
  Deletes a single `PortugueseWouldYouRatherQuestion` using its globally unique id.
  """
  deletePortugueseWouldYouRatherQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePortugueseWouldYouRatherQuestionByNodeIdInput!
  ): DeletePortugueseWouldYouRatherQuestionPayload

  """
  Deletes a single `PortugueseWouldYouRatherQuestion` using a unique key.
  """
  deletePortugueseWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePortugueseWouldYouRatherQuestionInput!
  ): DeletePortugueseWouldYouRatherQuestionPayload

  """
  Deletes a single `PortugueseWouldYouRatherQuestion` using a unique key.
  """
  deletePortugueseWouldYouRatherQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePortugueseWouldYouRatherQuestionByUuidInput!
  ): DeletePortugueseWouldYouRatherQuestionPayload

  """
  Deletes a single `RussianWouldYouRatherQuestion` using its globally unique id.
  """
  deleteRussianWouldYouRatherQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRussianWouldYouRatherQuestionByNodeIdInput!
  ): DeleteRussianWouldYouRatherQuestionPayload

  """Deletes a single `RussianWouldYouRatherQuestion` using a unique key."""
  deleteRussianWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRussianWouldYouRatherQuestionInput!
  ): DeleteRussianWouldYouRatherQuestionPayload

  """Deletes a single `RussianWouldYouRatherQuestion` using a unique key."""
  deleteRussianWouldYouRatherQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRussianWouldYouRatherQuestionByUuidInput!
  ): DeleteRussianWouldYouRatherQuestionPayload

  """
  Deletes a single `ChineseWouldYouRatherQuestion` using its globally unique id.
  """
  deleteChineseWouldYouRatherQuestionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChineseWouldYouRatherQuestionByNodeIdInput!
  ): DeleteChineseWouldYouRatherQuestionPayload

  """Deletes a single `ChineseWouldYouRatherQuestion` using a unique key."""
  deleteChineseWouldYouRatherQuestion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChineseWouldYouRatherQuestionInput!
  ): DeleteChineseWouldYouRatherQuestionPayload

  """Deletes a single `ChineseWouldYouRatherQuestion` using a unique key."""
  deleteChineseWouldYouRatherQuestionByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChineseWouldYouRatherQuestionByUuidInput!
  ): DeleteChineseWouldYouRatherQuestionPayload
  joinGlobalGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: JoinGlobalGroupInput!
  ): JoinGlobalGroupPayload
  registerUserActivity(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterUserActivityInput!
  ): RegisterUserActivityPayload
}

"""The output of our create `GroupUser` mutation."""
type CreateGroupUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GroupUser` that was created by this mutation."""
  groupUser: GroupUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `GroupUser`."""
  user: User

  """Reads a single `Group` that is related to this `GroupUser`."""
  group: Group

  """An edge for our `GroupUser`. May be used by Relay 1."""
  groupUserEdge(
    """The method to use when ordering `GroupUser`."""
    orderBy: [GroupUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupUsersEdge
}

"""All input for the create `GroupUser` mutation."""
input CreateGroupUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GroupUser` to be created by this mutation."""
  groupUser: GroupUserInput!
}

"""An input for mutations affecting `GroupUser`"""
input GroupUserInput {
  id: Int
  userId: Int
  groupId: Int
  userType: UserType!
  joinedOn: Datetime
  lastActive: Datetime
}

"""The output of our create `Group` mutation."""
type CreateGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Group` that was created by this mutation."""
  group: Group

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Language` that is related to this `Group`."""
  language: Language

  """Reads a single `LanguageSkillLevel` that is related to this `Group`."""
  languageSkillLevel: LanguageSkillLevel

  """An edge for our `Group`. May be used by Relay 1."""
  groupEdge(
    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsEdge
}

"""All input for the create `Group` mutation."""
input CreateGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Group` to be created by this mutation."""
  group: GroupInput!
}

"""An input for mutations affecting `Group`"""
input GroupInput {
  id: Int
  groupName: String
  global: Boolean
  languageId: Int
  languageSkillLevelId: Int
  createdAt: Datetime
  uuid: UUID
}

"""The output of our create `ChineseGuessCharacterQuestion` mutation."""
type CreateChineseGuessCharacterQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChineseGuessCharacterQuestion` that was created by this mutation."""
  chineseGuessCharacterQuestion: ChineseGuessCharacterQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `ChineseGuessCharacterQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `ChineseGuessCharacterQuestion`. May be used by Relay 1.
  """
  chineseGuessCharacterQuestionEdge(
    """The method to use when ordering `ChineseGuessCharacterQuestion`."""
    orderBy: [ChineseGuessCharacterQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChineseGuessCharacterQuestionsEdge
}

"""All input for the create `ChineseGuessCharacterQuestion` mutation."""
input CreateChineseGuessCharacterQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ChineseGuessCharacterQuestion` to be created by this mutation."""
  chineseGuessCharacterQuestion: ChineseGuessCharacterQuestionInput!
}

"""An input for mutations affecting `ChineseGuessCharacterQuestion`"""
input ChineseGuessCharacterQuestionInput {
  id: Int
  uuid: UUID
  character: String!
  hint: String!
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our create `InviteToken` mutation."""
type CreateInviteTokenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `InviteToken` that was created by this mutation."""
  inviteToken: InviteToken

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `InviteToken`."""
  user: User

  """An edge for our `InviteToken`. May be used by Relay 1."""
  inviteTokenEdge(
    """The method to use when ordering `InviteToken`."""
    orderBy: [InviteTokensOrderBy!] = [PRIMARY_KEY_ASC]
  ): InviteTokensEdge
}

"""All input for the create `InviteToken` mutation."""
input CreateInviteTokenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `InviteToken` to be created by this mutation."""
  inviteToken: InviteTokenInput!
}

"""An input for mutations affecting `InviteToken`"""
input InviteTokenInput {
  id: Int
  userId: Int
  inviteToken: String
  createdAt: Datetime
  description: String
}

"""The output of our create `LanguageSkillLevel` mutation."""
type CreateLanguageSkillLevelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LanguageSkillLevel` that was created by this mutation."""
  languageSkillLevel: LanguageSkillLevel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LanguageSkillLevel`. May be used by Relay 1."""
  languageSkillLevelEdge(
    """The method to use when ordering `LanguageSkillLevel`."""
    orderBy: [LanguageSkillLevelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguageSkillLevelsEdge
}

"""All input for the create `LanguageSkillLevel` mutation."""
input CreateLanguageSkillLevelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `LanguageSkillLevel` to be created by this mutation."""
  languageSkillLevel: LanguageSkillLevelInput!
}

"""An input for mutations affecting `LanguageSkillLevel`"""
input LanguageSkillLevelInput {
  id: Int
  name: String
}

"""The output of our create `Language` mutation."""
type CreateLanguagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Language` that was created by this mutation."""
  language: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Language`. May be used by Relay 1."""
  languageEdge(
    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguagesEdge
}

"""All input for the create `Language` mutation."""
input CreateLanguageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Language` to be created by this mutation."""
  language: LanguageInput!
}

"""An input for mutations affecting `Language`"""
input LanguageInput {
  id: Int

  """ISO 3166-1 alpha-2 standardized code"""
  alpha2: String!
  englishName: String!
  createdAt: Datetime
}

"""The output of our create `MessagePreview` mutation."""
type CreateMessagePreviewPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MessagePreview` that was created by this mutation."""
  messagePreview: MessagePreview

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Message` that is related to this `MessagePreview`."""
  message: Message

  """An edge for our `MessagePreview`. May be used by Relay 1."""
  messagePreviewEdge(
    """The method to use when ordering `MessagePreview`."""
    orderBy: [MessagePreviewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessagePreviewsEdge
}

"""All input for the create `MessagePreview` mutation."""
input CreateMessagePreviewInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MessagePreview` to be created by this mutation."""
  messagePreview: MessagePreviewInput!
}

"""An input for mutations affecting `MessagePreview`"""
input MessagePreviewInput {
  id: Int
  uuid: UUID

  """Basename without extension"""
  filename: String!

  """Extension without leading dot"""
  extension: String
  messageId: Int!
  createdAt: Datetime
}

"""The output of our create `Message` mutation."""
type CreateMessagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Message` that was created by this mutation."""
  message: Message

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Message`."""
  sender: User

  """Reads a single `User` that is related to this `Message`."""
  recipient: User

  """Reads a single `Group` that is related to this `Message`."""
  recipientGroup: Group

  """Reads a single `Message` that is related to this `Message`."""
  parentMessage: Message

  """An edge for our `Message`. May be used by Relay 1."""
  messageEdge(
    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessagesEdge
}

"""All input for the create `Message` mutation."""
input CreateMessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Message` to be created by this mutation."""
  message: MessageInput!
}

"""An input for mutations affecting `Message`"""
input MessageInput {
  id: Int
  uuid: UUID
  senderId: Int
  recipientId: Int
  recipientGroupId: Int
  body: String!
  parentMessageId: Int
  createdAt: Datetime
}

"""The output of our create `NotificationChannel` mutation."""
type CreateNotificationChannelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NotificationChannel` that was created by this mutation."""
  notificationChannel: NotificationChannel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NotificationChannel`. May be used by Relay 1."""
  notificationChannelEdge(
    """The method to use when ordering `NotificationChannel`."""
    orderBy: [NotificationChannelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NotificationChannelsEdge
}

"""All input for the create `NotificationChannel` mutation."""
input CreateNotificationChannelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `NotificationChannel` to be created by this mutation."""
  notificationChannel: NotificationChannelInput!
}

"""An input for mutations affecting `NotificationChannel`"""
input NotificationChannelInput {
  id: Int
  uuid: UUID
  name: String
  createdAt: Datetime
}

"""The output of our create `Notification` mutation."""
type CreateNotificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Notification` that was created by this mutation."""
  notification: Notification

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Notification`."""
  recipient: User

  """
  Reads a single `NotificationChannel` that is related to this `Notification`.
  """
  channel: NotificationChannel

  """Reads a single `Group` that is related to this `Notification`."""
  recipientGroup: Group

  """An edge for our `Notification`. May be used by Relay 1."""
  notificationEdge(
    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NotificationsEdge
}

"""All input for the create `Notification` mutation."""
input CreateNotificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Notification` to be created by this mutation."""
  notification: NotificationInput!
}

"""An input for mutations affecting `Notification`"""
input NotificationInput {
  id: Int
  uuid: UUID
  recipientId: Int
  channelId: Int!
  params: JSON
  sentAt: Datetime
  withheldUntil: Datetime
  expiresAt: Datetime
  readAt: Datetime
  createdAt: Datetime
  recipientGroupId: Int
}

"""The output of our create `PostLike` mutation."""
type CreatePostLikePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PostLike` that was created by this mutation."""
  postLike: PostLike

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `PostLike`."""
  user: User

  """Reads a single `Post` that is related to this `PostLike`."""
  post: Post

  """An edge for our `PostLike`. May be used by Relay 1."""
  postLikeEdge(
    """The method to use when ordering `PostLike`."""
    orderBy: [PostLikesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostLikesEdge
}

"""All input for the create `PostLike` mutation."""
input CreatePostLikeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PostLike` to be created by this mutation."""
  postLike: PostLikeInput!
}

"""An input for mutations affecting `PostLike`"""
input PostLikeInput {
  id: Int
  userId: Int!
  postId: Int!
  createdAt: Datetime
}

"""The output of our create `PostRecording` mutation."""
type CreatePostRecordingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PostRecording` that was created by this mutation."""
  postRecording: PostRecording

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `PostRecording`."""
  user: User

  """Reads a single `Post` that is related to this `PostRecording`."""
  post: Post

  """An edge for our `PostRecording`. May be used by Relay 1."""
  postRecordingEdge(
    """The method to use when ordering `PostRecording`."""
    orderBy: [PostRecordingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostRecordingsEdge
}

"""All input for the create `PostRecording` mutation."""
input CreatePostRecordingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PostRecording` to be created by this mutation."""
  postRecording: PostRecordingInput!
}

"""An input for mutations affecting `PostRecording`"""
input PostRecordingInput {
  id: Int
  uuid: UUID
  userId: Int!
  postId: Int!

  """Basename without extension"""
  filename: String!

  """Extension without leading dot"""
  extension: String
  createdAt: Datetime
}

"""The output of our create `Post` mutation."""
type CreatePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was created by this mutation."""
  post: Post

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Post`."""
  author: User

  """Reads a single `Post` that is related to this `Post`."""
  parentPost: Post

  """Reads a single `Language` that is related to this `Post`."""
  language: Language

  """Reads a single `Prompt` that is related to this `Post`."""
  prompt: Prompt

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge
}

"""All input for the create `Post` mutation."""
input CreatePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Post` to be created by this mutation."""
  post: PostInput!
}

"""An input for mutations affecting `Post`"""
input PostInput {
  id: Int
  uuid: UUID
  authorId: Int
  body: String!
  parentPostId: Int
  createdAt: Datetime
  languageId: Int!
  promptId: Int
}

"""The output of our create `Prompt` mutation."""
type CreatePromptPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Prompt` that was created by this mutation."""
  prompt: Prompt

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Language` that is related to this `Prompt`."""
  language: Language

  """Reads a single `LanguageSkillLevel` that is related to this `Prompt`."""
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `Prompt`. May be used by Relay 1."""
  promptEdge(
    """The method to use when ordering `Prompt`."""
    orderBy: [PromptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PromptsEdge
}

"""All input for the create `Prompt` mutation."""
input CreatePromptInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Prompt` to be created by this mutation."""
  prompt: PromptInput!
}

"""An input for mutations affecting `Prompt`"""
input PromptInput {
  id: Int
  uuid: UUID
  languageId: Int!
  recommendedSkillLevelId: Int
  type: PromptType!
  contentEn: String
  contentDe: String
  contentZh: String
  createdAt: Datetime
  contentEs: String
  contentFr: String
  contentPt: String
  contentRu: String
  contentJa: String
  contentKo: String
  contentIt: String
}

"""The output of our create `GermanRandomQuestion` mutation."""
type CreateGermanRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GermanRandomQuestion` that was created by this mutation."""
  germanRandomQuestion: GermanRandomQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `GermanRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `GermanRandomQuestion`. May be used by Relay 1."""
  germanRandomQuestionEdge(
    """The method to use when ordering `GermanRandomQuestion`."""
    orderBy: [GermanRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GermanRandomQuestionsEdge
}

"""All input for the create `GermanRandomQuestion` mutation."""
input CreateGermanRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GermanRandomQuestion` to be created by this mutation."""
  germanRandomQuestion: GermanRandomQuestionInput!
}

"""An input for mutations affecting `GermanRandomQuestion`"""
input GermanRandomQuestionInput {
  id: Int
  uuid: UUID
  question: String!
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our create `EnglishRandomQuestion` mutation."""
type CreateEnglishRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EnglishRandomQuestion` that was created by this mutation."""
  englishRandomQuestion: EnglishRandomQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `EnglishRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `EnglishRandomQuestion`. May be used by Relay 1."""
  englishRandomQuestionEdge(
    """The method to use when ordering `EnglishRandomQuestion`."""
    orderBy: [EnglishRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EnglishRandomQuestionsEdge
}

"""All input for the create `EnglishRandomQuestion` mutation."""
input CreateEnglishRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EnglishRandomQuestion` to be created by this mutation."""
  englishRandomQuestion: EnglishRandomQuestionInput!
}

"""An input for mutations affecting `EnglishRandomQuestion`"""
input EnglishRandomQuestionInput {
  id: Int
  uuid: UUID
  question: String!
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our create `SpanishRandomQuestion` mutation."""
type CreateSpanishRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SpanishRandomQuestion` that was created by this mutation."""
  spanishRandomQuestion: SpanishRandomQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `SpanishRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `SpanishRandomQuestion`. May be used by Relay 1."""
  spanishRandomQuestionEdge(
    """The method to use when ordering `SpanishRandomQuestion`."""
    orderBy: [SpanishRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpanishRandomQuestionsEdge
}

"""All input for the create `SpanishRandomQuestion` mutation."""
input CreateSpanishRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SpanishRandomQuestion` to be created by this mutation."""
  spanishRandomQuestion: SpanishRandomQuestionInput!
}

"""An input for mutations affecting `SpanishRandomQuestion`"""
input SpanishRandomQuestionInput {
  id: Int
  uuid: UUID
  question: String!
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our create `FrenchRandomQuestion` mutation."""
type CreateFrenchRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FrenchRandomQuestion` that was created by this mutation."""
  frenchRandomQuestion: FrenchRandomQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `FrenchRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `FrenchRandomQuestion`. May be used by Relay 1."""
  frenchRandomQuestionEdge(
    """The method to use when ordering `FrenchRandomQuestion`."""
    orderBy: [FrenchRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FrenchRandomQuestionsEdge
}

"""All input for the create `FrenchRandomQuestion` mutation."""
input CreateFrenchRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FrenchRandomQuestion` to be created by this mutation."""
  frenchRandomQuestion: FrenchRandomQuestionInput!
}

"""An input for mutations affecting `FrenchRandomQuestion`"""
input FrenchRandomQuestionInput {
  id: Int
  uuid: UUID
  question: String!
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our create `ItalianRandomQuestion` mutation."""
type CreateItalianRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ItalianRandomQuestion` that was created by this mutation."""
  italianRandomQuestion: ItalianRandomQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `ItalianRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `ItalianRandomQuestion`. May be used by Relay 1."""
  italianRandomQuestionEdge(
    """The method to use when ordering `ItalianRandomQuestion`."""
    orderBy: [ItalianRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItalianRandomQuestionsEdge
}

"""All input for the create `ItalianRandomQuestion` mutation."""
input CreateItalianRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ItalianRandomQuestion` to be created by this mutation."""
  italianRandomQuestion: ItalianRandomQuestionInput!
}

"""An input for mutations affecting `ItalianRandomQuestion`"""
input ItalianRandomQuestionInput {
  id: Int
  uuid: UUID
  question: String!
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our create `JapaneseRandomQuestion` mutation."""
type CreateJapaneseRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `JapaneseRandomQuestion` that was created by this mutation."""
  japaneseRandomQuestion: JapaneseRandomQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `JapaneseRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `JapaneseRandomQuestion`. May be used by Relay 1."""
  japaneseRandomQuestionEdge(
    """The method to use when ordering `JapaneseRandomQuestion`."""
    orderBy: [JapaneseRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JapaneseRandomQuestionsEdge
}

"""All input for the create `JapaneseRandomQuestion` mutation."""
input CreateJapaneseRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `JapaneseRandomQuestion` to be created by this mutation."""
  japaneseRandomQuestion: JapaneseRandomQuestionInput!
}

"""An input for mutations affecting `JapaneseRandomQuestion`"""
input JapaneseRandomQuestionInput {
  id: Int
  uuid: UUID
  question: String!
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our create `KoreanRandomQuestion` mutation."""
type CreateKoreanRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `KoreanRandomQuestion` that was created by this mutation."""
  koreanRandomQuestion: KoreanRandomQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `KoreanRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `KoreanRandomQuestion`. May be used by Relay 1."""
  koreanRandomQuestionEdge(
    """The method to use when ordering `KoreanRandomQuestion`."""
    orderBy: [KoreanRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): KoreanRandomQuestionsEdge
}

"""All input for the create `KoreanRandomQuestion` mutation."""
input CreateKoreanRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `KoreanRandomQuestion` to be created by this mutation."""
  koreanRandomQuestion: KoreanRandomQuestionInput!
}

"""An input for mutations affecting `KoreanRandomQuestion`"""
input KoreanRandomQuestionInput {
  id: Int
  uuid: UUID
  question: String!
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our create `PortugueseRandomQuestion` mutation."""
type CreatePortugueseRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PortugueseRandomQuestion` that was created by this mutation."""
  portugueseRandomQuestion: PortugueseRandomQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `PortugueseRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `PortugueseRandomQuestion`. May be used by Relay 1."""
  portugueseRandomQuestionEdge(
    """The method to use when ordering `PortugueseRandomQuestion`."""
    orderBy: [PortugueseRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PortugueseRandomQuestionsEdge
}

"""All input for the create `PortugueseRandomQuestion` mutation."""
input CreatePortugueseRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PortugueseRandomQuestion` to be created by this mutation."""
  portugueseRandomQuestion: PortugueseRandomQuestionInput!
}

"""An input for mutations affecting `PortugueseRandomQuestion`"""
input PortugueseRandomQuestionInput {
  id: Int
  uuid: UUID
  question: String!
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our create `RussianRandomQuestion` mutation."""
type CreateRussianRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RussianRandomQuestion` that was created by this mutation."""
  russianRandomQuestion: RussianRandomQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `RussianRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `RussianRandomQuestion`. May be used by Relay 1."""
  russianRandomQuestionEdge(
    """The method to use when ordering `RussianRandomQuestion`."""
    orderBy: [RussianRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RussianRandomQuestionsEdge
}

"""All input for the create `RussianRandomQuestion` mutation."""
input CreateRussianRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RussianRandomQuestion` to be created by this mutation."""
  russianRandomQuestion: RussianRandomQuestionInput!
}

"""An input for mutations affecting `RussianRandomQuestion`"""
input RussianRandomQuestionInput {
  id: Int
  uuid: UUID
  question: String!
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our create `ChineseRandomQuestion` mutation."""
type CreateChineseRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChineseRandomQuestion` that was created by this mutation."""
  chineseRandomQuestion: ChineseRandomQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `ChineseRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `ChineseRandomQuestion`. May be used by Relay 1."""
  chineseRandomQuestionEdge(
    """The method to use when ordering `ChineseRandomQuestion`."""
    orderBy: [ChineseRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChineseRandomQuestionsEdge
}

"""All input for the create `ChineseRandomQuestion` mutation."""
input CreateChineseRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ChineseRandomQuestion` to be created by this mutation."""
  chineseRandomQuestion: ChineseRandomQuestionInput!
}

"""An input for mutations affecting `ChineseRandomQuestion`"""
input ChineseRandomQuestionInput {
  id: Int
  uuid: UUID
  question: String!
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our create `UserDevice` mutation."""
type CreateUserDevicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserDevice` that was created by this mutation."""
  userDevice: UserDevice

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserDevice`."""
  user: User

  """An edge for our `UserDevice`. May be used by Relay 1."""
  userDeviceEdge(
    """The method to use when ordering `UserDevice`."""
    orderBy: [UserDevicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserDevicesEdge
}

"""All input for the create `UserDevice` mutation."""
input CreateUserDeviceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserDevice` to be created by this mutation."""
  userDevice: UserDeviceInput!
}

"""An input for mutations affecting `UserDevice`"""
input UserDeviceInput {
  id: Int
  uuid: UUID
  userId: Int
  fcmToken: String
  createdAt: Datetime
}

"""The output of our create `UserLanguage` mutation."""
type CreateUserLanguagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserLanguage` that was created by this mutation."""
  userLanguage: UserLanguage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserLanguage`."""
  user: User

  """Reads a single `Language` that is related to this `UserLanguage`."""
  language: Language

  """
  Reads a single `LanguageSkillLevel` that is related to this `UserLanguage`.
  """
  languageSkillLevel: LanguageSkillLevel

  """An edge for our `UserLanguage`. May be used by Relay 1."""
  userLanguageEdge(
    """The method to use when ordering `UserLanguage`."""
    orderBy: [UserLanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserLanguagesEdge
}

"""All input for the create `UserLanguage` mutation."""
input CreateUserLanguageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserLanguage` to be created by this mutation."""
  userLanguage: UserLanguageInput!
}

"""An input for mutations affecting `UserLanguage`"""
input UserLanguageInput {
  id: Int
  userId: Int
  languageId: Int
  languageSkillLevelId: Int
  native: Boolean
  createdAt: Datetime
}

"""The output of our create `UserSession` mutation."""
type CreateUserSessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserSession` that was created by this mutation."""
  userSession: UserSession

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserSession`. May be used by Relay 1."""
  userSessionEdge(
    """The method to use when ordering `UserSession`."""
    orderBy: [UserSessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserSessionsEdge
}

"""All input for the create `UserSession` mutation."""
input CreateUserSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserSession` to be created by this mutation."""
  userSession: UserSessionInput!
}

"""An input for mutations affecting `UserSession`"""
input UserSessionInput {
  sid: String!
  sess: JSON!
  expire: Datetime!
  createdAt: Datetime
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Language` that is related to this `User`."""
  languageByLocale: Language

  """Reads a single `InviteToken` that is related to this `User`."""
  signedUpWithToken: InviteToken

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""An input for mutations affecting `User`"""
input UserInput {
  id: Int
  username: String
  email: String!
  unconfirmedEmail: String
  gender: String
  bio: String
  lastActiveAt: Datetime
  createdAt: Datetime
  passwordHash: String
  uuid: UUID
  avatarUrl: String
  locale: Int
  googleId: String
  signedUpWithTokenId: Int
  emailNotificationsEnabled: Boolean
  emailUnsubscribeToken: String
  displayName: String
}

"""The output of our create `GermanWord` mutation."""
type CreateGermanWordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GermanWord` that was created by this mutation."""
  germanWord: GermanWord

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `GermanWord`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `GermanWord`. May be used by Relay 1."""
  germanWordEdge(
    """The method to use when ordering `GermanWord`."""
    orderBy: [GermanWordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GermanWordsEdge
}

"""All input for the create `GermanWord` mutation."""
input CreateGermanWordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GermanWord` to be created by this mutation."""
  germanWord: GermanWordInput!
}

"""An input for mutations affecting `GermanWord`"""
input GermanWordInput {
  id: Int
  uuid: UUID
  word: String!

  """Ranges from 0 to 1 (higher is more frequent)"""
  frequency: Float!
  length: Int
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our create `EnglishWord` mutation."""
type CreateEnglishWordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EnglishWord` that was created by this mutation."""
  englishWord: EnglishWord

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `EnglishWord`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `EnglishWord`. May be used by Relay 1."""
  englishWordEdge(
    """The method to use when ordering `EnglishWord`."""
    orderBy: [EnglishWordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EnglishWordsEdge
}

"""All input for the create `EnglishWord` mutation."""
input CreateEnglishWordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EnglishWord` to be created by this mutation."""
  englishWord: EnglishWordInput!
}

"""An input for mutations affecting `EnglishWord`"""
input EnglishWordInput {
  id: Int
  uuid: UUID
  word: String!

  """Ranges from 0 to 1 (higher is more frequent)"""
  frequency: Float!
  length: Int
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our create `SpanishWord` mutation."""
type CreateSpanishWordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SpanishWord` that was created by this mutation."""
  spanishWord: SpanishWord

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `SpanishWord`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `SpanishWord`. May be used by Relay 1."""
  spanishWordEdge(
    """The method to use when ordering `SpanishWord`."""
    orderBy: [SpanishWordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpanishWordsEdge
}

"""All input for the create `SpanishWord` mutation."""
input CreateSpanishWordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SpanishWord` to be created by this mutation."""
  spanishWord: SpanishWordInput!
}

"""An input for mutations affecting `SpanishWord`"""
input SpanishWordInput {
  id: Int
  uuid: UUID
  word: String!

  """Ranges from 0 to 1 (higher is more frequent)"""
  frequency: Float!
  length: Int
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our create `FrenchWord` mutation."""
type CreateFrenchWordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FrenchWord` that was created by this mutation."""
  frenchWord: FrenchWord

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `FrenchWord`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `FrenchWord`. May be used by Relay 1."""
  frenchWordEdge(
    """The method to use when ordering `FrenchWord`."""
    orderBy: [FrenchWordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FrenchWordsEdge
}

"""All input for the create `FrenchWord` mutation."""
input CreateFrenchWordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FrenchWord` to be created by this mutation."""
  frenchWord: FrenchWordInput!
}

"""An input for mutations affecting `FrenchWord`"""
input FrenchWordInput {
  id: Int
  uuid: UUID
  word: String!

  """Ranges from 0 to 1 (higher is more frequent)"""
  frequency: Float!
  length: Int
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our create `ItalianWord` mutation."""
type CreateItalianWordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ItalianWord` that was created by this mutation."""
  italianWord: ItalianWord

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `ItalianWord`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `ItalianWord`. May be used by Relay 1."""
  italianWordEdge(
    """The method to use when ordering `ItalianWord`."""
    orderBy: [ItalianWordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItalianWordsEdge
}

"""All input for the create `ItalianWord` mutation."""
input CreateItalianWordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ItalianWord` to be created by this mutation."""
  italianWord: ItalianWordInput!
}

"""An input for mutations affecting `ItalianWord`"""
input ItalianWordInput {
  id: Int
  uuid: UUID
  word: String!

  """Ranges from 0 to 1 (higher is more frequent)"""
  frequency: Float!
  length: Int
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our create `PortugueseWord` mutation."""
type CreatePortugueseWordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PortugueseWord` that was created by this mutation."""
  portugueseWord: PortugueseWord

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `PortugueseWord`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `PortugueseWord`. May be used by Relay 1."""
  portugueseWordEdge(
    """The method to use when ordering `PortugueseWord`."""
    orderBy: [PortugueseWordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PortugueseWordsEdge
}

"""All input for the create `PortugueseWord` mutation."""
input CreatePortugueseWordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PortugueseWord` to be created by this mutation."""
  portugueseWord: PortugueseWordInput!
}

"""An input for mutations affecting `PortugueseWord`"""
input PortugueseWordInput {
  id: Int
  uuid: UUID
  word: String!

  """Ranges from 0 to 1 (higher is more frequent)"""
  frequency: Float!
  length: Int
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our create `RussianWord` mutation."""
type CreateRussianWordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RussianWord` that was created by this mutation."""
  russianWord: RussianWord

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `RussianWord`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `RussianWord`. May be used by Relay 1."""
  russianWordEdge(
    """The method to use when ordering `RussianWord`."""
    orderBy: [RussianWordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RussianWordsEdge
}

"""All input for the create `RussianWord` mutation."""
input CreateRussianWordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RussianWord` to be created by this mutation."""
  russianWord: RussianWordInput!
}

"""An input for mutations affecting `RussianWord`"""
input RussianWordInput {
  id: Int
  uuid: UUID
  word: String!

  """Ranges from 0 to 1 (higher is more frequent)"""
  frequency: Float!
  length: Int
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our create `GermanWouldYouRatherQuestion` mutation."""
type CreateGermanWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GermanWouldYouRatherQuestion` that was created by this mutation."""
  germanWouldYouRatherQuestion: GermanWouldYouRatherQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `GermanWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `GermanWouldYouRatherQuestion`. May be used by Relay 1.
  """
  germanWouldYouRatherQuestionEdge(
    """The method to use when ordering `GermanWouldYouRatherQuestion`."""
    orderBy: [GermanWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GermanWouldYouRatherQuestionsEdge
}

"""All input for the create `GermanWouldYouRatherQuestion` mutation."""
input CreateGermanWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GermanWouldYouRatherQuestion` to be created by this mutation."""
  germanWouldYouRatherQuestion: GermanWouldYouRatherQuestionInput!
}

"""An input for mutations affecting `GermanWouldYouRatherQuestion`"""
input GermanWouldYouRatherQuestionInput {
  id: Int
  uuid: UUID
  question: String!
  answers: [String]!
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our create `EnglishWouldYouRatherQuestion` mutation."""
type CreateEnglishWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EnglishWouldYouRatherQuestion` that was created by this mutation."""
  englishWouldYouRatherQuestion: EnglishWouldYouRatherQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `EnglishWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `EnglishWouldYouRatherQuestion`. May be used by Relay 1.
  """
  englishWouldYouRatherQuestionEdge(
    """The method to use when ordering `EnglishWouldYouRatherQuestion`."""
    orderBy: [EnglishWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EnglishWouldYouRatherQuestionsEdge
}

"""All input for the create `EnglishWouldYouRatherQuestion` mutation."""
input CreateEnglishWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EnglishWouldYouRatherQuestion` to be created by this mutation."""
  englishWouldYouRatherQuestion: EnglishWouldYouRatherQuestionInput!
}

"""An input for mutations affecting `EnglishWouldYouRatherQuestion`"""
input EnglishWouldYouRatherQuestionInput {
  id: Int
  uuid: UUID
  question: String!
  answers: [String]!
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our create `SpanishWouldYouRatherQuestion` mutation."""
type CreateSpanishWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SpanishWouldYouRatherQuestion` that was created by this mutation."""
  spanishWouldYouRatherQuestion: SpanishWouldYouRatherQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `SpanishWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `SpanishWouldYouRatherQuestion`. May be used by Relay 1.
  """
  spanishWouldYouRatherQuestionEdge(
    """The method to use when ordering `SpanishWouldYouRatherQuestion`."""
    orderBy: [SpanishWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpanishWouldYouRatherQuestionsEdge
}

"""All input for the create `SpanishWouldYouRatherQuestion` mutation."""
input CreateSpanishWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SpanishWouldYouRatherQuestion` to be created by this mutation."""
  spanishWouldYouRatherQuestion: SpanishWouldYouRatherQuestionInput!
}

"""An input for mutations affecting `SpanishWouldYouRatherQuestion`"""
input SpanishWouldYouRatherQuestionInput {
  id: Int
  uuid: UUID
  question: String!
  answers: [String]!
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our create `FrenchWouldYouRatherQuestion` mutation."""
type CreateFrenchWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FrenchWouldYouRatherQuestion` that was created by this mutation."""
  frenchWouldYouRatherQuestion: FrenchWouldYouRatherQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `FrenchWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `FrenchWouldYouRatherQuestion`. May be used by Relay 1.
  """
  frenchWouldYouRatherQuestionEdge(
    """The method to use when ordering `FrenchWouldYouRatherQuestion`."""
    orderBy: [FrenchWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FrenchWouldYouRatherQuestionsEdge
}

"""All input for the create `FrenchWouldYouRatherQuestion` mutation."""
input CreateFrenchWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FrenchWouldYouRatherQuestion` to be created by this mutation."""
  frenchWouldYouRatherQuestion: FrenchWouldYouRatherQuestionInput!
}

"""An input for mutations affecting `FrenchWouldYouRatherQuestion`"""
input FrenchWouldYouRatherQuestionInput {
  id: Int
  uuid: UUID
  question: String!
  answers: [String]!
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our create `ItalianWouldYouRatherQuestion` mutation."""
type CreateItalianWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ItalianWouldYouRatherQuestion` that was created by this mutation."""
  italianWouldYouRatherQuestion: ItalianWouldYouRatherQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `ItalianWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `ItalianWouldYouRatherQuestion`. May be used by Relay 1.
  """
  italianWouldYouRatherQuestionEdge(
    """The method to use when ordering `ItalianWouldYouRatherQuestion`."""
    orderBy: [ItalianWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItalianWouldYouRatherQuestionsEdge
}

"""All input for the create `ItalianWouldYouRatherQuestion` mutation."""
input CreateItalianWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ItalianWouldYouRatherQuestion` to be created by this mutation."""
  italianWouldYouRatherQuestion: ItalianWouldYouRatherQuestionInput!
}

"""An input for mutations affecting `ItalianWouldYouRatherQuestion`"""
input ItalianWouldYouRatherQuestionInput {
  id: Int
  uuid: UUID
  question: String!
  answers: [String]!
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our create `JapaneseWouldYouRatherQuestion` mutation."""
type CreateJapaneseWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `JapaneseWouldYouRatherQuestion` that was created by this mutation.
  """
  japaneseWouldYouRatherQuestion: JapaneseWouldYouRatherQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `JapaneseWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `JapaneseWouldYouRatherQuestion`. May be used by Relay 1.
  """
  japaneseWouldYouRatherQuestionEdge(
    """The method to use when ordering `JapaneseWouldYouRatherQuestion`."""
    orderBy: [JapaneseWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JapaneseWouldYouRatherQuestionsEdge
}

"""All input for the create `JapaneseWouldYouRatherQuestion` mutation."""
input CreateJapaneseWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `JapaneseWouldYouRatherQuestion` to be created by this mutation."""
  japaneseWouldYouRatherQuestion: JapaneseWouldYouRatherQuestionInput!
}

"""An input for mutations affecting `JapaneseWouldYouRatherQuestion`"""
input JapaneseWouldYouRatherQuestionInput {
  id: Int
  uuid: UUID
  question: String!
  answers: [String]!
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our create `KoreanWouldYouRatherQuestion` mutation."""
type CreateKoreanWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `KoreanWouldYouRatherQuestion` that was created by this mutation."""
  koreanWouldYouRatherQuestion: KoreanWouldYouRatherQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `KoreanWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `KoreanWouldYouRatherQuestion`. May be used by Relay 1.
  """
  koreanWouldYouRatherQuestionEdge(
    """The method to use when ordering `KoreanWouldYouRatherQuestion`."""
    orderBy: [KoreanWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): KoreanWouldYouRatherQuestionsEdge
}

"""All input for the create `KoreanWouldYouRatherQuestion` mutation."""
input CreateKoreanWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `KoreanWouldYouRatherQuestion` to be created by this mutation."""
  koreanWouldYouRatherQuestion: KoreanWouldYouRatherQuestionInput!
}

"""An input for mutations affecting `KoreanWouldYouRatherQuestion`"""
input KoreanWouldYouRatherQuestionInput {
  id: Int
  uuid: UUID
  question: String!
  answers: [String]!
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our create `PortugueseWouldYouRatherQuestion` mutation."""
type CreatePortugueseWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `PortugueseWouldYouRatherQuestion` that was created by this mutation.
  """
  portugueseWouldYouRatherQuestion: PortugueseWouldYouRatherQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `PortugueseWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `PortugueseWouldYouRatherQuestion`. May be used by Relay 1.
  """
  portugueseWouldYouRatherQuestionEdge(
    """The method to use when ordering `PortugueseWouldYouRatherQuestion`."""
    orderBy: [PortugueseWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PortugueseWouldYouRatherQuestionsEdge
}

"""All input for the create `PortugueseWouldYouRatherQuestion` mutation."""
input CreatePortugueseWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PortugueseWouldYouRatherQuestion` to be created by this mutation."""
  portugueseWouldYouRatherQuestion: PortugueseWouldYouRatherQuestionInput!
}

"""An input for mutations affecting `PortugueseWouldYouRatherQuestion`"""
input PortugueseWouldYouRatherQuestionInput {
  id: Int
  uuid: UUID
  question: String!
  answers: [String]!
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our create `RussianWouldYouRatherQuestion` mutation."""
type CreateRussianWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RussianWouldYouRatherQuestion` that was created by this mutation."""
  russianWouldYouRatherQuestion: RussianWouldYouRatherQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `RussianWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `RussianWouldYouRatherQuestion`. May be used by Relay 1.
  """
  russianWouldYouRatherQuestionEdge(
    """The method to use when ordering `RussianWouldYouRatherQuestion`."""
    orderBy: [RussianWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RussianWouldYouRatherQuestionsEdge
}

"""All input for the create `RussianWouldYouRatherQuestion` mutation."""
input CreateRussianWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RussianWouldYouRatherQuestion` to be created by this mutation."""
  russianWouldYouRatherQuestion: RussianWouldYouRatherQuestionInput!
}

"""An input for mutations affecting `RussianWouldYouRatherQuestion`"""
input RussianWouldYouRatherQuestionInput {
  id: Int
  uuid: UUID
  question: String!
  answers: [String]!
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our create `ChineseWouldYouRatherQuestion` mutation."""
type CreateChineseWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChineseWouldYouRatherQuestion` that was created by this mutation."""
  chineseWouldYouRatherQuestion: ChineseWouldYouRatherQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `ChineseWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `ChineseWouldYouRatherQuestion`. May be used by Relay 1.
  """
  chineseWouldYouRatherQuestionEdge(
    """The method to use when ordering `ChineseWouldYouRatherQuestion`."""
    orderBy: [ChineseWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChineseWouldYouRatherQuestionsEdge
}

"""All input for the create `ChineseWouldYouRatherQuestion` mutation."""
input CreateChineseWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ChineseWouldYouRatherQuestion` to be created by this mutation."""
  chineseWouldYouRatherQuestion: ChineseWouldYouRatherQuestionInput!
}

"""An input for mutations affecting `ChineseWouldYouRatherQuestion`"""
input ChineseWouldYouRatherQuestionInput {
  id: Int
  uuid: UUID
  question: String!
  answers: [String]!
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""The output of our update `GroupUser` mutation."""
type UpdateGroupUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GroupUser` that was updated by this mutation."""
  groupUser: GroupUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `GroupUser`."""
  user: User

  """Reads a single `Group` that is related to this `GroupUser`."""
  group: Group

  """An edge for our `GroupUser`. May be used by Relay 1."""
  groupUserEdge(
    """The method to use when ordering `GroupUser`."""
    orderBy: [GroupUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupUsersEdge
}

"""All input for the `updateGroupUserByNodeId` mutation."""
input UpdateGroupUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GroupUser` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GroupUser` being updated.
  """
  patch: GroupUserPatch!
}

"""
Represents an update to a `GroupUser`. Fields that are set will be updated.
"""
input GroupUserPatch {
  id: Int
  userId: Int
  groupId: Int
  userType: UserType
  joinedOn: Datetime
  lastActive: Datetime
}

"""All input for the `updateGroupUser` mutation."""
input UpdateGroupUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GroupUser` being updated.
  """
  patch: GroupUserPatch!
  id: Int!
}

"""The output of our update `Group` mutation."""
type UpdateGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Group` that was updated by this mutation."""
  group: Group

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Language` that is related to this `Group`."""
  language: Language

  """Reads a single `LanguageSkillLevel` that is related to this `Group`."""
  languageSkillLevel: LanguageSkillLevel

  """An edge for our `Group`. May be used by Relay 1."""
  groupEdge(
    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsEdge
}

"""All input for the `updateGroupByNodeId` mutation."""
input UpdateGroupByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Group` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  patch: GroupPatch!
}

"""
Represents an update to a `Group`. Fields that are set will be updated.
"""
input GroupPatch {
  id: Int
  groupName: String
  global: Boolean
  languageId: Int
  languageSkillLevelId: Int
  createdAt: Datetime
  uuid: UUID
}

"""All input for the `updateGroup` mutation."""
input UpdateGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  patch: GroupPatch!
  id: Int!
}

"""All input for the `updateGroupByUuid` mutation."""
input UpdateGroupByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  patch: GroupPatch!
  uuid: UUID!
}

"""The output of our update `ChineseGuessCharacterQuestion` mutation."""
type UpdateChineseGuessCharacterQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChineseGuessCharacterQuestion` that was updated by this mutation."""
  chineseGuessCharacterQuestion: ChineseGuessCharacterQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `ChineseGuessCharacterQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `ChineseGuessCharacterQuestion`. May be used by Relay 1.
  """
  chineseGuessCharacterQuestionEdge(
    """The method to use when ordering `ChineseGuessCharacterQuestion`."""
    orderBy: [ChineseGuessCharacterQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChineseGuessCharacterQuestionsEdge
}

"""
All input for the `updateChineseGuessCharacterQuestionByNodeId` mutation.
"""
input UpdateChineseGuessCharacterQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChineseGuessCharacterQuestion` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ChineseGuessCharacterQuestion` being updated.
  """
  patch: ChineseGuessCharacterQuestionPatch!
}

"""
Represents an update to a `ChineseGuessCharacterQuestion`. Fields that are set will be updated.
"""
input ChineseGuessCharacterQuestionPatch {
  id: Int
  uuid: UUID
  character: String
  hint: String
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updateChineseGuessCharacterQuestion` mutation."""
input UpdateChineseGuessCharacterQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ChineseGuessCharacterQuestion` being updated.
  """
  patch: ChineseGuessCharacterQuestionPatch!
  id: Int!
}

"""
All input for the `updateChineseGuessCharacterQuestionByUuid` mutation.
"""
input UpdateChineseGuessCharacterQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ChineseGuessCharacterQuestion` being updated.
  """
  patch: ChineseGuessCharacterQuestionPatch!
  uuid: UUID!
}

"""The output of our update `InviteToken` mutation."""
type UpdateInviteTokenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `InviteToken` that was updated by this mutation."""
  inviteToken: InviteToken

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `InviteToken`."""
  user: User

  """An edge for our `InviteToken`. May be used by Relay 1."""
  inviteTokenEdge(
    """The method to use when ordering `InviteToken`."""
    orderBy: [InviteTokensOrderBy!] = [PRIMARY_KEY_ASC]
  ): InviteTokensEdge
}

"""All input for the `updateInviteTokenByNodeId` mutation."""
input UpdateInviteTokenByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `InviteToken` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `InviteToken` being updated.
  """
  patch: InviteTokenPatch!
}

"""
Represents an update to a `InviteToken`. Fields that are set will be updated.
"""
input InviteTokenPatch {
  id: Int
  userId: Int
  inviteToken: String
  createdAt: Datetime
  description: String
}

"""All input for the `updateInviteToken` mutation."""
input UpdateInviteTokenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `InviteToken` being updated.
  """
  patch: InviteTokenPatch!
  id: Int!
}

"""The output of our update `LanguageSkillLevel` mutation."""
type UpdateLanguageSkillLevelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LanguageSkillLevel` that was updated by this mutation."""
  languageSkillLevel: LanguageSkillLevel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LanguageSkillLevel`. May be used by Relay 1."""
  languageSkillLevelEdge(
    """The method to use when ordering `LanguageSkillLevel`."""
    orderBy: [LanguageSkillLevelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguageSkillLevelsEdge
}

"""All input for the `updateLanguageSkillLevelByNodeId` mutation."""
input UpdateLanguageSkillLevelByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LanguageSkillLevel` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `LanguageSkillLevel` being updated.
  """
  patch: LanguageSkillLevelPatch!
}

"""
Represents an update to a `LanguageSkillLevel`. Fields that are set will be updated.
"""
input LanguageSkillLevelPatch {
  id: Int
  name: String
}

"""All input for the `updateLanguageSkillLevel` mutation."""
input UpdateLanguageSkillLevelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LanguageSkillLevel` being updated.
  """
  patch: LanguageSkillLevelPatch!
  id: Int!
}

"""The output of our update `Language` mutation."""
type UpdateLanguagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Language` that was updated by this mutation."""
  language: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Language`. May be used by Relay 1."""
  languageEdge(
    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguagesEdge
}

"""All input for the `updateLanguageByNodeId` mutation."""
input UpdateLanguageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Language` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Language` being updated.
  """
  patch: LanguagePatch!
}

"""
Represents an update to a `Language`. Fields that are set will be updated.
"""
input LanguagePatch {
  id: Int

  """ISO 3166-1 alpha-2 standardized code"""
  alpha2: String
  englishName: String
  createdAt: Datetime
}

"""All input for the `updateLanguage` mutation."""
input UpdateLanguageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Language` being updated.
  """
  patch: LanguagePatch!
  id: Int!
}

"""All input for the `updateLanguageByAlpha2` mutation."""
input UpdateLanguageByAlpha2Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Language` being updated.
  """
  patch: LanguagePatch!

  """ISO 3166-1 alpha-2 standardized code"""
  alpha2: String!
}

"""All input for the `updateLanguageByEnglishName` mutation."""
input UpdateLanguageByEnglishNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Language` being updated.
  """
  patch: LanguagePatch!
  englishName: String!
}

"""The output of our update `MessagePreview` mutation."""
type UpdateMessagePreviewPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MessagePreview` that was updated by this mutation."""
  messagePreview: MessagePreview

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Message` that is related to this `MessagePreview`."""
  message: Message

  """An edge for our `MessagePreview`. May be used by Relay 1."""
  messagePreviewEdge(
    """The method to use when ordering `MessagePreview`."""
    orderBy: [MessagePreviewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessagePreviewsEdge
}

"""All input for the `updateMessagePreviewByNodeId` mutation."""
input UpdateMessagePreviewByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MessagePreview` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MessagePreview` being updated.
  """
  patch: MessagePreviewPatch!
}

"""
Represents an update to a `MessagePreview`. Fields that are set will be updated.
"""
input MessagePreviewPatch {
  id: Int
  uuid: UUID

  """Basename without extension"""
  filename: String

  """Extension without leading dot"""
  extension: String
  messageId: Int
  createdAt: Datetime
}

"""All input for the `updateMessagePreview` mutation."""
input UpdateMessagePreviewInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MessagePreview` being updated.
  """
  patch: MessagePreviewPatch!
  id: Int!
}

"""All input for the `updateMessagePreviewByUuid` mutation."""
input UpdateMessagePreviewByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MessagePreview` being updated.
  """
  patch: MessagePreviewPatch!
  uuid: UUID!
}

"""The output of our update `Message` mutation."""
type UpdateMessagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Message` that was updated by this mutation."""
  message: Message

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Message`."""
  sender: User

  """Reads a single `User` that is related to this `Message`."""
  recipient: User

  """Reads a single `Group` that is related to this `Message`."""
  recipientGroup: Group

  """Reads a single `Message` that is related to this `Message`."""
  parentMessage: Message

  """An edge for our `Message`. May be used by Relay 1."""
  messageEdge(
    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessagesEdge
}

"""All input for the `updateMessageByNodeId` mutation."""
input UpdateMessageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Message` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Message` being updated.
  """
  patch: MessagePatch!
}

"""
Represents an update to a `Message`. Fields that are set will be updated.
"""
input MessagePatch {
  id: Int
  uuid: UUID
  senderId: Int
  recipientId: Int
  recipientGroupId: Int
  body: String
  parentMessageId: Int
  createdAt: Datetime
}

"""All input for the `updateMessage` mutation."""
input UpdateMessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Message` being updated.
  """
  patch: MessagePatch!
  id: Int!
}

"""All input for the `updateMessageByUuid` mutation."""
input UpdateMessageByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Message` being updated.
  """
  patch: MessagePatch!
  uuid: UUID!
}

"""The output of our update `NotificationChannel` mutation."""
type UpdateNotificationChannelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NotificationChannel` that was updated by this mutation."""
  notificationChannel: NotificationChannel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NotificationChannel`. May be used by Relay 1."""
  notificationChannelEdge(
    """The method to use when ordering `NotificationChannel`."""
    orderBy: [NotificationChannelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NotificationChannelsEdge
}

"""All input for the `updateNotificationChannelByNodeId` mutation."""
input UpdateNotificationChannelByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NotificationChannel` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `NotificationChannel` being updated.
  """
  patch: NotificationChannelPatch!
}

"""
Represents an update to a `NotificationChannel`. Fields that are set will be updated.
"""
input NotificationChannelPatch {
  id: Int
  uuid: UUID
  name: String
  createdAt: Datetime
}

"""All input for the `updateNotificationChannel` mutation."""
input UpdateNotificationChannelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `NotificationChannel` being updated.
  """
  patch: NotificationChannelPatch!
  id: Int!
}

"""All input for the `updateNotificationChannelByUuid` mutation."""
input UpdateNotificationChannelByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `NotificationChannel` being updated.
  """
  patch: NotificationChannelPatch!
  uuid: UUID!
}

"""All input for the `updateNotificationChannelByName` mutation."""
input UpdateNotificationChannelByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `NotificationChannel` being updated.
  """
  patch: NotificationChannelPatch!
  name: String!
}

"""The output of our update `Notification` mutation."""
type UpdateNotificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Notification` that was updated by this mutation."""
  notification: Notification

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Notification`."""
  recipient: User

  """
  Reads a single `NotificationChannel` that is related to this `Notification`.
  """
  channel: NotificationChannel

  """Reads a single `Group` that is related to this `Notification`."""
  recipientGroup: Group

  """An edge for our `Notification`. May be used by Relay 1."""
  notificationEdge(
    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NotificationsEdge
}

"""All input for the `updateNotificationByNodeId` mutation."""
input UpdateNotificationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Notification` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Notification` being updated.
  """
  patch: NotificationPatch!
}

"""
Represents an update to a `Notification`. Fields that are set will be updated.
"""
input NotificationPatch {
  id: Int
  uuid: UUID
  recipientId: Int
  channelId: Int
  params: JSON
  sentAt: Datetime
  withheldUntil: Datetime
  expiresAt: Datetime
  readAt: Datetime
  createdAt: Datetime
  recipientGroupId: Int
}

"""All input for the `updateNotification` mutation."""
input UpdateNotificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Notification` being updated.
  """
  patch: NotificationPatch!
  id: Int!
}

"""All input for the `updateNotificationByUuid` mutation."""
input UpdateNotificationByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Notification` being updated.
  """
  patch: NotificationPatch!
  uuid: UUID!
}

"""The output of our update `PostLike` mutation."""
type UpdatePostLikePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PostLike` that was updated by this mutation."""
  postLike: PostLike

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `PostLike`."""
  user: User

  """Reads a single `Post` that is related to this `PostLike`."""
  post: Post

  """An edge for our `PostLike`. May be used by Relay 1."""
  postLikeEdge(
    """The method to use when ordering `PostLike`."""
    orderBy: [PostLikesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostLikesEdge
}

"""All input for the `updatePostLikeByNodeId` mutation."""
input UpdatePostLikeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PostLike` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PostLike` being updated.
  """
  patch: PostLikePatch!
}

"""
Represents an update to a `PostLike`. Fields that are set will be updated.
"""
input PostLikePatch {
  id: Int
  userId: Int
  postId: Int
  createdAt: Datetime
}

"""All input for the `updatePostLike` mutation."""
input UpdatePostLikeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PostLike` being updated.
  """
  patch: PostLikePatch!
  id: Int!
}

"""The output of our update `PostRecording` mutation."""
type UpdatePostRecordingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PostRecording` that was updated by this mutation."""
  postRecording: PostRecording

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `PostRecording`."""
  user: User

  """Reads a single `Post` that is related to this `PostRecording`."""
  post: Post

  """An edge for our `PostRecording`. May be used by Relay 1."""
  postRecordingEdge(
    """The method to use when ordering `PostRecording`."""
    orderBy: [PostRecordingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostRecordingsEdge
}

"""All input for the `updatePostRecordingByNodeId` mutation."""
input UpdatePostRecordingByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PostRecording` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PostRecording` being updated.
  """
  patch: PostRecordingPatch!
}

"""
Represents an update to a `PostRecording`. Fields that are set will be updated.
"""
input PostRecordingPatch {
  id: Int
  uuid: UUID
  userId: Int
  postId: Int

  """Basename without extension"""
  filename: String

  """Extension without leading dot"""
  extension: String
  createdAt: Datetime
}

"""All input for the `updatePostRecording` mutation."""
input UpdatePostRecordingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PostRecording` being updated.
  """
  patch: PostRecordingPatch!
  id: Int!
}

"""All input for the `updatePostRecordingByUuid` mutation."""
input UpdatePostRecordingByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PostRecording` being updated.
  """
  patch: PostRecordingPatch!
  uuid: UUID!
}

"""The output of our update `Post` mutation."""
type UpdatePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was updated by this mutation."""
  post: Post

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Post`."""
  author: User

  """Reads a single `Post` that is related to this `Post`."""
  parentPost: Post

  """Reads a single `Language` that is related to this `Post`."""
  language: Language

  """Reads a single `Prompt` that is related to this `Post`."""
  prompt: Prompt

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge
}

"""All input for the `updatePostByNodeId` mutation."""
input UpdatePostByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Post` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Post` being updated.
  """
  patch: PostPatch!
}

"""Represents an update to a `Post`. Fields that are set will be updated."""
input PostPatch {
  id: Int
  uuid: UUID
  authorId: Int
  body: String
  parentPostId: Int
  createdAt: Datetime
  languageId: Int
  promptId: Int
}

"""All input for the `updatePost` mutation."""
input UpdatePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Post` being updated.
  """
  patch: PostPatch!
  id: Int!
}

"""All input for the `updatePostByUuid` mutation."""
input UpdatePostByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Post` being updated.
  """
  patch: PostPatch!
  uuid: UUID!
}

"""The output of our update `Prompt` mutation."""
type UpdatePromptPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Prompt` that was updated by this mutation."""
  prompt: Prompt

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Language` that is related to this `Prompt`."""
  language: Language

  """Reads a single `LanguageSkillLevel` that is related to this `Prompt`."""
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `Prompt`. May be used by Relay 1."""
  promptEdge(
    """The method to use when ordering `Prompt`."""
    orderBy: [PromptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PromptsEdge
}

"""All input for the `updatePromptByNodeId` mutation."""
input UpdatePromptByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Prompt` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Prompt` being updated.
  """
  patch: PromptPatch!
}

"""
Represents an update to a `Prompt`. Fields that are set will be updated.
"""
input PromptPatch {
  id: Int
  uuid: UUID
  languageId: Int
  recommendedSkillLevelId: Int
  type: PromptType
  contentEn: String
  contentDe: String
  contentZh: String
  createdAt: Datetime
  contentEs: String
  contentFr: String
  contentPt: String
  contentRu: String
  contentJa: String
  contentKo: String
  contentIt: String
}

"""All input for the `updatePrompt` mutation."""
input UpdatePromptInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Prompt` being updated.
  """
  patch: PromptPatch!
  id: Int!
}

"""All input for the `updatePromptByUuid` mutation."""
input UpdatePromptByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Prompt` being updated.
  """
  patch: PromptPatch!
  uuid: UUID!
}

"""The output of our update `GermanRandomQuestion` mutation."""
type UpdateGermanRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GermanRandomQuestion` that was updated by this mutation."""
  germanRandomQuestion: GermanRandomQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `GermanRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `GermanRandomQuestion`. May be used by Relay 1."""
  germanRandomQuestionEdge(
    """The method to use when ordering `GermanRandomQuestion`."""
    orderBy: [GermanRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GermanRandomQuestionsEdge
}

"""All input for the `updateGermanRandomQuestionByNodeId` mutation."""
input UpdateGermanRandomQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GermanRandomQuestion` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GermanRandomQuestion` being updated.
  """
  patch: GermanRandomQuestionPatch!
}

"""
Represents an update to a `GermanRandomQuestion`. Fields that are set will be updated.
"""
input GermanRandomQuestionPatch {
  id: Int
  uuid: UUID
  question: String
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updateGermanRandomQuestion` mutation."""
input UpdateGermanRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GermanRandomQuestion` being updated.
  """
  patch: GermanRandomQuestionPatch!
  id: Int!
}

"""All input for the `updateGermanRandomQuestionByUuid` mutation."""
input UpdateGermanRandomQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GermanRandomQuestion` being updated.
  """
  patch: GermanRandomQuestionPatch!
  uuid: UUID!
}

"""The output of our update `EnglishRandomQuestion` mutation."""
type UpdateEnglishRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EnglishRandomQuestion` that was updated by this mutation."""
  englishRandomQuestion: EnglishRandomQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `EnglishRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `EnglishRandomQuestion`. May be used by Relay 1."""
  englishRandomQuestionEdge(
    """The method to use when ordering `EnglishRandomQuestion`."""
    orderBy: [EnglishRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EnglishRandomQuestionsEdge
}

"""All input for the `updateEnglishRandomQuestionByNodeId` mutation."""
input UpdateEnglishRandomQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EnglishRandomQuestion` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `EnglishRandomQuestion` being updated.
  """
  patch: EnglishRandomQuestionPatch!
}

"""
Represents an update to a `EnglishRandomQuestion`. Fields that are set will be updated.
"""
input EnglishRandomQuestionPatch {
  id: Int
  uuid: UUID
  question: String
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updateEnglishRandomQuestion` mutation."""
input UpdateEnglishRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EnglishRandomQuestion` being updated.
  """
  patch: EnglishRandomQuestionPatch!
  id: Int!
}

"""All input for the `updateEnglishRandomQuestionByUuid` mutation."""
input UpdateEnglishRandomQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EnglishRandomQuestion` being updated.
  """
  patch: EnglishRandomQuestionPatch!
  uuid: UUID!
}

"""The output of our update `SpanishRandomQuestion` mutation."""
type UpdateSpanishRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SpanishRandomQuestion` that was updated by this mutation."""
  spanishRandomQuestion: SpanishRandomQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `SpanishRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `SpanishRandomQuestion`. May be used by Relay 1."""
  spanishRandomQuestionEdge(
    """The method to use when ordering `SpanishRandomQuestion`."""
    orderBy: [SpanishRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpanishRandomQuestionsEdge
}

"""All input for the `updateSpanishRandomQuestionByNodeId` mutation."""
input UpdateSpanishRandomQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SpanishRandomQuestion` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SpanishRandomQuestion` being updated.
  """
  patch: SpanishRandomQuestionPatch!
}

"""
Represents an update to a `SpanishRandomQuestion`. Fields that are set will be updated.
"""
input SpanishRandomQuestionPatch {
  id: Int
  uuid: UUID
  question: String
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updateSpanishRandomQuestion` mutation."""
input UpdateSpanishRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SpanishRandomQuestion` being updated.
  """
  patch: SpanishRandomQuestionPatch!
  id: Int!
}

"""All input for the `updateSpanishRandomQuestionByUuid` mutation."""
input UpdateSpanishRandomQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SpanishRandomQuestion` being updated.
  """
  patch: SpanishRandomQuestionPatch!
  uuid: UUID!
}

"""The output of our update `FrenchRandomQuestion` mutation."""
type UpdateFrenchRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FrenchRandomQuestion` that was updated by this mutation."""
  frenchRandomQuestion: FrenchRandomQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `FrenchRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `FrenchRandomQuestion`. May be used by Relay 1."""
  frenchRandomQuestionEdge(
    """The method to use when ordering `FrenchRandomQuestion`."""
    orderBy: [FrenchRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FrenchRandomQuestionsEdge
}

"""All input for the `updateFrenchRandomQuestionByNodeId` mutation."""
input UpdateFrenchRandomQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FrenchRandomQuestion` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `FrenchRandomQuestion` being updated.
  """
  patch: FrenchRandomQuestionPatch!
}

"""
Represents an update to a `FrenchRandomQuestion`. Fields that are set will be updated.
"""
input FrenchRandomQuestionPatch {
  id: Int
  uuid: UUID
  question: String
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updateFrenchRandomQuestion` mutation."""
input UpdateFrenchRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FrenchRandomQuestion` being updated.
  """
  patch: FrenchRandomQuestionPatch!
  id: Int!
}

"""All input for the `updateFrenchRandomQuestionByUuid` mutation."""
input UpdateFrenchRandomQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FrenchRandomQuestion` being updated.
  """
  patch: FrenchRandomQuestionPatch!
  uuid: UUID!
}

"""The output of our update `ItalianRandomQuestion` mutation."""
type UpdateItalianRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ItalianRandomQuestion` that was updated by this mutation."""
  italianRandomQuestion: ItalianRandomQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `ItalianRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `ItalianRandomQuestion`. May be used by Relay 1."""
  italianRandomQuestionEdge(
    """The method to use when ordering `ItalianRandomQuestion`."""
    orderBy: [ItalianRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItalianRandomQuestionsEdge
}

"""All input for the `updateItalianRandomQuestionByNodeId` mutation."""
input UpdateItalianRandomQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ItalianRandomQuestion` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ItalianRandomQuestion` being updated.
  """
  patch: ItalianRandomQuestionPatch!
}

"""
Represents an update to a `ItalianRandomQuestion`. Fields that are set will be updated.
"""
input ItalianRandomQuestionPatch {
  id: Int
  uuid: UUID
  question: String
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updateItalianRandomQuestion` mutation."""
input UpdateItalianRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ItalianRandomQuestion` being updated.
  """
  patch: ItalianRandomQuestionPatch!
  id: Int!
}

"""All input for the `updateItalianRandomQuestionByUuid` mutation."""
input UpdateItalianRandomQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ItalianRandomQuestion` being updated.
  """
  patch: ItalianRandomQuestionPatch!
  uuid: UUID!
}

"""The output of our update `JapaneseRandomQuestion` mutation."""
type UpdateJapaneseRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `JapaneseRandomQuestion` that was updated by this mutation."""
  japaneseRandomQuestion: JapaneseRandomQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `JapaneseRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `JapaneseRandomQuestion`. May be used by Relay 1."""
  japaneseRandomQuestionEdge(
    """The method to use when ordering `JapaneseRandomQuestion`."""
    orderBy: [JapaneseRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JapaneseRandomQuestionsEdge
}

"""All input for the `updateJapaneseRandomQuestionByNodeId` mutation."""
input UpdateJapaneseRandomQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `JapaneseRandomQuestion` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `JapaneseRandomQuestion` being updated.
  """
  patch: JapaneseRandomQuestionPatch!
}

"""
Represents an update to a `JapaneseRandomQuestion`. Fields that are set will be updated.
"""
input JapaneseRandomQuestionPatch {
  id: Int
  uuid: UUID
  question: String
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updateJapaneseRandomQuestion` mutation."""
input UpdateJapaneseRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `JapaneseRandomQuestion` being updated.
  """
  patch: JapaneseRandomQuestionPatch!
  id: Int!
}

"""All input for the `updateJapaneseRandomQuestionByUuid` mutation."""
input UpdateJapaneseRandomQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `JapaneseRandomQuestion` being updated.
  """
  patch: JapaneseRandomQuestionPatch!
  uuid: UUID!
}

"""The output of our update `KoreanRandomQuestion` mutation."""
type UpdateKoreanRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `KoreanRandomQuestion` that was updated by this mutation."""
  koreanRandomQuestion: KoreanRandomQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `KoreanRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `KoreanRandomQuestion`. May be used by Relay 1."""
  koreanRandomQuestionEdge(
    """The method to use when ordering `KoreanRandomQuestion`."""
    orderBy: [KoreanRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): KoreanRandomQuestionsEdge
}

"""All input for the `updateKoreanRandomQuestionByNodeId` mutation."""
input UpdateKoreanRandomQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `KoreanRandomQuestion` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `KoreanRandomQuestion` being updated.
  """
  patch: KoreanRandomQuestionPatch!
}

"""
Represents an update to a `KoreanRandomQuestion`. Fields that are set will be updated.
"""
input KoreanRandomQuestionPatch {
  id: Int
  uuid: UUID
  question: String
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updateKoreanRandomQuestion` mutation."""
input UpdateKoreanRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `KoreanRandomQuestion` being updated.
  """
  patch: KoreanRandomQuestionPatch!
  id: Int!
}

"""All input for the `updateKoreanRandomQuestionByUuid` mutation."""
input UpdateKoreanRandomQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `KoreanRandomQuestion` being updated.
  """
  patch: KoreanRandomQuestionPatch!
  uuid: UUID!
}

"""The output of our update `PortugueseRandomQuestion` mutation."""
type UpdatePortugueseRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PortugueseRandomQuestion` that was updated by this mutation."""
  portugueseRandomQuestion: PortugueseRandomQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `PortugueseRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `PortugueseRandomQuestion`. May be used by Relay 1."""
  portugueseRandomQuestionEdge(
    """The method to use when ordering `PortugueseRandomQuestion`."""
    orderBy: [PortugueseRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PortugueseRandomQuestionsEdge
}

"""All input for the `updatePortugueseRandomQuestionByNodeId` mutation."""
input UpdatePortugueseRandomQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PortugueseRandomQuestion` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PortugueseRandomQuestion` being updated.
  """
  patch: PortugueseRandomQuestionPatch!
}

"""
Represents an update to a `PortugueseRandomQuestion`. Fields that are set will be updated.
"""
input PortugueseRandomQuestionPatch {
  id: Int
  uuid: UUID
  question: String
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updatePortugueseRandomQuestion` mutation."""
input UpdatePortugueseRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PortugueseRandomQuestion` being updated.
  """
  patch: PortugueseRandomQuestionPatch!
  id: Int!
}

"""All input for the `updatePortugueseRandomQuestionByUuid` mutation."""
input UpdatePortugueseRandomQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PortugueseRandomQuestion` being updated.
  """
  patch: PortugueseRandomQuestionPatch!
  uuid: UUID!
}

"""The output of our update `RussianRandomQuestion` mutation."""
type UpdateRussianRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RussianRandomQuestion` that was updated by this mutation."""
  russianRandomQuestion: RussianRandomQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `RussianRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `RussianRandomQuestion`. May be used by Relay 1."""
  russianRandomQuestionEdge(
    """The method to use when ordering `RussianRandomQuestion`."""
    orderBy: [RussianRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RussianRandomQuestionsEdge
}

"""All input for the `updateRussianRandomQuestionByNodeId` mutation."""
input UpdateRussianRandomQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RussianRandomQuestion` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RussianRandomQuestion` being updated.
  """
  patch: RussianRandomQuestionPatch!
}

"""
Represents an update to a `RussianRandomQuestion`. Fields that are set will be updated.
"""
input RussianRandomQuestionPatch {
  id: Int
  uuid: UUID
  question: String
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updateRussianRandomQuestion` mutation."""
input UpdateRussianRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RussianRandomQuestion` being updated.
  """
  patch: RussianRandomQuestionPatch!
  id: Int!
}

"""All input for the `updateRussianRandomQuestionByUuid` mutation."""
input UpdateRussianRandomQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RussianRandomQuestion` being updated.
  """
  patch: RussianRandomQuestionPatch!
  uuid: UUID!
}

"""The output of our update `ChineseRandomQuestion` mutation."""
type UpdateChineseRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChineseRandomQuestion` that was updated by this mutation."""
  chineseRandomQuestion: ChineseRandomQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `ChineseRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `ChineseRandomQuestion`. May be used by Relay 1."""
  chineseRandomQuestionEdge(
    """The method to use when ordering `ChineseRandomQuestion`."""
    orderBy: [ChineseRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChineseRandomQuestionsEdge
}

"""All input for the `updateChineseRandomQuestionByNodeId` mutation."""
input UpdateChineseRandomQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChineseRandomQuestion` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ChineseRandomQuestion` being updated.
  """
  patch: ChineseRandomQuestionPatch!
}

"""
Represents an update to a `ChineseRandomQuestion`. Fields that are set will be updated.
"""
input ChineseRandomQuestionPatch {
  id: Int
  uuid: UUID
  question: String
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updateChineseRandomQuestion` mutation."""
input UpdateChineseRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ChineseRandomQuestion` being updated.
  """
  patch: ChineseRandomQuestionPatch!
  id: Int!
}

"""All input for the `updateChineseRandomQuestionByUuid` mutation."""
input UpdateChineseRandomQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ChineseRandomQuestion` being updated.
  """
  patch: ChineseRandomQuestionPatch!
  uuid: UUID!
}

"""The output of our update `UserDevice` mutation."""
type UpdateUserDevicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserDevice` that was updated by this mutation."""
  userDevice: UserDevice

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserDevice`."""
  user: User

  """An edge for our `UserDevice`. May be used by Relay 1."""
  userDeviceEdge(
    """The method to use when ordering `UserDevice`."""
    orderBy: [UserDevicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserDevicesEdge
}

"""All input for the `updateUserDeviceByNodeId` mutation."""
input UpdateUserDeviceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserDevice` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserDevice` being updated.
  """
  patch: UserDevicePatch!
}

"""
Represents an update to a `UserDevice`. Fields that are set will be updated.
"""
input UserDevicePatch {
  id: Int
  uuid: UUID
  userId: Int
  fcmToken: String
  createdAt: Datetime
}

"""All input for the `updateUserDevice` mutation."""
input UpdateUserDeviceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserDevice` being updated.
  """
  patch: UserDevicePatch!
  id: Int!
}

"""All input for the `updateUserDeviceByUuid` mutation."""
input UpdateUserDeviceByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserDevice` being updated.
  """
  patch: UserDevicePatch!
  uuid: UUID!
}

"""All input for the `updateUserDeviceByFcmToken` mutation."""
input UpdateUserDeviceByFcmTokenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserDevice` being updated.
  """
  patch: UserDevicePatch!
  fcmToken: String!
}

"""The output of our update `UserLanguage` mutation."""
type UpdateUserLanguagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserLanguage` that was updated by this mutation."""
  userLanguage: UserLanguage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserLanguage`."""
  user: User

  """Reads a single `Language` that is related to this `UserLanguage`."""
  language: Language

  """
  Reads a single `LanguageSkillLevel` that is related to this `UserLanguage`.
  """
  languageSkillLevel: LanguageSkillLevel

  """An edge for our `UserLanguage`. May be used by Relay 1."""
  userLanguageEdge(
    """The method to use when ordering `UserLanguage`."""
    orderBy: [UserLanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserLanguagesEdge
}

"""All input for the `updateUserLanguageByNodeId` mutation."""
input UpdateUserLanguageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserLanguage` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserLanguage` being updated.
  """
  patch: UserLanguagePatch!
}

"""
Represents an update to a `UserLanguage`. Fields that are set will be updated.
"""
input UserLanguagePatch {
  id: Int
  userId: Int
  languageId: Int
  languageSkillLevelId: Int
  native: Boolean
  createdAt: Datetime
}

"""All input for the `updateUserLanguage` mutation."""
input UpdateUserLanguageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserLanguage` being updated.
  """
  patch: UserLanguagePatch!
  id: Int!
}

"""The output of our update `UserSession` mutation."""
type UpdateUserSessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserSession` that was updated by this mutation."""
  userSession: UserSession

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserSession`. May be used by Relay 1."""
  userSessionEdge(
    """The method to use when ordering `UserSession`."""
    orderBy: [UserSessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserSessionsEdge
}

"""All input for the `updateUserSessionByNodeId` mutation."""
input UpdateUserSessionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserSession` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserSession` being updated.
  """
  patch: UserSessionPatch!
}

"""
Represents an update to a `UserSession`. Fields that are set will be updated.
"""
input UserSessionPatch {
  sid: String
  sess: JSON
  expire: Datetime
  createdAt: Datetime
}

"""All input for the `updateUserSession` mutation."""
input UpdateUserSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserSession` being updated.
  """
  patch: UserSessionPatch!
  sid: String!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Language` that is related to this `User`."""
  languageByLocale: Language

  """Reads a single `InviteToken` that is related to this `User`."""
  signedUpWithToken: InviteToken

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `updateUserByNodeId` mutation."""
input UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  id: Int
  username: String
  email: String
  unconfirmedEmail: String
  gender: String
  bio: String
  lastActiveAt: Datetime
  createdAt: Datetime
  passwordHash: String
  uuid: UUID
  avatarUrl: String
  locale: Int
  googleId: String
  signedUpWithTokenId: Int
  emailNotificationsEnabled: Boolean
  emailUnsubscribeToken: String
  displayName: String
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  id: Int!
}

"""All input for the `updateUserByUsername` mutation."""
input UpdateUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  username: String!
}

"""All input for the `updateUserByEmail` mutation."""
input UpdateUserByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  email: String!
}

"""All input for the `updateUserByUuid` mutation."""
input UpdateUserByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  uuid: UUID!
}

"""All input for the `updateUserByEmailUnsubscribeToken` mutation."""
input UpdateUserByEmailUnsubscribeTokenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  emailUnsubscribeToken: String!
}

"""The output of our update `GermanWord` mutation."""
type UpdateGermanWordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GermanWord` that was updated by this mutation."""
  germanWord: GermanWord

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `GermanWord`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `GermanWord`. May be used by Relay 1."""
  germanWordEdge(
    """The method to use when ordering `GermanWord`."""
    orderBy: [GermanWordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GermanWordsEdge
}

"""All input for the `updateGermanWordByNodeId` mutation."""
input UpdateGermanWordByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GermanWord` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GermanWord` being updated.
  """
  patch: GermanWordPatch!
}

"""
Represents an update to a `GermanWord`. Fields that are set will be updated.
"""
input GermanWordPatch {
  id: Int
  uuid: UUID
  word: String

  """Ranges from 0 to 1 (higher is more frequent)"""
  frequency: Float
  length: Int
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updateGermanWord` mutation."""
input UpdateGermanWordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GermanWord` being updated.
  """
  patch: GermanWordPatch!
  id: Int!
}

"""All input for the `updateGermanWordByUuid` mutation."""
input UpdateGermanWordByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GermanWord` being updated.
  """
  patch: GermanWordPatch!
  uuid: UUID!
}

"""The output of our update `EnglishWord` mutation."""
type UpdateEnglishWordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EnglishWord` that was updated by this mutation."""
  englishWord: EnglishWord

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `EnglishWord`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `EnglishWord`. May be used by Relay 1."""
  englishWordEdge(
    """The method to use when ordering `EnglishWord`."""
    orderBy: [EnglishWordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EnglishWordsEdge
}

"""All input for the `updateEnglishWordByNodeId` mutation."""
input UpdateEnglishWordByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EnglishWord` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `EnglishWord` being updated.
  """
  patch: EnglishWordPatch!
}

"""
Represents an update to a `EnglishWord`. Fields that are set will be updated.
"""
input EnglishWordPatch {
  id: Int
  uuid: UUID
  word: String

  """Ranges from 0 to 1 (higher is more frequent)"""
  frequency: Float
  length: Int
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updateEnglishWord` mutation."""
input UpdateEnglishWordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EnglishWord` being updated.
  """
  patch: EnglishWordPatch!
  id: Int!
}

"""All input for the `updateEnglishWordByUuid` mutation."""
input UpdateEnglishWordByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EnglishWord` being updated.
  """
  patch: EnglishWordPatch!
  uuid: UUID!
}

"""The output of our update `SpanishWord` mutation."""
type UpdateSpanishWordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SpanishWord` that was updated by this mutation."""
  spanishWord: SpanishWord

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `SpanishWord`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `SpanishWord`. May be used by Relay 1."""
  spanishWordEdge(
    """The method to use when ordering `SpanishWord`."""
    orderBy: [SpanishWordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpanishWordsEdge
}

"""All input for the `updateSpanishWordByNodeId` mutation."""
input UpdateSpanishWordByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SpanishWord` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SpanishWord` being updated.
  """
  patch: SpanishWordPatch!
}

"""
Represents an update to a `SpanishWord`. Fields that are set will be updated.
"""
input SpanishWordPatch {
  id: Int
  uuid: UUID
  word: String

  """Ranges from 0 to 1 (higher is more frequent)"""
  frequency: Float
  length: Int
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updateSpanishWord` mutation."""
input UpdateSpanishWordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SpanishWord` being updated.
  """
  patch: SpanishWordPatch!
  id: Int!
}

"""All input for the `updateSpanishWordByUuid` mutation."""
input UpdateSpanishWordByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SpanishWord` being updated.
  """
  patch: SpanishWordPatch!
  uuid: UUID!
}

"""The output of our update `FrenchWord` mutation."""
type UpdateFrenchWordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FrenchWord` that was updated by this mutation."""
  frenchWord: FrenchWord

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `FrenchWord`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `FrenchWord`. May be used by Relay 1."""
  frenchWordEdge(
    """The method to use when ordering `FrenchWord`."""
    orderBy: [FrenchWordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FrenchWordsEdge
}

"""All input for the `updateFrenchWordByNodeId` mutation."""
input UpdateFrenchWordByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FrenchWord` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `FrenchWord` being updated.
  """
  patch: FrenchWordPatch!
}

"""
Represents an update to a `FrenchWord`. Fields that are set will be updated.
"""
input FrenchWordPatch {
  id: Int
  uuid: UUID
  word: String

  """Ranges from 0 to 1 (higher is more frequent)"""
  frequency: Float
  length: Int
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updateFrenchWord` mutation."""
input UpdateFrenchWordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FrenchWord` being updated.
  """
  patch: FrenchWordPatch!
  id: Int!
}

"""All input for the `updateFrenchWordByUuid` mutation."""
input UpdateFrenchWordByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FrenchWord` being updated.
  """
  patch: FrenchWordPatch!
  uuid: UUID!
}

"""The output of our update `ItalianWord` mutation."""
type UpdateItalianWordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ItalianWord` that was updated by this mutation."""
  italianWord: ItalianWord

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `ItalianWord`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `ItalianWord`. May be used by Relay 1."""
  italianWordEdge(
    """The method to use when ordering `ItalianWord`."""
    orderBy: [ItalianWordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItalianWordsEdge
}

"""All input for the `updateItalianWordByNodeId` mutation."""
input UpdateItalianWordByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ItalianWord` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ItalianWord` being updated.
  """
  patch: ItalianWordPatch!
}

"""
Represents an update to a `ItalianWord`. Fields that are set will be updated.
"""
input ItalianWordPatch {
  id: Int
  uuid: UUID
  word: String

  """Ranges from 0 to 1 (higher is more frequent)"""
  frequency: Float
  length: Int
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updateItalianWord` mutation."""
input UpdateItalianWordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ItalianWord` being updated.
  """
  patch: ItalianWordPatch!
  id: Int!
}

"""All input for the `updateItalianWordByUuid` mutation."""
input UpdateItalianWordByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ItalianWord` being updated.
  """
  patch: ItalianWordPatch!
  uuid: UUID!
}

"""The output of our update `PortugueseWord` mutation."""
type UpdatePortugueseWordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PortugueseWord` that was updated by this mutation."""
  portugueseWord: PortugueseWord

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `PortugueseWord`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `PortugueseWord`. May be used by Relay 1."""
  portugueseWordEdge(
    """The method to use when ordering `PortugueseWord`."""
    orderBy: [PortugueseWordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PortugueseWordsEdge
}

"""All input for the `updatePortugueseWordByNodeId` mutation."""
input UpdatePortugueseWordByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PortugueseWord` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PortugueseWord` being updated.
  """
  patch: PortugueseWordPatch!
}

"""
Represents an update to a `PortugueseWord`. Fields that are set will be updated.
"""
input PortugueseWordPatch {
  id: Int
  uuid: UUID
  word: String

  """Ranges from 0 to 1 (higher is more frequent)"""
  frequency: Float
  length: Int
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updatePortugueseWord` mutation."""
input UpdatePortugueseWordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PortugueseWord` being updated.
  """
  patch: PortugueseWordPatch!
  id: Int!
}

"""All input for the `updatePortugueseWordByUuid` mutation."""
input UpdatePortugueseWordByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PortugueseWord` being updated.
  """
  patch: PortugueseWordPatch!
  uuid: UUID!
}

"""The output of our update `RussianWord` mutation."""
type UpdateRussianWordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RussianWord` that was updated by this mutation."""
  russianWord: RussianWord

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `RussianWord`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `RussianWord`. May be used by Relay 1."""
  russianWordEdge(
    """The method to use when ordering `RussianWord`."""
    orderBy: [RussianWordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RussianWordsEdge
}

"""All input for the `updateRussianWordByNodeId` mutation."""
input UpdateRussianWordByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RussianWord` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RussianWord` being updated.
  """
  patch: RussianWordPatch!
}

"""
Represents an update to a `RussianWord`. Fields that are set will be updated.
"""
input RussianWordPatch {
  id: Int
  uuid: UUID
  word: String

  """Ranges from 0 to 1 (higher is more frequent)"""
  frequency: Float
  length: Int
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updateRussianWord` mutation."""
input UpdateRussianWordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RussianWord` being updated.
  """
  patch: RussianWordPatch!
  id: Int!
}

"""All input for the `updateRussianWordByUuid` mutation."""
input UpdateRussianWordByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RussianWord` being updated.
  """
  patch: RussianWordPatch!
  uuid: UUID!
}

"""The output of our update `GermanWouldYouRatherQuestion` mutation."""
type UpdateGermanWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GermanWouldYouRatherQuestion` that was updated by this mutation."""
  germanWouldYouRatherQuestion: GermanWouldYouRatherQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `GermanWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `GermanWouldYouRatherQuestion`. May be used by Relay 1.
  """
  germanWouldYouRatherQuestionEdge(
    """The method to use when ordering `GermanWouldYouRatherQuestion`."""
    orderBy: [GermanWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GermanWouldYouRatherQuestionsEdge
}

"""
All input for the `updateGermanWouldYouRatherQuestionByNodeId` mutation.
"""
input UpdateGermanWouldYouRatherQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GermanWouldYouRatherQuestion` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GermanWouldYouRatherQuestion` being updated.
  """
  patch: GermanWouldYouRatherQuestionPatch!
}

"""
Represents an update to a `GermanWouldYouRatherQuestion`. Fields that are set will be updated.
"""
input GermanWouldYouRatherQuestionPatch {
  id: Int
  uuid: UUID
  question: String
  answers: [String]
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updateGermanWouldYouRatherQuestion` mutation."""
input UpdateGermanWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GermanWouldYouRatherQuestion` being updated.
  """
  patch: GermanWouldYouRatherQuestionPatch!
  id: Int!
}

"""All input for the `updateGermanWouldYouRatherQuestionByUuid` mutation."""
input UpdateGermanWouldYouRatherQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GermanWouldYouRatherQuestion` being updated.
  """
  patch: GermanWouldYouRatherQuestionPatch!
  uuid: UUID!
}

"""The output of our update `EnglishWouldYouRatherQuestion` mutation."""
type UpdateEnglishWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EnglishWouldYouRatherQuestion` that was updated by this mutation."""
  englishWouldYouRatherQuestion: EnglishWouldYouRatherQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `EnglishWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `EnglishWouldYouRatherQuestion`. May be used by Relay 1.
  """
  englishWouldYouRatherQuestionEdge(
    """The method to use when ordering `EnglishWouldYouRatherQuestion`."""
    orderBy: [EnglishWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EnglishWouldYouRatherQuestionsEdge
}

"""
All input for the `updateEnglishWouldYouRatherQuestionByNodeId` mutation.
"""
input UpdateEnglishWouldYouRatherQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EnglishWouldYouRatherQuestion` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `EnglishWouldYouRatherQuestion` being updated.
  """
  patch: EnglishWouldYouRatherQuestionPatch!
}

"""
Represents an update to a `EnglishWouldYouRatherQuestion`. Fields that are set will be updated.
"""
input EnglishWouldYouRatherQuestionPatch {
  id: Int
  uuid: UUID
  question: String
  answers: [String]
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updateEnglishWouldYouRatherQuestion` mutation."""
input UpdateEnglishWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EnglishWouldYouRatherQuestion` being updated.
  """
  patch: EnglishWouldYouRatherQuestionPatch!
  id: Int!
}

"""
All input for the `updateEnglishWouldYouRatherQuestionByUuid` mutation.
"""
input UpdateEnglishWouldYouRatherQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EnglishWouldYouRatherQuestion` being updated.
  """
  patch: EnglishWouldYouRatherQuestionPatch!
  uuid: UUID!
}

"""The output of our update `SpanishWouldYouRatherQuestion` mutation."""
type UpdateSpanishWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SpanishWouldYouRatherQuestion` that was updated by this mutation."""
  spanishWouldYouRatherQuestion: SpanishWouldYouRatherQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `SpanishWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `SpanishWouldYouRatherQuestion`. May be used by Relay 1.
  """
  spanishWouldYouRatherQuestionEdge(
    """The method to use when ordering `SpanishWouldYouRatherQuestion`."""
    orderBy: [SpanishWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpanishWouldYouRatherQuestionsEdge
}

"""
All input for the `updateSpanishWouldYouRatherQuestionByNodeId` mutation.
"""
input UpdateSpanishWouldYouRatherQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SpanishWouldYouRatherQuestion` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SpanishWouldYouRatherQuestion` being updated.
  """
  patch: SpanishWouldYouRatherQuestionPatch!
}

"""
Represents an update to a `SpanishWouldYouRatherQuestion`. Fields that are set will be updated.
"""
input SpanishWouldYouRatherQuestionPatch {
  id: Int
  uuid: UUID
  question: String
  answers: [String]
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updateSpanishWouldYouRatherQuestion` mutation."""
input UpdateSpanishWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SpanishWouldYouRatherQuestion` being updated.
  """
  patch: SpanishWouldYouRatherQuestionPatch!
  id: Int!
}

"""
All input for the `updateSpanishWouldYouRatherQuestionByUuid` mutation.
"""
input UpdateSpanishWouldYouRatherQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SpanishWouldYouRatherQuestion` being updated.
  """
  patch: SpanishWouldYouRatherQuestionPatch!
  uuid: UUID!
}

"""The output of our update `FrenchWouldYouRatherQuestion` mutation."""
type UpdateFrenchWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FrenchWouldYouRatherQuestion` that was updated by this mutation."""
  frenchWouldYouRatherQuestion: FrenchWouldYouRatherQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `FrenchWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `FrenchWouldYouRatherQuestion`. May be used by Relay 1.
  """
  frenchWouldYouRatherQuestionEdge(
    """The method to use when ordering `FrenchWouldYouRatherQuestion`."""
    orderBy: [FrenchWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FrenchWouldYouRatherQuestionsEdge
}

"""
All input for the `updateFrenchWouldYouRatherQuestionByNodeId` mutation.
"""
input UpdateFrenchWouldYouRatherQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FrenchWouldYouRatherQuestion` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `FrenchWouldYouRatherQuestion` being updated.
  """
  patch: FrenchWouldYouRatherQuestionPatch!
}

"""
Represents an update to a `FrenchWouldYouRatherQuestion`. Fields that are set will be updated.
"""
input FrenchWouldYouRatherQuestionPatch {
  id: Int
  uuid: UUID
  question: String
  answers: [String]
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updateFrenchWouldYouRatherQuestion` mutation."""
input UpdateFrenchWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FrenchWouldYouRatherQuestion` being updated.
  """
  patch: FrenchWouldYouRatherQuestionPatch!
  id: Int!
}

"""All input for the `updateFrenchWouldYouRatherQuestionByUuid` mutation."""
input UpdateFrenchWouldYouRatherQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FrenchWouldYouRatherQuestion` being updated.
  """
  patch: FrenchWouldYouRatherQuestionPatch!
  uuid: UUID!
}

"""The output of our update `ItalianWouldYouRatherQuestion` mutation."""
type UpdateItalianWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ItalianWouldYouRatherQuestion` that was updated by this mutation."""
  italianWouldYouRatherQuestion: ItalianWouldYouRatherQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `ItalianWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `ItalianWouldYouRatherQuestion`. May be used by Relay 1.
  """
  italianWouldYouRatherQuestionEdge(
    """The method to use when ordering `ItalianWouldYouRatherQuestion`."""
    orderBy: [ItalianWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItalianWouldYouRatherQuestionsEdge
}

"""
All input for the `updateItalianWouldYouRatherQuestionByNodeId` mutation.
"""
input UpdateItalianWouldYouRatherQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ItalianWouldYouRatherQuestion` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ItalianWouldYouRatherQuestion` being updated.
  """
  patch: ItalianWouldYouRatherQuestionPatch!
}

"""
Represents an update to a `ItalianWouldYouRatherQuestion`. Fields that are set will be updated.
"""
input ItalianWouldYouRatherQuestionPatch {
  id: Int
  uuid: UUID
  question: String
  answers: [String]
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updateItalianWouldYouRatherQuestion` mutation."""
input UpdateItalianWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ItalianWouldYouRatherQuestion` being updated.
  """
  patch: ItalianWouldYouRatherQuestionPatch!
  id: Int!
}

"""
All input for the `updateItalianWouldYouRatherQuestionByUuid` mutation.
"""
input UpdateItalianWouldYouRatherQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ItalianWouldYouRatherQuestion` being updated.
  """
  patch: ItalianWouldYouRatherQuestionPatch!
  uuid: UUID!
}

"""The output of our update `JapaneseWouldYouRatherQuestion` mutation."""
type UpdateJapaneseWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `JapaneseWouldYouRatherQuestion` that was updated by this mutation.
  """
  japaneseWouldYouRatherQuestion: JapaneseWouldYouRatherQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `JapaneseWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `JapaneseWouldYouRatherQuestion`. May be used by Relay 1.
  """
  japaneseWouldYouRatherQuestionEdge(
    """The method to use when ordering `JapaneseWouldYouRatherQuestion`."""
    orderBy: [JapaneseWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JapaneseWouldYouRatherQuestionsEdge
}

"""
All input for the `updateJapaneseWouldYouRatherQuestionByNodeId` mutation.
"""
input UpdateJapaneseWouldYouRatherQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `JapaneseWouldYouRatherQuestion` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `JapaneseWouldYouRatherQuestion` being updated.
  """
  patch: JapaneseWouldYouRatherQuestionPatch!
}

"""
Represents an update to a `JapaneseWouldYouRatherQuestion`. Fields that are set will be updated.
"""
input JapaneseWouldYouRatherQuestionPatch {
  id: Int
  uuid: UUID
  question: String
  answers: [String]
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updateJapaneseWouldYouRatherQuestion` mutation."""
input UpdateJapaneseWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `JapaneseWouldYouRatherQuestion` being updated.
  """
  patch: JapaneseWouldYouRatherQuestionPatch!
  id: Int!
}

"""
All input for the `updateJapaneseWouldYouRatherQuestionByUuid` mutation.
"""
input UpdateJapaneseWouldYouRatherQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `JapaneseWouldYouRatherQuestion` being updated.
  """
  patch: JapaneseWouldYouRatherQuestionPatch!
  uuid: UUID!
}

"""The output of our update `KoreanWouldYouRatherQuestion` mutation."""
type UpdateKoreanWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `KoreanWouldYouRatherQuestion` that was updated by this mutation."""
  koreanWouldYouRatherQuestion: KoreanWouldYouRatherQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `KoreanWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `KoreanWouldYouRatherQuestion`. May be used by Relay 1.
  """
  koreanWouldYouRatherQuestionEdge(
    """The method to use when ordering `KoreanWouldYouRatherQuestion`."""
    orderBy: [KoreanWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): KoreanWouldYouRatherQuestionsEdge
}

"""
All input for the `updateKoreanWouldYouRatherQuestionByNodeId` mutation.
"""
input UpdateKoreanWouldYouRatherQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `KoreanWouldYouRatherQuestion` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `KoreanWouldYouRatherQuestion` being updated.
  """
  patch: KoreanWouldYouRatherQuestionPatch!
}

"""
Represents an update to a `KoreanWouldYouRatherQuestion`. Fields that are set will be updated.
"""
input KoreanWouldYouRatherQuestionPatch {
  id: Int
  uuid: UUID
  question: String
  answers: [String]
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updateKoreanWouldYouRatherQuestion` mutation."""
input UpdateKoreanWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `KoreanWouldYouRatherQuestion` being updated.
  """
  patch: KoreanWouldYouRatherQuestionPatch!
  id: Int!
}

"""All input for the `updateKoreanWouldYouRatherQuestionByUuid` mutation."""
input UpdateKoreanWouldYouRatherQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `KoreanWouldYouRatherQuestion` being updated.
  """
  patch: KoreanWouldYouRatherQuestionPatch!
  uuid: UUID!
}

"""The output of our update `PortugueseWouldYouRatherQuestion` mutation."""
type UpdatePortugueseWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `PortugueseWouldYouRatherQuestion` that was updated by this mutation.
  """
  portugueseWouldYouRatherQuestion: PortugueseWouldYouRatherQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `PortugueseWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `PortugueseWouldYouRatherQuestion`. May be used by Relay 1.
  """
  portugueseWouldYouRatherQuestionEdge(
    """The method to use when ordering `PortugueseWouldYouRatherQuestion`."""
    orderBy: [PortugueseWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PortugueseWouldYouRatherQuestionsEdge
}

"""
All input for the `updatePortugueseWouldYouRatherQuestionByNodeId` mutation.
"""
input UpdatePortugueseWouldYouRatherQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PortugueseWouldYouRatherQuestion` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PortugueseWouldYouRatherQuestion` being updated.
  """
  patch: PortugueseWouldYouRatherQuestionPatch!
}

"""
Represents an update to a `PortugueseWouldYouRatherQuestion`. Fields that are set will be updated.
"""
input PortugueseWouldYouRatherQuestionPatch {
  id: Int
  uuid: UUID
  question: String
  answers: [String]
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updatePortugueseWouldYouRatherQuestion` mutation."""
input UpdatePortugueseWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PortugueseWouldYouRatherQuestion` being updated.
  """
  patch: PortugueseWouldYouRatherQuestionPatch!
  id: Int!
}

"""
All input for the `updatePortugueseWouldYouRatherQuestionByUuid` mutation.
"""
input UpdatePortugueseWouldYouRatherQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PortugueseWouldYouRatherQuestion` being updated.
  """
  patch: PortugueseWouldYouRatherQuestionPatch!
  uuid: UUID!
}

"""The output of our update `RussianWouldYouRatherQuestion` mutation."""
type UpdateRussianWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RussianWouldYouRatherQuestion` that was updated by this mutation."""
  russianWouldYouRatherQuestion: RussianWouldYouRatherQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `RussianWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `RussianWouldYouRatherQuestion`. May be used by Relay 1.
  """
  russianWouldYouRatherQuestionEdge(
    """The method to use when ordering `RussianWouldYouRatherQuestion`."""
    orderBy: [RussianWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RussianWouldYouRatherQuestionsEdge
}

"""
All input for the `updateRussianWouldYouRatherQuestionByNodeId` mutation.
"""
input UpdateRussianWouldYouRatherQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RussianWouldYouRatherQuestion` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RussianWouldYouRatherQuestion` being updated.
  """
  patch: RussianWouldYouRatherQuestionPatch!
}

"""
Represents an update to a `RussianWouldYouRatherQuestion`. Fields that are set will be updated.
"""
input RussianWouldYouRatherQuestionPatch {
  id: Int
  uuid: UUID
  question: String
  answers: [String]
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updateRussianWouldYouRatherQuestion` mutation."""
input UpdateRussianWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RussianWouldYouRatherQuestion` being updated.
  """
  patch: RussianWouldYouRatherQuestionPatch!
  id: Int!
}

"""
All input for the `updateRussianWouldYouRatherQuestionByUuid` mutation.
"""
input UpdateRussianWouldYouRatherQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RussianWouldYouRatherQuestion` being updated.
  """
  patch: RussianWouldYouRatherQuestionPatch!
  uuid: UUID!
}

"""The output of our update `ChineseWouldYouRatherQuestion` mutation."""
type UpdateChineseWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChineseWouldYouRatherQuestion` that was updated by this mutation."""
  chineseWouldYouRatherQuestion: ChineseWouldYouRatherQuestion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `ChineseWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `ChineseWouldYouRatherQuestion`. May be used by Relay 1.
  """
  chineseWouldYouRatherQuestionEdge(
    """The method to use when ordering `ChineseWouldYouRatherQuestion`."""
    orderBy: [ChineseWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChineseWouldYouRatherQuestionsEdge
}

"""
All input for the `updateChineseWouldYouRatherQuestionByNodeId` mutation.
"""
input UpdateChineseWouldYouRatherQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChineseWouldYouRatherQuestion` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ChineseWouldYouRatherQuestion` being updated.
  """
  patch: ChineseWouldYouRatherQuestionPatch!
}

"""
Represents an update to a `ChineseWouldYouRatherQuestion`. Fields that are set will be updated.
"""
input ChineseWouldYouRatherQuestionPatch {
  id: Int
  uuid: UUID
  question: String
  answers: [String]
  recommendedSkillLevelId: Int
  createdAt: Datetime
}

"""All input for the `updateChineseWouldYouRatherQuestion` mutation."""
input UpdateChineseWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ChineseWouldYouRatherQuestion` being updated.
  """
  patch: ChineseWouldYouRatherQuestionPatch!
  id: Int!
}

"""
All input for the `updateChineseWouldYouRatherQuestionByUuid` mutation.
"""
input UpdateChineseWouldYouRatherQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ChineseWouldYouRatherQuestion` being updated.
  """
  patch: ChineseWouldYouRatherQuestionPatch!
  uuid: UUID!
}

"""The output of our delete `GroupUser` mutation."""
type DeleteGroupUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GroupUser` that was deleted by this mutation."""
  groupUser: GroupUser
  deletedGroupUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `GroupUser`."""
  user: User

  """Reads a single `Group` that is related to this `GroupUser`."""
  group: Group

  """An edge for our `GroupUser`. May be used by Relay 1."""
  groupUserEdge(
    """The method to use when ordering `GroupUser`."""
    orderBy: [GroupUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupUsersEdge
}

"""All input for the `deleteGroupUserByNodeId` mutation."""
input DeleteGroupUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GroupUser` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGroupUser` mutation."""
input DeleteGroupUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Group` mutation."""
type DeleteGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Group` that was deleted by this mutation."""
  group: Group
  deletedGroupNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Language` that is related to this `Group`."""
  language: Language

  """Reads a single `LanguageSkillLevel` that is related to this `Group`."""
  languageSkillLevel: LanguageSkillLevel

  """An edge for our `Group`. May be used by Relay 1."""
  groupEdge(
    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsEdge
}

"""All input for the `deleteGroupByNodeId` mutation."""
input DeleteGroupByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Group` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGroup` mutation."""
input DeleteGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteGroupByUuid` mutation."""
input DeleteGroupByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `ChineseGuessCharacterQuestion` mutation."""
type DeleteChineseGuessCharacterQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChineseGuessCharacterQuestion` that was deleted by this mutation."""
  chineseGuessCharacterQuestion: ChineseGuessCharacterQuestion
  deletedGuessCharacterQuestionsZhNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `ChineseGuessCharacterQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `ChineseGuessCharacterQuestion`. May be used by Relay 1.
  """
  chineseGuessCharacterQuestionEdge(
    """The method to use when ordering `ChineseGuessCharacterQuestion`."""
    orderBy: [ChineseGuessCharacterQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChineseGuessCharacterQuestionsEdge
}

"""
All input for the `deleteChineseGuessCharacterQuestionByNodeId` mutation.
"""
input DeleteChineseGuessCharacterQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChineseGuessCharacterQuestion` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteChineseGuessCharacterQuestion` mutation."""
input DeleteChineseGuessCharacterQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteChineseGuessCharacterQuestionByUuid` mutation.
"""
input DeleteChineseGuessCharacterQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `InviteToken` mutation."""
type DeleteInviteTokenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `InviteToken` that was deleted by this mutation."""
  inviteToken: InviteToken
  deletedInviteTokenNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `InviteToken`."""
  user: User

  """An edge for our `InviteToken`. May be used by Relay 1."""
  inviteTokenEdge(
    """The method to use when ordering `InviteToken`."""
    orderBy: [InviteTokensOrderBy!] = [PRIMARY_KEY_ASC]
  ): InviteTokensEdge
}

"""All input for the `deleteInviteTokenByNodeId` mutation."""
input DeleteInviteTokenByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `InviteToken` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteInviteToken` mutation."""
input DeleteInviteTokenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `LanguageSkillLevel` mutation."""
type DeleteLanguageSkillLevelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LanguageSkillLevel` that was deleted by this mutation."""
  languageSkillLevel: LanguageSkillLevel
  deletedLanguageSkillLevelNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LanguageSkillLevel`. May be used by Relay 1."""
  languageSkillLevelEdge(
    """The method to use when ordering `LanguageSkillLevel`."""
    orderBy: [LanguageSkillLevelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguageSkillLevelsEdge
}

"""All input for the `deleteLanguageSkillLevelByNodeId` mutation."""
input DeleteLanguageSkillLevelByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LanguageSkillLevel` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteLanguageSkillLevel` mutation."""
input DeleteLanguageSkillLevelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Language` mutation."""
type DeleteLanguagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Language` that was deleted by this mutation."""
  language: Language
  deletedLanguageNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Language`. May be used by Relay 1."""
  languageEdge(
    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguagesEdge
}

"""All input for the `deleteLanguageByNodeId` mutation."""
input DeleteLanguageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Language` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteLanguage` mutation."""
input DeleteLanguageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteLanguageByAlpha2` mutation."""
input DeleteLanguageByAlpha2Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """ISO 3166-1 alpha-2 standardized code"""
  alpha2: String!
}

"""All input for the `deleteLanguageByEnglishName` mutation."""
input DeleteLanguageByEnglishNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  englishName: String!
}

"""The output of our delete `MessagePreview` mutation."""
type DeleteMessagePreviewPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MessagePreview` that was deleted by this mutation."""
  messagePreview: MessagePreview
  deletedMessagePreviewNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Message` that is related to this `MessagePreview`."""
  message: Message

  """An edge for our `MessagePreview`. May be used by Relay 1."""
  messagePreviewEdge(
    """The method to use when ordering `MessagePreview`."""
    orderBy: [MessagePreviewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessagePreviewsEdge
}

"""All input for the `deleteMessagePreviewByNodeId` mutation."""
input DeleteMessagePreviewByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MessagePreview` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMessagePreview` mutation."""
input DeleteMessagePreviewInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteMessagePreviewByUuid` mutation."""
input DeleteMessagePreviewByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `Message` mutation."""
type DeleteMessagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Message` that was deleted by this mutation."""
  message: Message
  deletedMessageNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Message`."""
  sender: User

  """Reads a single `User` that is related to this `Message`."""
  recipient: User

  """Reads a single `Group` that is related to this `Message`."""
  recipientGroup: Group

  """Reads a single `Message` that is related to this `Message`."""
  parentMessage: Message

  """An edge for our `Message`. May be used by Relay 1."""
  messageEdge(
    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessagesEdge
}

"""All input for the `deleteMessageByNodeId` mutation."""
input DeleteMessageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Message` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMessage` mutation."""
input DeleteMessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteMessageByUuid` mutation."""
input DeleteMessageByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `NotificationChannel` mutation."""
type DeleteNotificationChannelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NotificationChannel` that was deleted by this mutation."""
  notificationChannel: NotificationChannel
  deletedNotificationChannelNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NotificationChannel`. May be used by Relay 1."""
  notificationChannelEdge(
    """The method to use when ordering `NotificationChannel`."""
    orderBy: [NotificationChannelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NotificationChannelsEdge
}

"""All input for the `deleteNotificationChannelByNodeId` mutation."""
input DeleteNotificationChannelByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NotificationChannel` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteNotificationChannel` mutation."""
input DeleteNotificationChannelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteNotificationChannelByUuid` mutation."""
input DeleteNotificationChannelByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""All input for the `deleteNotificationChannelByName` mutation."""
input DeleteNotificationChannelByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""The output of our delete `Notification` mutation."""
type DeleteNotificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Notification` that was deleted by this mutation."""
  notification: Notification
  deletedNotificationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Notification`."""
  recipient: User

  """
  Reads a single `NotificationChannel` that is related to this `Notification`.
  """
  channel: NotificationChannel

  """Reads a single `Group` that is related to this `Notification`."""
  recipientGroup: Group

  """An edge for our `Notification`. May be used by Relay 1."""
  notificationEdge(
    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NotificationsEdge
}

"""All input for the `deleteNotificationByNodeId` mutation."""
input DeleteNotificationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Notification` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteNotification` mutation."""
input DeleteNotificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteNotificationByUuid` mutation."""
input DeleteNotificationByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `PostLike` mutation."""
type DeletePostLikePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PostLike` that was deleted by this mutation."""
  postLike: PostLike
  deletedPostLikeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `PostLike`."""
  user: User

  """Reads a single `Post` that is related to this `PostLike`."""
  post: Post

  """An edge for our `PostLike`. May be used by Relay 1."""
  postLikeEdge(
    """The method to use when ordering `PostLike`."""
    orderBy: [PostLikesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostLikesEdge
}

"""All input for the `deletePostLikeByNodeId` mutation."""
input DeletePostLikeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PostLike` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePostLike` mutation."""
input DeletePostLikeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `PostRecording` mutation."""
type DeletePostRecordingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PostRecording` that was deleted by this mutation."""
  postRecording: PostRecording
  deletedPostRecordingNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `PostRecording`."""
  user: User

  """Reads a single `Post` that is related to this `PostRecording`."""
  post: Post

  """An edge for our `PostRecording`. May be used by Relay 1."""
  postRecordingEdge(
    """The method to use when ordering `PostRecording`."""
    orderBy: [PostRecordingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostRecordingsEdge
}

"""All input for the `deletePostRecordingByNodeId` mutation."""
input DeletePostRecordingByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PostRecording` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePostRecording` mutation."""
input DeletePostRecordingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deletePostRecordingByUuid` mutation."""
input DeletePostRecordingByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `Post` mutation."""
type DeletePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was deleted by this mutation."""
  post: Post
  deletedPostNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Post`."""
  author: User

  """Reads a single `Post` that is related to this `Post`."""
  parentPost: Post

  """Reads a single `Language` that is related to this `Post`."""
  language: Language

  """Reads a single `Prompt` that is related to this `Post`."""
  prompt: Prompt

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge
}

"""All input for the `deletePostByNodeId` mutation."""
input DeletePostByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Post` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePost` mutation."""
input DeletePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deletePostByUuid` mutation."""
input DeletePostByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `Prompt` mutation."""
type DeletePromptPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Prompt` that was deleted by this mutation."""
  prompt: Prompt
  deletedPromptNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Language` that is related to this `Prompt`."""
  language: Language

  """Reads a single `LanguageSkillLevel` that is related to this `Prompt`."""
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `Prompt`. May be used by Relay 1."""
  promptEdge(
    """The method to use when ordering `Prompt`."""
    orderBy: [PromptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PromptsEdge
}

"""All input for the `deletePromptByNodeId` mutation."""
input DeletePromptByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Prompt` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePrompt` mutation."""
input DeletePromptInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deletePromptByUuid` mutation."""
input DeletePromptByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `GermanRandomQuestion` mutation."""
type DeleteGermanRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GermanRandomQuestion` that was deleted by this mutation."""
  germanRandomQuestion: GermanRandomQuestion
  deletedRandomQuestionsDeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `GermanRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `GermanRandomQuestion`. May be used by Relay 1."""
  germanRandomQuestionEdge(
    """The method to use when ordering `GermanRandomQuestion`."""
    orderBy: [GermanRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GermanRandomQuestionsEdge
}

"""All input for the `deleteGermanRandomQuestionByNodeId` mutation."""
input DeleteGermanRandomQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GermanRandomQuestion` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGermanRandomQuestion` mutation."""
input DeleteGermanRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteGermanRandomQuestionByUuid` mutation."""
input DeleteGermanRandomQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `EnglishRandomQuestion` mutation."""
type DeleteEnglishRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EnglishRandomQuestion` that was deleted by this mutation."""
  englishRandomQuestion: EnglishRandomQuestion
  deletedRandomQuestionsEnNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `EnglishRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `EnglishRandomQuestion`. May be used by Relay 1."""
  englishRandomQuestionEdge(
    """The method to use when ordering `EnglishRandomQuestion`."""
    orderBy: [EnglishRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EnglishRandomQuestionsEdge
}

"""All input for the `deleteEnglishRandomQuestionByNodeId` mutation."""
input DeleteEnglishRandomQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EnglishRandomQuestion` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteEnglishRandomQuestion` mutation."""
input DeleteEnglishRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteEnglishRandomQuestionByUuid` mutation."""
input DeleteEnglishRandomQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `SpanishRandomQuestion` mutation."""
type DeleteSpanishRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SpanishRandomQuestion` that was deleted by this mutation."""
  spanishRandomQuestion: SpanishRandomQuestion
  deletedRandomQuestionsENodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `SpanishRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `SpanishRandomQuestion`. May be used by Relay 1."""
  spanishRandomQuestionEdge(
    """The method to use when ordering `SpanishRandomQuestion`."""
    orderBy: [SpanishRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpanishRandomQuestionsEdge
}

"""All input for the `deleteSpanishRandomQuestionByNodeId` mutation."""
input DeleteSpanishRandomQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SpanishRandomQuestion` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSpanishRandomQuestion` mutation."""
input DeleteSpanishRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteSpanishRandomQuestionByUuid` mutation."""
input DeleteSpanishRandomQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `FrenchRandomQuestion` mutation."""
type DeleteFrenchRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FrenchRandomQuestion` that was deleted by this mutation."""
  frenchRandomQuestion: FrenchRandomQuestion
  deletedRandomQuestionsFrNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `FrenchRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `FrenchRandomQuestion`. May be used by Relay 1."""
  frenchRandomQuestionEdge(
    """The method to use when ordering `FrenchRandomQuestion`."""
    orderBy: [FrenchRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FrenchRandomQuestionsEdge
}

"""All input for the `deleteFrenchRandomQuestionByNodeId` mutation."""
input DeleteFrenchRandomQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FrenchRandomQuestion` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFrenchRandomQuestion` mutation."""
input DeleteFrenchRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteFrenchRandomQuestionByUuid` mutation."""
input DeleteFrenchRandomQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `ItalianRandomQuestion` mutation."""
type DeleteItalianRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ItalianRandomQuestion` that was deleted by this mutation."""
  italianRandomQuestion: ItalianRandomQuestion
  deletedRandomQuestionsItNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `ItalianRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `ItalianRandomQuestion`. May be used by Relay 1."""
  italianRandomQuestionEdge(
    """The method to use when ordering `ItalianRandomQuestion`."""
    orderBy: [ItalianRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItalianRandomQuestionsEdge
}

"""All input for the `deleteItalianRandomQuestionByNodeId` mutation."""
input DeleteItalianRandomQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ItalianRandomQuestion` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteItalianRandomQuestion` mutation."""
input DeleteItalianRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteItalianRandomQuestionByUuid` mutation."""
input DeleteItalianRandomQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `JapaneseRandomQuestion` mutation."""
type DeleteJapaneseRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `JapaneseRandomQuestion` that was deleted by this mutation."""
  japaneseRandomQuestion: JapaneseRandomQuestion
  deletedRandomQuestionsJaNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `JapaneseRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `JapaneseRandomQuestion`. May be used by Relay 1."""
  japaneseRandomQuestionEdge(
    """The method to use when ordering `JapaneseRandomQuestion`."""
    orderBy: [JapaneseRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JapaneseRandomQuestionsEdge
}

"""All input for the `deleteJapaneseRandomQuestionByNodeId` mutation."""
input DeleteJapaneseRandomQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `JapaneseRandomQuestion` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteJapaneseRandomQuestion` mutation."""
input DeleteJapaneseRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteJapaneseRandomQuestionByUuid` mutation."""
input DeleteJapaneseRandomQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `KoreanRandomQuestion` mutation."""
type DeleteKoreanRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `KoreanRandomQuestion` that was deleted by this mutation."""
  koreanRandomQuestion: KoreanRandomQuestion
  deletedRandomQuestionsKoNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `KoreanRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `KoreanRandomQuestion`. May be used by Relay 1."""
  koreanRandomQuestionEdge(
    """The method to use when ordering `KoreanRandomQuestion`."""
    orderBy: [KoreanRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): KoreanRandomQuestionsEdge
}

"""All input for the `deleteKoreanRandomQuestionByNodeId` mutation."""
input DeleteKoreanRandomQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `KoreanRandomQuestion` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteKoreanRandomQuestion` mutation."""
input DeleteKoreanRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteKoreanRandomQuestionByUuid` mutation."""
input DeleteKoreanRandomQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `PortugueseRandomQuestion` mutation."""
type DeletePortugueseRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PortugueseRandomQuestion` that was deleted by this mutation."""
  portugueseRandomQuestion: PortugueseRandomQuestion
  deletedRandomQuestionsPtNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `PortugueseRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `PortugueseRandomQuestion`. May be used by Relay 1."""
  portugueseRandomQuestionEdge(
    """The method to use when ordering `PortugueseRandomQuestion`."""
    orderBy: [PortugueseRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PortugueseRandomQuestionsEdge
}

"""All input for the `deletePortugueseRandomQuestionByNodeId` mutation."""
input DeletePortugueseRandomQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PortugueseRandomQuestion` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePortugueseRandomQuestion` mutation."""
input DeletePortugueseRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deletePortugueseRandomQuestionByUuid` mutation."""
input DeletePortugueseRandomQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `RussianRandomQuestion` mutation."""
type DeleteRussianRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RussianRandomQuestion` that was deleted by this mutation."""
  russianRandomQuestion: RussianRandomQuestion
  deletedRandomQuestionsRuNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `RussianRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `RussianRandomQuestion`. May be used by Relay 1."""
  russianRandomQuestionEdge(
    """The method to use when ordering `RussianRandomQuestion`."""
    orderBy: [RussianRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RussianRandomQuestionsEdge
}

"""All input for the `deleteRussianRandomQuestionByNodeId` mutation."""
input DeleteRussianRandomQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RussianRandomQuestion` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteRussianRandomQuestion` mutation."""
input DeleteRussianRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteRussianRandomQuestionByUuid` mutation."""
input DeleteRussianRandomQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `ChineseRandomQuestion` mutation."""
type DeleteChineseRandomQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChineseRandomQuestion` that was deleted by this mutation."""
  chineseRandomQuestion: ChineseRandomQuestion
  deletedRandomQuestionsZhNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `ChineseRandomQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `ChineseRandomQuestion`. May be used by Relay 1."""
  chineseRandomQuestionEdge(
    """The method to use when ordering `ChineseRandomQuestion`."""
    orderBy: [ChineseRandomQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChineseRandomQuestionsEdge
}

"""All input for the `deleteChineseRandomQuestionByNodeId` mutation."""
input DeleteChineseRandomQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChineseRandomQuestion` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteChineseRandomQuestion` mutation."""
input DeleteChineseRandomQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteChineseRandomQuestionByUuid` mutation."""
input DeleteChineseRandomQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `UserDevice` mutation."""
type DeleteUserDevicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserDevice` that was deleted by this mutation."""
  userDevice: UserDevice
  deletedUserDeviceNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserDevice`."""
  user: User

  """An edge for our `UserDevice`. May be used by Relay 1."""
  userDeviceEdge(
    """The method to use when ordering `UserDevice`."""
    orderBy: [UserDevicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserDevicesEdge
}

"""All input for the `deleteUserDeviceByNodeId` mutation."""
input DeleteUserDeviceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserDevice` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserDevice` mutation."""
input DeleteUserDeviceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteUserDeviceByUuid` mutation."""
input DeleteUserDeviceByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""All input for the `deleteUserDeviceByFcmToken` mutation."""
input DeleteUserDeviceByFcmTokenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  fcmToken: String!
}

"""The output of our delete `UserLanguage` mutation."""
type DeleteUserLanguagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserLanguage` that was deleted by this mutation."""
  userLanguage: UserLanguage
  deletedUserLanguageNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserLanguage`."""
  user: User

  """Reads a single `Language` that is related to this `UserLanguage`."""
  language: Language

  """
  Reads a single `LanguageSkillLevel` that is related to this `UserLanguage`.
  """
  languageSkillLevel: LanguageSkillLevel

  """An edge for our `UserLanguage`. May be used by Relay 1."""
  userLanguageEdge(
    """The method to use when ordering `UserLanguage`."""
    orderBy: [UserLanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserLanguagesEdge
}

"""All input for the `deleteUserLanguageByNodeId` mutation."""
input DeleteUserLanguageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserLanguage` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserLanguage` mutation."""
input DeleteUserLanguageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `UserSession` mutation."""
type DeleteUserSessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserSession` that was deleted by this mutation."""
  userSession: UserSession
  deletedUserSessionNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserSession`. May be used by Relay 1."""
  userSessionEdge(
    """The method to use when ordering `UserSession`."""
    orderBy: [UserSessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserSessionsEdge
}

"""All input for the `deleteUserSessionByNodeId` mutation."""
input DeleteUserSessionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserSession` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserSession` mutation."""
input DeleteUserSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sid: String!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Language` that is related to this `User`."""
  languageByLocale: Language

  """Reads a single `InviteToken` that is related to this `User`."""
  signedUpWithToken: InviteToken

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `deleteUserByNodeId` mutation."""
input DeleteUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteUserByUsername` mutation."""
input DeleteUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  username: String!
}

"""All input for the `deleteUserByEmail` mutation."""
input DeleteUserByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}

"""All input for the `deleteUserByUuid` mutation."""
input DeleteUserByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""All input for the `deleteUserByEmailUnsubscribeToken` mutation."""
input DeleteUserByEmailUnsubscribeTokenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  emailUnsubscribeToken: String!
}

"""The output of our delete `GermanWord` mutation."""
type DeleteGermanWordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GermanWord` that was deleted by this mutation."""
  germanWord: GermanWord
  deletedWordsDeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `GermanWord`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `GermanWord`. May be used by Relay 1."""
  germanWordEdge(
    """The method to use when ordering `GermanWord`."""
    orderBy: [GermanWordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GermanWordsEdge
}

"""All input for the `deleteGermanWordByNodeId` mutation."""
input DeleteGermanWordByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GermanWord` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGermanWord` mutation."""
input DeleteGermanWordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteGermanWordByUuid` mutation."""
input DeleteGermanWordByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `EnglishWord` mutation."""
type DeleteEnglishWordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EnglishWord` that was deleted by this mutation."""
  englishWord: EnglishWord
  deletedWordsEnNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `EnglishWord`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `EnglishWord`. May be used by Relay 1."""
  englishWordEdge(
    """The method to use when ordering `EnglishWord`."""
    orderBy: [EnglishWordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EnglishWordsEdge
}

"""All input for the `deleteEnglishWordByNodeId` mutation."""
input DeleteEnglishWordByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EnglishWord` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteEnglishWord` mutation."""
input DeleteEnglishWordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteEnglishWordByUuid` mutation."""
input DeleteEnglishWordByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `SpanishWord` mutation."""
type DeleteSpanishWordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SpanishWord` that was deleted by this mutation."""
  spanishWord: SpanishWord
  deletedWordsENodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `SpanishWord`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `SpanishWord`. May be used by Relay 1."""
  spanishWordEdge(
    """The method to use when ordering `SpanishWord`."""
    orderBy: [SpanishWordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpanishWordsEdge
}

"""All input for the `deleteSpanishWordByNodeId` mutation."""
input DeleteSpanishWordByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SpanishWord` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSpanishWord` mutation."""
input DeleteSpanishWordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteSpanishWordByUuid` mutation."""
input DeleteSpanishWordByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `FrenchWord` mutation."""
type DeleteFrenchWordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FrenchWord` that was deleted by this mutation."""
  frenchWord: FrenchWord
  deletedWordsFrNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `FrenchWord`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `FrenchWord`. May be used by Relay 1."""
  frenchWordEdge(
    """The method to use when ordering `FrenchWord`."""
    orderBy: [FrenchWordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FrenchWordsEdge
}

"""All input for the `deleteFrenchWordByNodeId` mutation."""
input DeleteFrenchWordByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FrenchWord` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFrenchWord` mutation."""
input DeleteFrenchWordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteFrenchWordByUuid` mutation."""
input DeleteFrenchWordByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `ItalianWord` mutation."""
type DeleteItalianWordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ItalianWord` that was deleted by this mutation."""
  italianWord: ItalianWord
  deletedWordsItNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `ItalianWord`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `ItalianWord`. May be used by Relay 1."""
  italianWordEdge(
    """The method to use when ordering `ItalianWord`."""
    orderBy: [ItalianWordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItalianWordsEdge
}

"""All input for the `deleteItalianWordByNodeId` mutation."""
input DeleteItalianWordByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ItalianWord` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteItalianWord` mutation."""
input DeleteItalianWordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteItalianWordByUuid` mutation."""
input DeleteItalianWordByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `PortugueseWord` mutation."""
type DeletePortugueseWordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PortugueseWord` that was deleted by this mutation."""
  portugueseWord: PortugueseWord
  deletedWordsPtNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `PortugueseWord`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `PortugueseWord`. May be used by Relay 1."""
  portugueseWordEdge(
    """The method to use when ordering `PortugueseWord`."""
    orderBy: [PortugueseWordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PortugueseWordsEdge
}

"""All input for the `deletePortugueseWordByNodeId` mutation."""
input DeletePortugueseWordByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PortugueseWord` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePortugueseWord` mutation."""
input DeletePortugueseWordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deletePortugueseWordByUuid` mutation."""
input DeletePortugueseWordByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `RussianWord` mutation."""
type DeleteRussianWordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RussianWord` that was deleted by this mutation."""
  russianWord: RussianWord
  deletedWordsRuNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `RussianWord`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """An edge for our `RussianWord`. May be used by Relay 1."""
  russianWordEdge(
    """The method to use when ordering `RussianWord`."""
    orderBy: [RussianWordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RussianWordsEdge
}

"""All input for the `deleteRussianWordByNodeId` mutation."""
input DeleteRussianWordByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RussianWord` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteRussianWord` mutation."""
input DeleteRussianWordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteRussianWordByUuid` mutation."""
input DeleteRussianWordByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `GermanWouldYouRatherQuestion` mutation."""
type DeleteGermanWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GermanWouldYouRatherQuestion` that was deleted by this mutation."""
  germanWouldYouRatherQuestion: GermanWouldYouRatherQuestion
  deletedWouldYouRatherQuestionsDeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `GermanWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `GermanWouldYouRatherQuestion`. May be used by Relay 1.
  """
  germanWouldYouRatherQuestionEdge(
    """The method to use when ordering `GermanWouldYouRatherQuestion`."""
    orderBy: [GermanWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GermanWouldYouRatherQuestionsEdge
}

"""
All input for the `deleteGermanWouldYouRatherQuestionByNodeId` mutation.
"""
input DeleteGermanWouldYouRatherQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GermanWouldYouRatherQuestion` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGermanWouldYouRatherQuestion` mutation."""
input DeleteGermanWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteGermanWouldYouRatherQuestionByUuid` mutation."""
input DeleteGermanWouldYouRatherQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `EnglishWouldYouRatherQuestion` mutation."""
type DeleteEnglishWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EnglishWouldYouRatherQuestion` that was deleted by this mutation."""
  englishWouldYouRatherQuestion: EnglishWouldYouRatherQuestion
  deletedWouldYouRatherQuestionsEnNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `EnglishWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `EnglishWouldYouRatherQuestion`. May be used by Relay 1.
  """
  englishWouldYouRatherQuestionEdge(
    """The method to use when ordering `EnglishWouldYouRatherQuestion`."""
    orderBy: [EnglishWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EnglishWouldYouRatherQuestionsEdge
}

"""
All input for the `deleteEnglishWouldYouRatherQuestionByNodeId` mutation.
"""
input DeleteEnglishWouldYouRatherQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EnglishWouldYouRatherQuestion` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteEnglishWouldYouRatherQuestion` mutation."""
input DeleteEnglishWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteEnglishWouldYouRatherQuestionByUuid` mutation.
"""
input DeleteEnglishWouldYouRatherQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `SpanishWouldYouRatherQuestion` mutation."""
type DeleteSpanishWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SpanishWouldYouRatherQuestion` that was deleted by this mutation."""
  spanishWouldYouRatherQuestion: SpanishWouldYouRatherQuestion
  deletedWouldYouRatherQuestionsENodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `SpanishWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `SpanishWouldYouRatherQuestion`. May be used by Relay 1.
  """
  spanishWouldYouRatherQuestionEdge(
    """The method to use when ordering `SpanishWouldYouRatherQuestion`."""
    orderBy: [SpanishWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SpanishWouldYouRatherQuestionsEdge
}

"""
All input for the `deleteSpanishWouldYouRatherQuestionByNodeId` mutation.
"""
input DeleteSpanishWouldYouRatherQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SpanishWouldYouRatherQuestion` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSpanishWouldYouRatherQuestion` mutation."""
input DeleteSpanishWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteSpanishWouldYouRatherQuestionByUuid` mutation.
"""
input DeleteSpanishWouldYouRatherQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `FrenchWouldYouRatherQuestion` mutation."""
type DeleteFrenchWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FrenchWouldYouRatherQuestion` that was deleted by this mutation."""
  frenchWouldYouRatherQuestion: FrenchWouldYouRatherQuestion
  deletedWouldYouRatherQuestionsFrNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `FrenchWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `FrenchWouldYouRatherQuestion`. May be used by Relay 1.
  """
  frenchWouldYouRatherQuestionEdge(
    """The method to use when ordering `FrenchWouldYouRatherQuestion`."""
    orderBy: [FrenchWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FrenchWouldYouRatherQuestionsEdge
}

"""
All input for the `deleteFrenchWouldYouRatherQuestionByNodeId` mutation.
"""
input DeleteFrenchWouldYouRatherQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FrenchWouldYouRatherQuestion` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFrenchWouldYouRatherQuestion` mutation."""
input DeleteFrenchWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteFrenchWouldYouRatherQuestionByUuid` mutation."""
input DeleteFrenchWouldYouRatherQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `ItalianWouldYouRatherQuestion` mutation."""
type DeleteItalianWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ItalianWouldYouRatherQuestion` that was deleted by this mutation."""
  italianWouldYouRatherQuestion: ItalianWouldYouRatherQuestion
  deletedWouldYouRatherQuestionsItNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `ItalianWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `ItalianWouldYouRatherQuestion`. May be used by Relay 1.
  """
  italianWouldYouRatherQuestionEdge(
    """The method to use when ordering `ItalianWouldYouRatherQuestion`."""
    orderBy: [ItalianWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItalianWouldYouRatherQuestionsEdge
}

"""
All input for the `deleteItalianWouldYouRatherQuestionByNodeId` mutation.
"""
input DeleteItalianWouldYouRatherQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ItalianWouldYouRatherQuestion` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteItalianWouldYouRatherQuestion` mutation."""
input DeleteItalianWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteItalianWouldYouRatherQuestionByUuid` mutation.
"""
input DeleteItalianWouldYouRatherQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `JapaneseWouldYouRatherQuestion` mutation."""
type DeleteJapaneseWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `JapaneseWouldYouRatherQuestion` that was deleted by this mutation.
  """
  japaneseWouldYouRatherQuestion: JapaneseWouldYouRatherQuestion
  deletedWouldYouRatherQuestionsJaNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `JapaneseWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `JapaneseWouldYouRatherQuestion`. May be used by Relay 1.
  """
  japaneseWouldYouRatherQuestionEdge(
    """The method to use when ordering `JapaneseWouldYouRatherQuestion`."""
    orderBy: [JapaneseWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): JapaneseWouldYouRatherQuestionsEdge
}

"""
All input for the `deleteJapaneseWouldYouRatherQuestionByNodeId` mutation.
"""
input DeleteJapaneseWouldYouRatherQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `JapaneseWouldYouRatherQuestion` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteJapaneseWouldYouRatherQuestion` mutation."""
input DeleteJapaneseWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteJapaneseWouldYouRatherQuestionByUuid` mutation.
"""
input DeleteJapaneseWouldYouRatherQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `KoreanWouldYouRatherQuestion` mutation."""
type DeleteKoreanWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `KoreanWouldYouRatherQuestion` that was deleted by this mutation."""
  koreanWouldYouRatherQuestion: KoreanWouldYouRatherQuestion
  deletedWouldYouRatherQuestionsKoNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `KoreanWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `KoreanWouldYouRatherQuestion`. May be used by Relay 1.
  """
  koreanWouldYouRatherQuestionEdge(
    """The method to use when ordering `KoreanWouldYouRatherQuestion`."""
    orderBy: [KoreanWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): KoreanWouldYouRatherQuestionsEdge
}

"""
All input for the `deleteKoreanWouldYouRatherQuestionByNodeId` mutation.
"""
input DeleteKoreanWouldYouRatherQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `KoreanWouldYouRatherQuestion` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteKoreanWouldYouRatherQuestion` mutation."""
input DeleteKoreanWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteKoreanWouldYouRatherQuestionByUuid` mutation."""
input DeleteKoreanWouldYouRatherQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `PortugueseWouldYouRatherQuestion` mutation."""
type DeletePortugueseWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `PortugueseWouldYouRatherQuestion` that was deleted by this mutation.
  """
  portugueseWouldYouRatherQuestion: PortugueseWouldYouRatherQuestion
  deletedWouldYouRatherQuestionsPtNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `PortugueseWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `PortugueseWouldYouRatherQuestion`. May be used by Relay 1.
  """
  portugueseWouldYouRatherQuestionEdge(
    """The method to use when ordering `PortugueseWouldYouRatherQuestion`."""
    orderBy: [PortugueseWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PortugueseWouldYouRatherQuestionsEdge
}

"""
All input for the `deletePortugueseWouldYouRatherQuestionByNodeId` mutation.
"""
input DeletePortugueseWouldYouRatherQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PortugueseWouldYouRatherQuestion` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePortugueseWouldYouRatherQuestion` mutation."""
input DeletePortugueseWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deletePortugueseWouldYouRatherQuestionByUuid` mutation.
"""
input DeletePortugueseWouldYouRatherQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `RussianWouldYouRatherQuestion` mutation."""
type DeleteRussianWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RussianWouldYouRatherQuestion` that was deleted by this mutation."""
  russianWouldYouRatherQuestion: RussianWouldYouRatherQuestion
  deletedWouldYouRatherQuestionsRuNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `RussianWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `RussianWouldYouRatherQuestion`. May be used by Relay 1.
  """
  russianWouldYouRatherQuestionEdge(
    """The method to use when ordering `RussianWouldYouRatherQuestion`."""
    orderBy: [RussianWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RussianWouldYouRatherQuestionsEdge
}

"""
All input for the `deleteRussianWouldYouRatherQuestionByNodeId` mutation.
"""
input DeleteRussianWouldYouRatherQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RussianWouldYouRatherQuestion` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteRussianWouldYouRatherQuestion` mutation."""
input DeleteRussianWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteRussianWouldYouRatherQuestionByUuid` mutation.
"""
input DeleteRussianWouldYouRatherQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our delete `ChineseWouldYouRatherQuestion` mutation."""
type DeleteChineseWouldYouRatherQuestionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChineseWouldYouRatherQuestion` that was deleted by this mutation."""
  chineseWouldYouRatherQuestion: ChineseWouldYouRatherQuestion
  deletedWouldYouRatherQuestionsZhNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `LanguageSkillLevel` that is related to this `ChineseWouldYouRatherQuestion`.
  """
  recommendedSkillLevel: LanguageSkillLevel

  """
  An edge for our `ChineseWouldYouRatherQuestion`. May be used by Relay 1.
  """
  chineseWouldYouRatherQuestionEdge(
    """The method to use when ordering `ChineseWouldYouRatherQuestion`."""
    orderBy: [ChineseWouldYouRatherQuestionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChineseWouldYouRatherQuestionsEdge
}

"""
All input for the `deleteChineseWouldYouRatherQuestionByNodeId` mutation.
"""
input DeleteChineseWouldYouRatherQuestionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChineseWouldYouRatherQuestion` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteChineseWouldYouRatherQuestion` mutation."""
input DeleteChineseWouldYouRatherQuestionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteChineseWouldYouRatherQuestionByUuid` mutation.
"""
input DeleteChineseWouldYouRatherQuestionByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}

"""The output of our `joinGlobalGroup` mutation."""
type JoinGlobalGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  groupUser: GroupUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `GroupUser`."""
  user: User

  """Reads a single `Group` that is related to this `GroupUser`."""
  group: Group

  """An edge for our `GroupUser`. May be used by Relay 1."""
  groupUserEdge(
    """The method to use when ordering `GroupUser`."""
    orderBy: [GroupUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupUsersEdge
}

"""All input for the `joinGlobalGroup` mutation."""
input JoinGlobalGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupUuid: UUID!
}

"""The output of our `registerUserActivity` mutation."""
type RegisterUserActivityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  datetime: Datetime

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `registerUserActivity` mutation."""
input RegisterUserActivityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: Int!
}
