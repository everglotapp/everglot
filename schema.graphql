"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `LanguageSkillLevel`."""
  languageSkillLevels(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LanguageSkillLevel`."""
    orderBy: [LanguageSkillLevelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageSkillLevelCondition
  ): LanguageSkillLevelsConnection

  """Reads and enables pagination through a set of `Language`."""
  languages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition
  ): LanguagesConnection

  """Reads and enables pagination through a set of `Pgmigration`."""
  pgmigrations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Pgmigration`."""
    orderBy: [PgmigrationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PgmigrationCondition
  ): PgmigrationsConnection

  """Reads and enables pagination through a set of `UserLanguage`."""
  userLanguages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserLanguage`."""
    orderBy: [UserLanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserLanguageCondition
  ): UserLanguagesConnection

  """Reads and enables pagination through a set of `UserSession`."""
  userSessions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserSession`."""
    orderBy: [UserSessionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserSessionCondition
  ): UserSessionsConnection

  """Reads and enables pagination through a set of `User`."""
  users(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): UsersConnection
  languageSkillLevel(id: Int!): LanguageSkillLevel
  language(id: Int!): Language
  languageByAlpha2(alpha2: String!): Language
  languageByEnglishName(englishName: String!): Language
  pgmigration(id: Int!): Pgmigration
  userLanguage(id: Int!): UserLanguage
  userSession(sid: String!): UserSession
  user(id: Int!): User
  userByEmail(email: String!): User
  userByUuid(uuid: UUID!): User

  """Reads a single `LanguageSkillLevel` using its globally unique `ID`."""
  languageSkillLevelByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `LanguageSkillLevel`.
    """
    nodeId: ID!
  ): LanguageSkillLevel

  """Reads a single `Language` using its globally unique `ID`."""
  languageByNodeId(
    """The globally unique `ID` to be used in selecting a single `Language`."""
    nodeId: ID!
  ): Language

  """Reads a single `Pgmigration` using its globally unique `ID`."""
  pgmigrationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Pgmigration`.
    """
    nodeId: ID!
  ): Pgmigration

  """Reads a single `UserLanguage` using its globally unique `ID`."""
  userLanguageByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `UserLanguage`.
    """
    nodeId: ID!
  ): UserLanguage

  """Reads a single `UserSession` using its globally unique `ID`."""
  userSessionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `UserSession`.
    """
    nodeId: ID!
  ): UserSession

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `LanguageSkillLevel` values."""
type LanguageSkillLevelsConnection {
  """A list of `LanguageSkillLevel` objects."""
  nodes: [LanguageSkillLevel]!

  """
  A list of edges which contains the `LanguageSkillLevel` and cursor to aid in pagination.
  """
  edges: [LanguageSkillLevelsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `LanguageSkillLevel` you could get from the connection.
  """
  totalCount: Int!
}

type LanguageSkillLevel implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String

  """Reads and enables pagination through a set of `UserLanguage`."""
  userLanguages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserLanguage`."""
    orderBy: [UserLanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserLanguageCondition
  ): UserLanguagesConnection!
}

"""A connection to a list of `UserLanguage` values."""
type UserLanguagesConnection {
  """A list of `UserLanguage` objects."""
  nodes: [UserLanguage]!

  """
  A list of edges which contains the `UserLanguage` and cursor to aid in pagination.
  """
  edges: [UserLanguagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserLanguage` you could get from the connection."""
  totalCount: Int!
}

type UserLanguage implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  userId: Int!
  languageId: Int!
  languageSkillLevelId: Int
  native: Boolean!
  createdAt: Datetime!

  """Reads a single `User` that is related to this `UserLanguage`."""
  user: User

  """Reads a single `Language` that is related to this `UserLanguage`."""
  language: Language

  """
  Reads a single `LanguageSkillLevel` that is related to this `UserLanguage`.
  """
  languageSkillLevel: LanguageSkillLevel
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  username: String
  email: String!
  unconfirmedEmail: String
  gender: String
  bio: String!
  lastActiveAt: Datetime!
  createdAt: Datetime!
  passwordHash: String!
  uuid: UUID!

  """Reads and enables pagination through a set of `UserLanguage`."""
  userLanguages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserLanguage`."""
    orderBy: [UserLanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserLanguageCondition
  ): UserLanguagesConnection!
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Methods to use when ordering `UserLanguage`."""
enum UserLanguagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  LANGUAGE_ID_ASC
  LANGUAGE_ID_DESC
  LANGUAGE_SKILL_LEVEL_ID_ASC
  LANGUAGE_SKILL_LEVEL_ID_DESC
  NATIVE_ASC
  NATIVE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `UserLanguage` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UserLanguageCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `languageId` field."""
  languageId: Int

  """Checks for equality with the object’s `languageSkillLevelId` field."""
  languageSkillLevelId: Int

  """Checks for equality with the object’s `native` field."""
  native: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

type Language implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!

  """ISO 3166-1 alpha-2 standardized code"""
  alpha2: String!
  englishName: String!
  createdAt: Datetime!

  """Reads and enables pagination through a set of `UserLanguage`."""
  userLanguages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserLanguage`."""
    orderBy: [UserLanguagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserLanguageCondition
  ): UserLanguagesConnection!
}

"""A `UserLanguage` edge in the connection."""
type UserLanguagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserLanguage` at the end of the edge."""
  node: UserLanguage
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""A `LanguageSkillLevel` edge in the connection."""
type LanguageSkillLevelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LanguageSkillLevel` at the end of the edge."""
  node: LanguageSkillLevel
}

"""Methods to use when ordering `LanguageSkillLevel`."""
enum LanguageSkillLevelsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `LanguageSkillLevel` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LanguageSkillLevelCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""A connection to a list of `Language` values."""
type LanguagesConnection {
  """A list of `Language` objects."""
  nodes: [Language]!

  """
  A list of edges which contains the `Language` and cursor to aid in pagination.
  """
  edges: [LanguagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Language` you could get from the connection."""
  totalCount: Int!
}

"""A `Language` edge in the connection."""
type LanguagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Language` at the end of the edge."""
  node: Language
}

"""Methods to use when ordering `Language`."""
enum LanguagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ALPHA2_ASC
  ALPHA2_DESC
  ENGLISH_NAME_ASC
  ENGLISH_NAME_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Language` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input LanguageCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `alpha2` field."""
  alpha2: String

  """Checks for equality with the object’s `englishName` field."""
  englishName: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""A connection to a list of `Pgmigration` values."""
type PgmigrationsConnection {
  """A list of `Pgmigration` objects."""
  nodes: [Pgmigration]!

  """
  A list of edges which contains the `Pgmigration` and cursor to aid in pagination.
  """
  edges: [PgmigrationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Pgmigration` you could get from the connection."""
  totalCount: Int!
}

type Pgmigration implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!
  runOn: Datetime!
}

"""A `Pgmigration` edge in the connection."""
type PgmigrationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Pgmigration` at the end of the edge."""
  node: Pgmigration
}

"""Methods to use when ordering `Pgmigration`."""
enum PgmigrationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  RUN_ON_ASC
  RUN_ON_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Pgmigration` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PgmigrationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `runOn` field."""
  runOn: Datetime
}

"""A connection to a list of `UserSession` values."""
type UserSessionsConnection {
  """A list of `UserSession` objects."""
  nodes: [UserSession]!

  """
  A list of edges which contains the `UserSession` and cursor to aid in pagination.
  """
  edges: [UserSessionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserSession` you could get from the connection."""
  totalCount: Int!
}

type UserSession implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  sid: String!
  sess: JSON!
  expire: Datetime!
}

"""
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""A `UserSession` edge in the connection."""
type UserSessionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserSession` at the end of the edge."""
  node: UserSession
}

"""Methods to use when ordering `UserSession`."""
enum UserSessionsOrderBy {
  NATURAL
  SID_ASC
  SID_DESC
  SESS_ASC
  SESS_DESC
  EXPIRE_ASC
  EXPIRE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `UserSession` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserSessionCondition {
  """Checks for equality with the object’s `sid` field."""
  sid: String

  """Checks for equality with the object’s `sess` field."""
  sess: JSON

  """Checks for equality with the object’s `expire` field."""
  expire: Datetime
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USERNAME_ASC
  USERNAME_DESC
  EMAIL_ASC
  EMAIL_DESC
  UNCONFIRMED_EMAIL_ASC
  UNCONFIRMED_EMAIL_DESC
  GENDER_ASC
  GENDER_DESC
  BIO_ASC
  BIO_DESC
  LAST_ACTIVE_AT_ASC
  LAST_ACTIVE_AT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PASSWORD_HASH_ASC
  PASSWORD_HASH_DESC
  UUID_ASC
  UUID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `username` field."""
  username: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `unconfirmedEmail` field."""
  unconfirmedEmail: String

  """Checks for equality with the object’s `gender` field."""
  gender: String

  """Checks for equality with the object’s `bio` field."""
  bio: String

  """Checks for equality with the object’s `lastActiveAt` field."""
  lastActiveAt: Datetime

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `passwordHash` field."""
  passwordHash: String

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `LanguageSkillLevel`."""
  createLanguageSkillLevel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLanguageSkillLevelInput!
  ): CreateLanguageSkillLevelPayload

  """Creates a single `Language`."""
  createLanguage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLanguageInput!
  ): CreateLanguagePayload

  """Creates a single `Pgmigration`."""
  createPgmigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePgmigrationInput!
  ): CreatePgmigrationPayload

  """Creates a single `UserLanguage`."""
  createUserLanguage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserLanguageInput!
  ): CreateUserLanguagePayload

  """Creates a single `UserSession`."""
  createUserSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserSessionInput!
  ): CreateUserSessionPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """
  Updates a single `LanguageSkillLevel` using its globally unique id and a patch.
  """
  updateLanguageSkillLevelByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLanguageSkillLevelByNodeIdInput!
  ): UpdateLanguageSkillLevelPayload

  """Updates a single `LanguageSkillLevel` using a unique key and a patch."""
  updateLanguageSkillLevel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLanguageSkillLevelInput!
  ): UpdateLanguageSkillLevelPayload

  """Updates a single `Language` using its globally unique id and a patch."""
  updateLanguageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLanguageByNodeIdInput!
  ): UpdateLanguagePayload

  """Updates a single `Language` using a unique key and a patch."""
  updateLanguage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLanguageInput!
  ): UpdateLanguagePayload

  """Updates a single `Language` using a unique key and a patch."""
  updateLanguageByAlpha2(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLanguageByAlpha2Input!
  ): UpdateLanguagePayload

  """Updates a single `Language` using a unique key and a patch."""
  updateLanguageByEnglishName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLanguageByEnglishNameInput!
  ): UpdateLanguagePayload

  """
  Updates a single `Pgmigration` using its globally unique id and a patch.
  """
  updatePgmigrationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePgmigrationByNodeIdInput!
  ): UpdatePgmigrationPayload

  """Updates a single `Pgmigration` using a unique key and a patch."""
  updatePgmigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePgmigrationInput!
  ): UpdatePgmigrationPayload

  """
  Updates a single `UserLanguage` using its globally unique id and a patch.
  """
  updateUserLanguageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserLanguageByNodeIdInput!
  ): UpdateUserLanguagePayload

  """Updates a single `UserLanguage` using a unique key and a patch."""
  updateUserLanguage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserLanguageInput!
  ): UpdateUserLanguagePayload

  """
  Updates a single `UserSession` using its globally unique id and a patch.
  """
  updateUserSessionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserSessionByNodeIdInput!
  ): UpdateUserSessionPayload

  """Updates a single `UserSession` using a unique key and a patch."""
  updateUserSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserSessionInput!
  ): UpdateUserSessionPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNodeIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByEmailInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByUuidInput!
  ): UpdateUserPayload

  """Deletes a single `LanguageSkillLevel` using its globally unique id."""
  deleteLanguageSkillLevelByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLanguageSkillLevelByNodeIdInput!
  ): DeleteLanguageSkillLevelPayload

  """Deletes a single `LanguageSkillLevel` using a unique key."""
  deleteLanguageSkillLevel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLanguageSkillLevelInput!
  ): DeleteLanguageSkillLevelPayload

  """Deletes a single `Language` using its globally unique id."""
  deleteLanguageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLanguageByNodeIdInput!
  ): DeleteLanguagePayload

  """Deletes a single `Language` using a unique key."""
  deleteLanguage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLanguageInput!
  ): DeleteLanguagePayload

  """Deletes a single `Language` using a unique key."""
  deleteLanguageByAlpha2(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLanguageByAlpha2Input!
  ): DeleteLanguagePayload

  """Deletes a single `Language` using a unique key."""
  deleteLanguageByEnglishName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLanguageByEnglishNameInput!
  ): DeleteLanguagePayload

  """Deletes a single `Pgmigration` using its globally unique id."""
  deletePgmigrationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePgmigrationByNodeIdInput!
  ): DeletePgmigrationPayload

  """Deletes a single `Pgmigration` using a unique key."""
  deletePgmigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePgmigrationInput!
  ): DeletePgmigrationPayload

  """Deletes a single `UserLanguage` using its globally unique id."""
  deleteUserLanguageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserLanguageByNodeIdInput!
  ): DeleteUserLanguagePayload

  """Deletes a single `UserLanguage` using a unique key."""
  deleteUserLanguage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserLanguageInput!
  ): DeleteUserLanguagePayload

  """Deletes a single `UserSession` using its globally unique id."""
  deleteUserSessionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserSessionByNodeIdInput!
  ): DeleteUserSessionPayload

  """Deletes a single `UserSession` using a unique key."""
  deleteUserSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserSessionInput!
  ): DeleteUserSessionPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByNodeIdInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByEmailInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByUuid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByUuidInput!
  ): DeleteUserPayload
}

"""The output of our create `LanguageSkillLevel` mutation."""
type CreateLanguageSkillLevelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LanguageSkillLevel` that was created by this mutation."""
  languageSkillLevel: LanguageSkillLevel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LanguageSkillLevel`. May be used by Relay 1."""
  languageSkillLevelEdge(
    """The method to use when ordering `LanguageSkillLevel`."""
    orderBy: [LanguageSkillLevelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguageSkillLevelsEdge
}

"""All input for the create `LanguageSkillLevel` mutation."""
input CreateLanguageSkillLevelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `LanguageSkillLevel` to be created by this mutation."""
  languageSkillLevel: LanguageSkillLevelInput!
}

"""An input for mutations affecting `LanguageSkillLevel`"""
input LanguageSkillLevelInput {
  id: Int
  name: String
}

"""The output of our create `Language` mutation."""
type CreateLanguagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Language` that was created by this mutation."""
  language: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Language`. May be used by Relay 1."""
  languageEdge(
    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguagesEdge
}

"""All input for the create `Language` mutation."""
input CreateLanguageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Language` to be created by this mutation."""
  language: LanguageInput!
}

"""An input for mutations affecting `Language`"""
input LanguageInput {
  id: Int

  """ISO 3166-1 alpha-2 standardized code"""
  alpha2: String!
  englishName: String!
  createdAt: Datetime
}

"""The output of our create `Pgmigration` mutation."""
type CreatePgmigrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Pgmigration` that was created by this mutation."""
  pgmigration: Pgmigration

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Pgmigration`. May be used by Relay 1."""
  pgmigrationEdge(
    """The method to use when ordering `Pgmigration`."""
    orderBy: [PgmigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PgmigrationsEdge
}

"""All input for the create `Pgmigration` mutation."""
input CreatePgmigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Pgmigration` to be created by this mutation."""
  pgmigration: PgmigrationInput!
}

"""An input for mutations affecting `Pgmigration`"""
input PgmigrationInput {
  id: Int
  name: String!
  runOn: Datetime!
}

"""The output of our create `UserLanguage` mutation."""
type CreateUserLanguagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserLanguage` that was created by this mutation."""
  userLanguage: UserLanguage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserLanguage`."""
  user: User

  """Reads a single `Language` that is related to this `UserLanguage`."""
  language: Language

  """
  Reads a single `LanguageSkillLevel` that is related to this `UserLanguage`.
  """
  languageSkillLevel: LanguageSkillLevel

  """An edge for our `UserLanguage`. May be used by Relay 1."""
  userLanguageEdge(
    """The method to use when ordering `UserLanguage`."""
    orderBy: [UserLanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserLanguagesEdge
}

"""All input for the create `UserLanguage` mutation."""
input CreateUserLanguageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserLanguage` to be created by this mutation."""
  userLanguage: UserLanguageInput!
}

"""An input for mutations affecting `UserLanguage`"""
input UserLanguageInput {
  id: Int
  userId: Int
  languageId: Int
  languageSkillLevelId: Int
  native: Boolean
  createdAt: Datetime
}

"""The output of our create `UserSession` mutation."""
type CreateUserSessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserSession` that was created by this mutation."""
  userSession: UserSession

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserSession`. May be used by Relay 1."""
  userSessionEdge(
    """The method to use when ordering `UserSession`."""
    orderBy: [UserSessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserSessionsEdge
}

"""All input for the create `UserSession` mutation."""
input CreateUserSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserSession` to be created by this mutation."""
  userSession: UserSessionInput!
}

"""An input for mutations affecting `UserSession`"""
input UserSessionInput {
  sid: String!
  sess: JSON!
  expire: Datetime!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""An input for mutations affecting `User`"""
input UserInput {
  id: Int
  username: String
  email: String!
  unconfirmedEmail: String
  gender: String
  bio: String
  lastActiveAt: Datetime
  createdAt: Datetime
  passwordHash: String!
  uuid: UUID!
}

"""The output of our update `LanguageSkillLevel` mutation."""
type UpdateLanguageSkillLevelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LanguageSkillLevel` that was updated by this mutation."""
  languageSkillLevel: LanguageSkillLevel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LanguageSkillLevel`. May be used by Relay 1."""
  languageSkillLevelEdge(
    """The method to use when ordering `LanguageSkillLevel`."""
    orderBy: [LanguageSkillLevelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguageSkillLevelsEdge
}

"""All input for the `updateLanguageSkillLevelByNodeId` mutation."""
input UpdateLanguageSkillLevelByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LanguageSkillLevel` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `LanguageSkillLevel` being updated.
  """
  patch: LanguageSkillLevelPatch!
}

"""
Represents an update to a `LanguageSkillLevel`. Fields that are set will be updated.
"""
input LanguageSkillLevelPatch {
  id: Int
  name: String
}

"""All input for the `updateLanguageSkillLevel` mutation."""
input UpdateLanguageSkillLevelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LanguageSkillLevel` being updated.
  """
  patch: LanguageSkillLevelPatch!
  id: Int!
}

"""The output of our update `Language` mutation."""
type UpdateLanguagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Language` that was updated by this mutation."""
  language: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Language`. May be used by Relay 1."""
  languageEdge(
    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguagesEdge
}

"""All input for the `updateLanguageByNodeId` mutation."""
input UpdateLanguageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Language` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Language` being updated.
  """
  patch: LanguagePatch!
}

"""
Represents an update to a `Language`. Fields that are set will be updated.
"""
input LanguagePatch {
  id: Int

  """ISO 3166-1 alpha-2 standardized code"""
  alpha2: String
  englishName: String
  createdAt: Datetime
}

"""All input for the `updateLanguage` mutation."""
input UpdateLanguageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Language` being updated.
  """
  patch: LanguagePatch!
  id: Int!
}

"""All input for the `updateLanguageByAlpha2` mutation."""
input UpdateLanguageByAlpha2Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Language` being updated.
  """
  patch: LanguagePatch!

  """ISO 3166-1 alpha-2 standardized code"""
  alpha2: String!
}

"""All input for the `updateLanguageByEnglishName` mutation."""
input UpdateLanguageByEnglishNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Language` being updated.
  """
  patch: LanguagePatch!
  englishName: String!
}

"""The output of our update `Pgmigration` mutation."""
type UpdatePgmigrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Pgmigration` that was updated by this mutation."""
  pgmigration: Pgmigration

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Pgmigration`. May be used by Relay 1."""
  pgmigrationEdge(
    """The method to use when ordering `Pgmigration`."""
    orderBy: [PgmigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PgmigrationsEdge
}

"""All input for the `updatePgmigrationByNodeId` mutation."""
input UpdatePgmigrationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Pgmigration` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Pgmigration` being updated.
  """
  patch: PgmigrationPatch!
}

"""
Represents an update to a `Pgmigration`. Fields that are set will be updated.
"""
input PgmigrationPatch {
  id: Int
  name: String
  runOn: Datetime
}

"""All input for the `updatePgmigration` mutation."""
input UpdatePgmigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Pgmigration` being updated.
  """
  patch: PgmigrationPatch!
  id: Int!
}

"""The output of our update `UserLanguage` mutation."""
type UpdateUserLanguagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserLanguage` that was updated by this mutation."""
  userLanguage: UserLanguage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserLanguage`."""
  user: User

  """Reads a single `Language` that is related to this `UserLanguage`."""
  language: Language

  """
  Reads a single `LanguageSkillLevel` that is related to this `UserLanguage`.
  """
  languageSkillLevel: LanguageSkillLevel

  """An edge for our `UserLanguage`. May be used by Relay 1."""
  userLanguageEdge(
    """The method to use when ordering `UserLanguage`."""
    orderBy: [UserLanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserLanguagesEdge
}

"""All input for the `updateUserLanguageByNodeId` mutation."""
input UpdateUserLanguageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserLanguage` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserLanguage` being updated.
  """
  patch: UserLanguagePatch!
}

"""
Represents an update to a `UserLanguage`. Fields that are set will be updated.
"""
input UserLanguagePatch {
  id: Int
  userId: Int
  languageId: Int
  languageSkillLevelId: Int
  native: Boolean
  createdAt: Datetime
}

"""All input for the `updateUserLanguage` mutation."""
input UpdateUserLanguageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserLanguage` being updated.
  """
  patch: UserLanguagePatch!
  id: Int!
}

"""The output of our update `UserSession` mutation."""
type UpdateUserSessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserSession` that was updated by this mutation."""
  userSession: UserSession

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserSession`. May be used by Relay 1."""
  userSessionEdge(
    """The method to use when ordering `UserSession`."""
    orderBy: [UserSessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserSessionsEdge
}

"""All input for the `updateUserSessionByNodeId` mutation."""
input UpdateUserSessionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserSession` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserSession` being updated.
  """
  patch: UserSessionPatch!
}

"""
Represents an update to a `UserSession`. Fields that are set will be updated.
"""
input UserSessionPatch {
  sid: String
  sess: JSON
  expire: Datetime
}

"""All input for the `updateUserSession` mutation."""
input UpdateUserSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserSession` being updated.
  """
  patch: UserSessionPatch!
  sid: String!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `updateUserByNodeId` mutation."""
input UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  id: Int
  username: String
  email: String
  unconfirmedEmail: String
  gender: String
  bio: String
  lastActiveAt: Datetime
  createdAt: Datetime
  passwordHash: String
  uuid: UUID
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  id: Int!
}

"""All input for the `updateUserByEmail` mutation."""
input UpdateUserByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  email: String!
}

"""All input for the `updateUserByUuid` mutation."""
input UpdateUserByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  uuid: UUID!
}

"""The output of our delete `LanguageSkillLevel` mutation."""
type DeleteLanguageSkillLevelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LanguageSkillLevel` that was deleted by this mutation."""
  languageSkillLevel: LanguageSkillLevel
  deletedLanguageSkillLevelNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `LanguageSkillLevel`. May be used by Relay 1."""
  languageSkillLevelEdge(
    """The method to use when ordering `LanguageSkillLevel`."""
    orderBy: [LanguageSkillLevelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguageSkillLevelsEdge
}

"""All input for the `deleteLanguageSkillLevelByNodeId` mutation."""
input DeleteLanguageSkillLevelByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LanguageSkillLevel` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteLanguageSkillLevel` mutation."""
input DeleteLanguageSkillLevelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Language` mutation."""
type DeleteLanguagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Language` that was deleted by this mutation."""
  language: Language
  deletedLanguageNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Language`. May be used by Relay 1."""
  languageEdge(
    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguagesEdge
}

"""All input for the `deleteLanguageByNodeId` mutation."""
input DeleteLanguageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Language` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteLanguage` mutation."""
input DeleteLanguageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteLanguageByAlpha2` mutation."""
input DeleteLanguageByAlpha2Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """ISO 3166-1 alpha-2 standardized code"""
  alpha2: String!
}

"""All input for the `deleteLanguageByEnglishName` mutation."""
input DeleteLanguageByEnglishNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  englishName: String!
}

"""The output of our delete `Pgmigration` mutation."""
type DeletePgmigrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Pgmigration` that was deleted by this mutation."""
  pgmigration: Pgmigration
  deletedPgmigrationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Pgmigration`. May be used by Relay 1."""
  pgmigrationEdge(
    """The method to use when ordering `Pgmigration`."""
    orderBy: [PgmigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PgmigrationsEdge
}

"""All input for the `deletePgmigrationByNodeId` mutation."""
input DeletePgmigrationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Pgmigration` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePgmigration` mutation."""
input DeletePgmigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `UserLanguage` mutation."""
type DeleteUserLanguagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserLanguage` that was deleted by this mutation."""
  userLanguage: UserLanguage
  deletedUserLanguageNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserLanguage`."""
  user: User

  """Reads a single `Language` that is related to this `UserLanguage`."""
  language: Language

  """
  Reads a single `LanguageSkillLevel` that is related to this `UserLanguage`.
  """
  languageSkillLevel: LanguageSkillLevel

  """An edge for our `UserLanguage`. May be used by Relay 1."""
  userLanguageEdge(
    """The method to use when ordering `UserLanguage`."""
    orderBy: [UserLanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserLanguagesEdge
}

"""All input for the `deleteUserLanguageByNodeId` mutation."""
input DeleteUserLanguageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserLanguage` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserLanguage` mutation."""
input DeleteUserLanguageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `UserSession` mutation."""
type DeleteUserSessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserSession` that was deleted by this mutation."""
  userSession: UserSession
  deletedUserSessionNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserSession`. May be used by Relay 1."""
  userSessionEdge(
    """The method to use when ordering `UserSession`."""
    orderBy: [UserSessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserSessionsEdge
}

"""All input for the `deleteUserSessionByNodeId` mutation."""
input DeleteUserSessionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserSession` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserSession` mutation."""
input DeleteUserSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sid: String!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `deleteUserByNodeId` mutation."""
input DeleteUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteUserByEmail` mutation."""
input DeleteUserByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}

"""All input for the `deleteUserByUuid` mutation."""
input DeleteUserByUuidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  uuid: UUID!
}
